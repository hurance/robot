{"map":"{\"version\":3,\"sources\":[\"Dash.js\"],\"names\":[\"modules\",\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"enumerable\",\"get\",\"r\",\"Symbol\",\"toStringTag\",\"value\",\"t\",\"mode\",\"__esModule\",\"ns\",\"create\",\"key\",\"bind\",\"n\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"__webpack_exports__\",\"eval\"],\"mappings\":\"CAAS,SAAUA,GAET,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAJ,EAAQG,GAAUK,KAAKH,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBO,EAAIT,EAGxBE,EAAoBQ,EAAIT,EAGxBC,EAAoBS,EAAI,SAASP,EAASQ,EAAMC,GAC3CX,EAAoBY,EAAEV,EAASQ,IAClCG,OAAOC,eAAeZ,EAASQ,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEX,EAAoBiB,EAAI,SAASf,GACX,oBAAXgB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeZ,EAASgB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeZ,EAAS,aAAc,CAAEkB,OAAO,KAQvDpB,EAAoBqB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQpB,EAAoBoB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAzB,EAAoBiB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOpB,EAAoBS,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRxB,EAAoB4B,EAAI,SAASzB,GAChC,IAAIQ,EAASR,GAAUA,EAAOoB,WAC7B,WAAwB,OAAOpB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBS,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRX,EAAoBY,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG9B,EAAoBiC,EAAI,GAIjBjC,EAAoBA,EAAoBkC,EAAI,IAnFpD,CAsFC,CAEJ,SAAU/B,OAAQgC,oBAAqBnC,qBAE7C,aACAoC,KAAK,29XAIC,SAAUjC,OAAQgC,oBAAqBnC,qBAE7C,aACAoC,KAAK,iwIAIC,SAAUjC,OAAQgC,oBAAqBnC,qBAE7C,aACAoC,KAAK,0/fAIC,SAAUjC,OAAQgC,oBAAqBnC,qBAE7C,aACAoC,KAAK,+nzBAIC,SAAUjC,OAAQgC,oBAAqBnC,qBAE7C,aACAoC,KAAK,46rDAIC,SAAUjC,OAAQgC,oBAAqBnC,qBAE7C,aACAoC,KAAK,oyQAIC,SAAUjC,OAAQgC,oBAAqBnC,qBAE7C,aACAoC,KAAK,uzgMAGE,CAED,SAAUjC,OAAQD,SAExBkC,KAAK,2gBAGE,CACC,CACA,CACA,CACA,CAEF,SAAUjC,OAAQgC,oBAAqBnC,qBAE7C,aACAoC,KAAK\"}","code":"!function(t){var n={};function c(e){if(n[e])return n[e].exports;var l=n[e]={i:e,l:!1,exports:{}};return t[e].call(l.exports,l,l.exports,c),l.l=!0,l.exports}c.m=t,c.c=n,c.d=function(t,n,e){c.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},c.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},c.t=function(t,n){if(1&n&&(t=c(t)),8&n)return t;if(4&n&&\"object\"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(c.r(e),Object.defineProperty(e,\"default\",{enumerable:!0,value:t}),2&n&&\"string\"!=typeof t)for(var l in t)c.d(e,l,function(n){return t[n]}.bind(null,l));return e},c.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return c.d(n,\"a\",n),n},c.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},c.p=\"\",c(c.s=14)}([function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Car; });\\nclass Car {\\n  constructor(x = 0, y = 0, rotation = 0) {\\n    this.setPose(x, y, rotation);\\n  }\\n\\n  static getFrontAxlePosition(pos, rot) {\\n    return THREE.Vector2.fromAngle(rot).multiplyScalar(Car.WHEEL_BASE).add(pos);\\n  }\\n\\n  static getFakeAxlePosition(pos, rot) {\\n    return Car.frontToRearAxlePosition(pos, rot);\\n  }\\n\\n  static centerToRearAxlePosition(pos, rot) {\\n    return THREE.Vector2.fromAngle(rot).multiplyScalar(Car.REAR_AXLE_POS).add(pos);\\n  }\\n\\n  static frontToRearAxlePosition(pos, rot) {\\n    return THREE.Vector2.fromAngle(rot).multiplyScalar(-Car.WHEEL_BASE).add(pos);\\n  }\\n\\n  get pose() {\\n    return { pos: this.rearAxlePosition.clone(), rot: this.rotation, velocity: this.velocity, curv: this.curvature, dCurv: this.dCurv, ddCurv: this.ddCurv };\\n  }\\n\\n  get curvature() {\\n    return Math.tan(this.wheelAngle) / Car.WHEEL_BASE;\\n  }\\n\\n  get rearAxlePosition() {\\n    const { x, y } = this.position;\\n    const rot = this.rotation;\\n    return new THREE.Vector2(x + Math.cos(rot) * Car.REAR_AXLE_POS, y + Math.sin(rot) * Car.REAR_AXLE_POS);\\n  }\\n\\n  get frontAxlePosition() {\\n    const { x, y } = this.position;\\n    const rot = this.rotation;\\n    return new THREE.Vector2(x + Math.cos(rot) * Car.FRONT_AXLE_POS, y + Math.sin(rot) * Car.FRONT_AXLE_POS);\\n  }\\n\\n  setPose(x, y, rotation) {\\n    // Translate so that x and y become the center of the vehicle (instead of the center of the rear axle)\\n    x -= Car.REAR_AXLE_POS * Math.cos(rotation);\\n    y -= Car.REAR_AXLE_POS * Math.sin(rotation);\\n\\n    this.position = new THREE.Vector2(x, y);\\n    this.rotation = Math.wrapAngle(rotation);\\n    this.velocity = 0;\\n    this.acceleration = 0;\\n    this.wheelAngle = 0;\\n    this.wheelAngularVelocity = 0;\\n    this.dCurv = 0; // derivative with respect to arc length\\n    this.ddCurv = 0; // derivative with respect to arc length\\n  }\\n\\n  step(dt) {\\n    const curvPrev = this.curvature;\\n    const dCurvPrev = this.dCurv;\\n\\n    const drag = (0.5 * Car.DRAG_COEFF * Car.FRONTAL_AREA * Car.DENSITY_OF_AIR * Math.abs(this.velocity) + Car.ROLL_RESIST) * -this.velocity;\\n    this.velocity += (this.acceleration + drag / Car.MASS) * dt;\\n\\n    const velocitySq = this.velocity * this.velocity;\\n    const maxWheelAngle = Math.clamp(Math.atan(Car.MAX_LATERAL_ACCEL * Car.WHEEL_BASE / velocitySq), 0.07, Car.MAX_WHEEL_ANGLE);\\n    this.wheelAngle = Math.clamp(Math.wrapAngle(this.wheelAngle + this.wheelAngularVelocity * dt), -maxWheelAngle, maxWheelAngle);\\n\\n    const angularVelocity = this.velocity * this.curvature;\\n    this.rotation = Math.wrapAngle(this.rotation + angularVelocity * dt);\\n\\n    const dist = this.velocity * dt;\\n    this.position = THREE.Vector2.fromAngle(this.rotation).multiplyScalar(dist).add(this.position);\\n\\n    this.dCurv = dist > 0.1 ? (this.curvature - curvPrev) / dist : 0;\\n    this.ddCurv = dist > 0.1 ? (this.dCurv - dCurvPrev) / dist : 0;\\n  }\\n\\n  update(controls, dt) {\\n    const gas = Math.clamp(controls.gas, -1, +1);\\n    const brake = Math.clamp(controls.brake, 0, 1);\\n    const steer = Math.clamp(controls.steer, -1, +1);\\n\\n    if (brake > 0) {\\n      this.acceleration = -Math.sign(this.velocity) * Car.MAX_BRAKE_DECEL * brake;\\n      const newVelocity = this.velocity + this.acceleration * dt;\\n\\n      // If applying the braking deceleration at the next step would cause the velocity\\n      // to change directions, then just set the car as stopped.\\n      if (Math.sign(newVelocity) != Math.sign(this.velocity)) {\\n        this.velocity = 0;\\n        this.acceleration = 0;\\n      }\\n    } else {\\n      this.acceleration = Car.MAX_GAS_ACCEL * gas;\\n    }\\n\\n    if (steer != 0) {\\n      this.wheelAngularVelocity = steer * Car.MAX_STEER_SPEED;\\n    } else {\\n      this.wheelAngularVelocity = Math.clamp(-this.wheelAngle / Car.MAX_WHEEL_ANGLE * this.velocity * this.velocity * dt, -Car.MAX_STEER_SPEED, Car.MAX_STEER_SPEED);\\n    }\\n  }\\n}\\n\\nCar.HALF_CAR_LENGTH = 2.5; // meters\\nCar.HALF_CAR_WIDTH = 1; // meters\\nCar.HALF_WHEEL_LENGTH = 0.38; // meters\\nCar.HALF_WHEEL_WIDTH = 0.12; // meters\\nCar.MAX_WHEEL_ANGLE = 32 / 180 * Math.PI; // radians\\nCar.MASS = 1600; // kg\\nCar.DRAG_COEFF = 0.7;\\nCar.DENSITY_OF_AIR = 1.8580608; // (kg/m^3)\\nCar.FRONTAL_AREA = 1.85; // m^2\\nCar.ROLL_RESIST = 0;\\nCar.MAX_STEER_SPEED = 0.8;//1.2; // Radians per second\\nCar.MAX_GAS_ACCEL = 3.5; // m / s^2\\nCar.MAX_BRAKE_DECEL = 6.5; // m / s^2\\nCar.WHEEL_LATERAL_POS = 0.843; // meters\\nCar.FRONT_AXLE_POS = 1.6; // meters\\nCar.REAR_AXLE_POS = -1.43; // meters\\nCar.WHEEL_BASE = Car.FRONT_AXLE_POS - Car.REAR_AXLE_POS; // meters\\nCar.MAX_LATERAL_ACCEL = 9.81; // m / s^2\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9waHlzaWNzL0Nhci5qcz8yYzBlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixvQkFBb0I7QUFDcEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLHVCQUF1QjtBQUN2Qiw2QkFBNkI7QUFDN0IsNEJBQTRCO0FBQzVCLHlDQUF5QztBQUN6QyxnQkFBZ0I7QUFDaEI7QUFDQSwrQkFBK0I7QUFDL0Isd0JBQXdCO0FBQ3hCO0FBQ0EsMEJBQTBCLE1BQU07QUFDaEMsd0JBQXdCO0FBQ3hCLDBCQUEwQjtBQUMxQiw4QkFBOEI7QUFDOUIseUJBQXlCO0FBQ3pCLDBCQUEwQjtBQUMxQix3REFBd0Q7QUFDeEQsNkJBQTZCIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYXIge1xuICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IDAsIHJvdGF0aW9uID0gMCkge1xuICAgIHRoaXMuc2V0UG9zZSh4LCB5LCByb3RhdGlvbik7XG4gIH1cblxuICBzdGF0aWMgZ2V0RnJvbnRBeGxlUG9zaXRpb24ocG9zLCByb3QpIHtcbiAgICByZXR1cm4gVEhSRUUuVmVjdG9yMi5mcm9tQW5nbGUocm90KS5tdWx0aXBseVNjYWxhcihDYXIuV0hFRUxfQkFTRSkuYWRkKHBvcyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0RmFrZUF4bGVQb3NpdGlvbihwb3MsIHJvdCkge1xuICAgIHJldHVybiBDYXIuZnJvbnRUb1JlYXJBeGxlUG9zaXRpb24ocG9zLCByb3QpO1xuICB9XG5cbiAgc3RhdGljIGNlbnRlclRvUmVhckF4bGVQb3NpdGlvbihwb3MsIHJvdCkge1xuICAgIHJldHVybiBUSFJFRS5WZWN0b3IyLmZyb21BbmdsZShyb3QpLm11bHRpcGx5U2NhbGFyKENhci5SRUFSX0FYTEVfUE9TKS5hZGQocG9zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9udFRvUmVhckF4bGVQb3NpdGlvbihwb3MsIHJvdCkge1xuICAgIHJldHVybiBUSFJFRS5WZWN0b3IyLmZyb21BbmdsZShyb3QpLm11bHRpcGx5U2NhbGFyKC1DYXIuV0hFRUxfQkFTRSkuYWRkKHBvcyk7XG4gIH1cblxuICBnZXQgcG9zZSgpIHtcbiAgICByZXR1cm4geyBwb3M6IHRoaXMucmVhckF4bGVQb3NpdGlvbi5jbG9uZSgpLCByb3Q6IHRoaXMucm90YXRpb24sIHZlbG9jaXR5OiB0aGlzLnZlbG9jaXR5LCBjdXJ2OiB0aGlzLmN1cnZhdHVyZSwgZEN1cnY6IHRoaXMuZEN1cnYsIGRkQ3VydjogdGhpcy5kZEN1cnYgfTtcbiAgfVxuXG4gIGdldCBjdXJ2YXR1cmUoKSB7XG4gICAgcmV0dXJuIE1hdGgudGFuKHRoaXMud2hlZWxBbmdsZSkgLyBDYXIuV0hFRUxfQkFTRTtcbiAgfVxuXG4gIGdldCByZWFyQXhsZVBvc2l0aW9uKCkge1xuICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcy5wb3NpdGlvbjtcbiAgICBjb25zdCByb3QgPSB0aGlzLnJvdGF0aW9uO1xuICAgIHJldHVybiBuZXcgVEhSRUUuVmVjdG9yMih4ICsgTWF0aC5jb3Mocm90KSAqIENhci5SRUFSX0FYTEVfUE9TLCB5ICsgTWF0aC5zaW4ocm90KSAqIENhci5SRUFSX0FYTEVfUE9TKTtcbiAgfVxuXG4gIGdldCBmcm9udEF4bGVQb3NpdGlvbigpIHtcbiAgICBjb25zdCB7IHgsIHkgfSA9IHRoaXMucG9zaXRpb247XG4gICAgY29uc3Qgcm90ID0gdGhpcy5yb3RhdGlvbjtcbiAgICByZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjIoeCArIE1hdGguY29zKHJvdCkgKiBDYXIuRlJPTlRfQVhMRV9QT1MsIHkgKyBNYXRoLnNpbihyb3QpICogQ2FyLkZST05UX0FYTEVfUE9TKTtcbiAgfVxuXG4gIHNldFBvc2UoeCwgeSwgcm90YXRpb24pIHtcbiAgICAvLyBUcmFuc2xhdGUgc28gdGhhdCB4IGFuZCB5IGJlY29tZSB0aGUgY2VudGVyIG9mIHRoZSB2ZWhpY2xlIChpbnN0ZWFkIG9mIHRoZSBjZW50ZXIgb2YgdGhlIHJlYXIgYXhsZSlcbiAgICB4IC09IENhci5SRUFSX0FYTEVfUE9TICogTWF0aC5jb3Mocm90YXRpb24pO1xuICAgIHkgLT0gQ2FyLlJFQVJfQVhMRV9QT1MgKiBNYXRoLnNpbihyb3RhdGlvbik7XG5cbiAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjIoeCwgeSk7XG4gICAgdGhpcy5yb3RhdGlvbiA9IE1hdGgud3JhcEFuZ2xlKHJvdGF0aW9uKTtcbiAgICB0aGlzLnZlbG9jaXR5ID0gMDtcbiAgICB0aGlzLmFjY2VsZXJhdGlvbiA9IDA7XG4gICAgdGhpcy53aGVlbEFuZ2xlID0gMDtcbiAgICB0aGlzLndoZWVsQW5ndWxhclZlbG9jaXR5ID0gMDtcbiAgICB0aGlzLmRDdXJ2ID0gMDsgLy8gZGVyaXZhdGl2ZSB3aXRoIHJlc3BlY3QgdG8gYXJjIGxlbmd0aFxuICAgIHRoaXMuZGRDdXJ2ID0gMDsgLy8gZGVyaXZhdGl2ZSB3aXRoIHJlc3BlY3QgdG8gYXJjIGxlbmd0aFxuICB9XG5cbiAgc3RlcChkdCkge1xuICAgIGNvbnN0IGN1cnZQcmV2ID0gdGhpcy5jdXJ2YXR1cmU7XG4gICAgY29uc3QgZEN1cnZQcmV2ID0gdGhpcy5kQ3VydjtcblxuICAgIGNvbnN0IGRyYWcgPSAoMC41ICogQ2FyLkRSQUdfQ09FRkYgKiBDYXIuRlJPTlRBTF9BUkVBICogQ2FyLkRFTlNJVFlfT0ZfQUlSICogTWF0aC5hYnModGhpcy52ZWxvY2l0eSkgKyBDYXIuUk9MTF9SRVNJU1QpICogLXRoaXMudmVsb2NpdHk7XG4gICAgdGhpcy52ZWxvY2l0eSArPSAodGhpcy5hY2NlbGVyYXRpb24gKyBkcmFnIC8gQ2FyLk1BU1MpICogZHQ7XG5cbiAgICBjb25zdCB2ZWxvY2l0eVNxID0gdGhpcy52ZWxvY2l0eSAqIHRoaXMudmVsb2NpdHk7XG4gICAgY29uc3QgbWF4V2hlZWxBbmdsZSA9IE1hdGguY2xhbXAoTWF0aC5hdGFuKENhci5NQVhfTEFURVJBTF9BQ0NFTCAqIENhci5XSEVFTF9CQVNFIC8gdmVsb2NpdHlTcSksIDAuMDcsIENhci5NQVhfV0hFRUxfQU5HTEUpO1xuICAgIHRoaXMud2hlZWxBbmdsZSA9IE1hdGguY2xhbXAoTWF0aC53cmFwQW5nbGUodGhpcy53aGVlbEFuZ2xlICsgdGhpcy53aGVlbEFuZ3VsYXJWZWxvY2l0eSAqIGR0KSwgLW1heFdoZWVsQW5nbGUsIG1heFdoZWVsQW5nbGUpO1xuXG4gICAgY29uc3QgYW5ndWxhclZlbG9jaXR5ID0gdGhpcy52ZWxvY2l0eSAqIHRoaXMuY3VydmF0dXJlO1xuICAgIHRoaXMucm90YXRpb24gPSBNYXRoLndyYXBBbmdsZSh0aGlzLnJvdGF0aW9uICsgYW5ndWxhclZlbG9jaXR5ICogZHQpO1xuXG4gICAgY29uc3QgZGlzdCA9IHRoaXMudmVsb2NpdHkgKiBkdDtcbiAgICB0aGlzLnBvc2l0aW9uID0gVEhSRUUuVmVjdG9yMi5mcm9tQW5nbGUodGhpcy5yb3RhdGlvbikubXVsdGlwbHlTY2FsYXIoZGlzdCkuYWRkKHRoaXMucG9zaXRpb24pO1xuXG4gICAgdGhpcy5kQ3VydiA9IGRpc3QgPiAwLjEgPyAodGhpcy5jdXJ2YXR1cmUgLSBjdXJ2UHJldikgLyBkaXN0IDogMDtcbiAgICB0aGlzLmRkQ3VydiA9IGRpc3QgPiAwLjEgPyAodGhpcy5kQ3VydiAtIGRDdXJ2UHJldikgLyBkaXN0IDogMDtcbiAgfVxuXG4gIHVwZGF0ZShjb250cm9scywgZHQpIHtcbiAgICBjb25zdCBnYXMgPSBNYXRoLmNsYW1wKGNvbnRyb2xzLmdhcywgLTEsICsxKTtcbiAgICBjb25zdCBicmFrZSA9IE1hdGguY2xhbXAoY29udHJvbHMuYnJha2UsIDAsIDEpO1xuICAgIGNvbnN0IHN0ZWVyID0gTWF0aC5jbGFtcChjb250cm9scy5zdGVlciwgLTEsICsxKTtcblxuICAgIGlmIChicmFrZSA+IDApIHtcbiAgICAgIHRoaXMuYWNjZWxlcmF0aW9uID0gLU1hdGguc2lnbih0aGlzLnZlbG9jaXR5KSAqIENhci5NQVhfQlJBS0VfREVDRUwgKiBicmFrZTtcbiAgICAgIGNvbnN0IG5ld1ZlbG9jaXR5ID0gdGhpcy52ZWxvY2l0eSArIHRoaXMuYWNjZWxlcmF0aW9uICogZHQ7XG5cbiAgICAgIC8vIElmIGFwcGx5aW5nIHRoZSBicmFraW5nIGRlY2VsZXJhdGlvbiBhdCB0aGUgbmV4dCBzdGVwIHdvdWxkIGNhdXNlIHRoZSB2ZWxvY2l0eVxuICAgICAgLy8gdG8gY2hhbmdlIGRpcmVjdGlvbnMsIHRoZW4ganVzdCBzZXQgdGhlIGNhciBhcyBzdG9wcGVkLlxuICAgICAgaWYgKE1hdGguc2lnbihuZXdWZWxvY2l0eSkgIT0gTWF0aC5zaWduKHRoaXMudmVsb2NpdHkpKSB7XG4gICAgICAgIHRoaXMudmVsb2NpdHkgPSAwO1xuICAgICAgICB0aGlzLmFjY2VsZXJhdGlvbiA9IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWNjZWxlcmF0aW9uID0gQ2FyLk1BWF9HQVNfQUNDRUwgKiBnYXM7XG4gICAgfVxuXG4gICAgaWYgKHN0ZWVyICE9IDApIHtcbiAgICAgIHRoaXMud2hlZWxBbmd1bGFyVmVsb2NpdHkgPSBzdGVlciAqIENhci5NQVhfU1RFRVJfU1BFRUQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud2hlZWxBbmd1bGFyVmVsb2NpdHkgPSBNYXRoLmNsYW1wKC10aGlzLndoZWVsQW5nbGUgLyBDYXIuTUFYX1dIRUVMX0FOR0xFICogdGhpcy52ZWxvY2l0eSAqIHRoaXMudmVsb2NpdHkgKiBkdCwgLUNhci5NQVhfU1RFRVJfU1BFRUQsIENhci5NQVhfU1RFRVJfU1BFRUQpO1xuICAgIH1cbiAgfVxufVxuXG5DYXIuSEFMRl9DQVJfTEVOR1RIID0gMi41OyAvLyBtZXRlcnNcbkNhci5IQUxGX0NBUl9XSURUSCA9IDE7IC8vIG1ldGVyc1xuQ2FyLkhBTEZfV0hFRUxfTEVOR1RIID0gMC4zODsgLy8gbWV0ZXJzXG5DYXIuSEFMRl9XSEVFTF9XSURUSCA9IDAuMTI7IC8vIG1ldGVyc1xuQ2FyLk1BWF9XSEVFTF9BTkdMRSA9IDMyIC8gMTgwICogTWF0aC5QSTsgLy8gcmFkaWFuc1xuQ2FyLk1BU1MgPSAxNjAwOyAvLyBrZ1xuQ2FyLkRSQUdfQ09FRkYgPSAwLjc7XG5DYXIuREVOU0lUWV9PRl9BSVIgPSAxLjg1ODA2MDg7IC8vIChrZy9tXjMpXG5DYXIuRlJPTlRBTF9BUkVBID0gMS44NTsgLy8gbV4yXG5DYXIuUk9MTF9SRVNJU1QgPSAwO1xuQ2FyLk1BWF9TVEVFUl9TUEVFRCA9IDAuODsvLzEuMjsgLy8gUmFkaWFucyBwZXIgc2Vjb25kXG5DYXIuTUFYX0dBU19BQ0NFTCA9IDMuNTsgLy8gbSAvIHNeMlxuQ2FyLk1BWF9CUkFLRV9ERUNFTCA9IDYuNTsgLy8gbSAvIHNeMlxuQ2FyLldIRUVMX0xBVEVSQUxfUE9TID0gMC44NDM7IC8vIG1ldGVyc1xuQ2FyLkZST05UX0FYTEVfUE9TID0gMS42OyAvLyBtZXRlcnNcbkNhci5SRUFSX0FYTEVfUE9TID0gLTEuNDM7IC8vIG1ldGVyc1xuQ2FyLldIRUVMX0JBU0UgPSBDYXIuRlJPTlRfQVhMRV9QT1MgLSBDYXIuUkVBUl9BWExFX1BPUzsgLy8gbWV0ZXJzXG5DYXIuTUFYX0xBVEVSQUxfQUNDRUwgPSA5LjgxOyAvLyBtIC8gc14yXG4iXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n')},function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return StaticObstacle; });\\nclass StaticObstacle {\\n  static hydrate(obj) {\\n    Object.setPrototypeOf(obj, StaticObstacle.prototype);\\n    Object.setPrototypeOf(obj.pos, THREE.Vector2.prototype);\\n  }\\n\\n  static fromJSON(json) {\\n    return new StaticObstacle(new THREE.Vector2(json.p[0], json.p[1]), json.r, json.w, json.h);\\n  }\\n\\n  constructor(pos, rot, width, height) {\\n    this.pos = pos;\\n    this.rot = rot;\\n    this.width = width;\\n    this.height = height;\\n\\n    this.updateVertices();\\n  }\\n\\n  toJSON() {\\n    const trunc = n => +n.toFixed(5);\\n\\n    return {\\n      p: [trunc(this.pos.x), trunc(this.pos.y)],\\n      r: trunc(this.rot),\\n      w: trunc(this.width),\\n      h: trunc(this.height)\\n    };\\n  }\\n\\n  updateVertices() {\\n    this.vertices = [];\\n\\n    const cosRot = Math.cos(this.rot);\\n    const sinRot = Math.sin(this.rot);\\n    const halfWidth = this.width / 2;\\n    const halfHeight = this.height / 2;\\n\\n    const hWcR = halfWidth * cosRot;\\n    const hWsR = halfWidth * sinRot;\\n    const hHcR = halfHeight * cosRot;\\n    const hHsR = halfHeight * sinRot;\\n\\n    const v1 = [-hWcR - hHsR + this.pos.x, -hWsR + hHcR + this.pos.y];\\n    const v2 = [-hWcR + hHsR + this.pos.x, -hWsR - hHcR + this.pos.y];\\n    const v3 = [hWcR + hHsR + this.pos.x, hWsR - hHcR + this.pos.y];\\n    const v4 = [hWcR - hHsR + this.pos.x, hWsR + hHcR + this.pos.y];\\n\\n    this.vertices = [\\n      v1[0], v1[1],\\n      v2[0], v2[1],\\n      v3[0], v3[1],\\n      v3[0], v3[1],\\n      v4[0], v4[1],\\n      v1[0], v1[1]\\n    ];\\n  }\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9hdXRvbm9teS9TdGF0aWNPYnN0YWNsZS5qcz84OTA2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdGljT2JzdGFjbGUge1xuICBzdGF0aWMgaHlkcmF0ZShvYmopIHtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yob2JqLCBTdGF0aWNPYnN0YWNsZS5wcm90b3R5cGUpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihvYmoucG9zLCBUSFJFRS5WZWN0b3IyLnByb3RvdHlwZSk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpTT04oanNvbikge1xuICAgIHJldHVybiBuZXcgU3RhdGljT2JzdGFjbGUobmV3IFRIUkVFLlZlY3RvcjIoanNvbi5wWzBdLCBqc29uLnBbMV0pLCBqc29uLnIsIGpzb24udywganNvbi5oKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHBvcywgcm90LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdGhpcy5wb3MgPSBwb3M7XG4gICAgdGhpcy5yb3QgPSByb3Q7XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgdGhpcy51cGRhdGVWZXJ0aWNlcygpO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIGNvbnN0IHRydW5jID0gbiA9PiArbi50b0ZpeGVkKDUpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHA6IFt0cnVuYyh0aGlzLnBvcy54KSwgdHJ1bmModGhpcy5wb3MueSldLFxuICAgICAgcjogdHJ1bmModGhpcy5yb3QpLFxuICAgICAgdzogdHJ1bmModGhpcy53aWR0aCksXG4gICAgICBoOiB0cnVuYyh0aGlzLmhlaWdodClcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlVmVydGljZXMoKSB7XG4gICAgdGhpcy52ZXJ0aWNlcyA9IFtdO1xuXG4gICAgY29uc3QgY29zUm90ID0gTWF0aC5jb3ModGhpcy5yb3QpO1xuICAgIGNvbnN0IHNpblJvdCA9IE1hdGguc2luKHRoaXMucm90KTtcbiAgICBjb25zdCBoYWxmV2lkdGggPSB0aGlzLndpZHRoIC8gMjtcbiAgICBjb25zdCBoYWxmSGVpZ2h0ID0gdGhpcy5oZWlnaHQgLyAyO1xuXG4gICAgY29uc3QgaFdjUiA9IGhhbGZXaWR0aCAqIGNvc1JvdDtcbiAgICBjb25zdCBoV3NSID0gaGFsZldpZHRoICogc2luUm90O1xuICAgIGNvbnN0IGhIY1IgPSBoYWxmSGVpZ2h0ICogY29zUm90O1xuICAgIGNvbnN0IGhIc1IgPSBoYWxmSGVpZ2h0ICogc2luUm90O1xuXG4gICAgY29uc3QgdjEgPSBbLWhXY1IgLSBoSHNSICsgdGhpcy5wb3MueCwgLWhXc1IgKyBoSGNSICsgdGhpcy5wb3MueV07XG4gICAgY29uc3QgdjIgPSBbLWhXY1IgKyBoSHNSICsgdGhpcy5wb3MueCwgLWhXc1IgLSBoSGNSICsgdGhpcy5wb3MueV07XG4gICAgY29uc3QgdjMgPSBbaFdjUiArIGhIc1IgKyB0aGlzLnBvcy54LCBoV3NSIC0gaEhjUiArIHRoaXMucG9zLnldO1xuICAgIGNvbnN0IHY0ID0gW2hXY1IgLSBoSHNSICsgdGhpcy5wb3MueCwgaFdzUiArIGhIY1IgKyB0aGlzLnBvcy55XTtcblxuICAgIHRoaXMudmVydGljZXMgPSBbXG4gICAgICB2MVswXSwgdjFbMV0sXG4gICAgICB2MlswXSwgdjJbMV0sXG4gICAgICB2M1swXSwgdjNbMV0sXG4gICAgICB2M1swXSwgdjNbMV0sXG4gICAgICB2NFswXSwgdjRbMV0sXG4gICAgICB2MVswXSwgdjFbMV1cbiAgICBdO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///1\\n')},function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return CubicPath; });\\nconst SIMPSONS_INTERVALS = 8;\\nconst NEWTON_ITERATIONS = 16;\\nconst RELAXATION_ITERATIONS = 32;\\nconst CONVERGENCE_ERROR = 0.01;\\n\\nconst jacobian = new THREE.Matrix3();\\nconst invJacobian = new THREE.Matrix3();\\n\\n// Alternate reference implementation: https://github.com/ApolloAuto/apollo/blob/master/modules/planning/math/spiral_curve/cubic_spiral_curve.cc\\nclass CubicPath {\\n  constructor(start, end, params = null) {\\n    this.start = Object.assign({}, start);\\n    this.end = Object.assign({}, end);\\n\\n    if (start.pos) {\\n      this.start.x = start.pos.x;\\n      this.start.y = start.pos.y\\n    }\\n\\n    if (end.pos) {\\n      this.end.x = end.pos.x;\\n      this.end.y = end.pos.y\\n    }\\n\\n    const diffX = this.end.x - this.start.x;\\n    const diffY = this.end.y - this.start.y;\\n    const sinRot = Math.sin(this.start.rot);\\n    const cosRot = Math.cos(this.start.rot);\\n\\n    this.goal = {\\n      x: cosRot * diffX + sinRot * diffY,\\n      y: -sinRot * diffX + cosRot * diffY,\\n      rot: Math.wrapAngle(this.end.rot - this.start.rot),\\n      curv: this.end.curv\\n    };\\n\\n    if (params)\\n      this.params = Object.assign({}, params, { p0: this.start.curv, p3: this.end.curv });\\n    else\\n      this.guessInitialParams();\\n\\n    this.converged = false;\\n  }\\n\\n  guessInitialParams() {\\n    const originalGoal = this.goal;\\n    const dStartCurv = this.start.curv / RELAXATION_ITERATIONS;\\n    const dGoalY = originalGoal.y / RELAXATION_ITERATIONS;\\n    const dGoalRot = originalGoal.rot / RELAXATION_ITERATIONS;\\n    const dGoalCurv = originalGoal.curv / RELAXATION_ITERATIONS;\\n\\n    this.goal = {\\n      x: originalGoal.x,\\n      y: 0,\\n      rot: 0,\\n      curv: 0\\n    };\\n\\n    this.params = {\\n      p0: 0,\\n      p1: 0,\\n      p2: 0,\\n      p3: 0,\\n      sG: originalGoal.x\\n    };\\n\\n    for (let i = 0; i < RELAXATION_ITERATIONS; i++) {\\n      this.params.p0 += dStartCurv;\\n      this.params.p3 += dGoalCurv;\\n      this.goal.y += dGoalY;\\n      this.goal.rot += dGoalRot;\\n      this.goal.curv += dGoalCurv;\\n\\n      this.iterate();\\n    }\\n\\n    this.goal = originalGoal;\\n  }\\n\\n  optimize() {\\n    for (let i = 0; i < NEWTON_ITERATIONS; i++) {\\n      if (this.iterate()) {\\n        this.converged = true;\\n        return true;\\n      }\\n    }\\n\\n    this.converged = false;\\n    return false;\\n  }\\n\\n  iterate() {\\n    const { p0, p1, p2, p3, sG } = this.params;\\n\\n    const ds = sG / SIMPSONS_INTERVALS;\\n    const sG_2 = sG * sG;\\n    const sG_3 = sG_2 * sG;\\n\\n    let dX_p1 = 0;\\n    let dX_p2 = 0;\\n    let dX_sG = 0;\\n    let dY_p1 = 0;\\n    let dY_p2 = 0;\\n    let dY_sG = 0;\\n    let guessX = 0;\\n    let guessY = 0;\\n\\n    let theta, cosTheta, sinTheta, dT_p1, dT_p2, dT_sG;\\n\\n    for (let i = 0, s = 0; i <= SIMPSONS_INTERVALS; i++, s += ds) {\\n      const coeff = i == 0 || i == SIMPSONS_INTERVALS ? 1 : i % 2 == 0 ? 2 : 4;\\n\\n      const a = p0;\\n      const b = (-5.5 * p0 + 9 * p1 - 4.5 * p2 + p3) / sG;\\n      const c = (9 * p0 - 22.5 * p1 + 18 * p2 - 4.5 * p3) / sG_2;\\n      const d = (-4.5 * (p0 - 3 * p1 + 3 * p2 - p3)) / sG_3;\\n\\n      theta = (((d * s / 4 + c / 3) * s + b / 2) * s + a) * s;\\n      cosTheta = Math.cos(theta);\\n      sinTheta = Math.sin(theta);\\n\\n      const s_sG = s / sG;\\n      dT_p1 = ((3.375 * s_sG - 7.5) * s_sG + 4.5) * s_sG * s;\\n      dT_p2 = ((-3.375 * s_sG + 6) * s_sG - 2.25) * s_sG * s;\\n      dT_sG = ((3.375 * (p0 - 3 * p1 + 3 * p2 - p3) * s_sG - 3 * (2 * p0 - 5 * p1 + 4 * p2 - p3)) * s_sG + 0.25 * (11 * p0 - 18 * p1 + 9 * p2 - 2 * p3)) * s_sG * s_sG;\\n\\n      dX_p1 -= coeff * sinTheta * dT_p1;\\n      dX_p2 -= coeff * sinTheta * dT_p2;\\n      dX_sG -= coeff * sinTheta * dT_sG;\\n\\n      dY_p1 += coeff * cosTheta * dT_p1;\\n      dY_p2 += coeff * cosTheta * dT_p2;\\n      dY_sG += coeff * cosTheta * dT_sG;\\n\\n      guessX += coeff * cosTheta;\\n      guessY += coeff * sinTheta;\\n    }\\n\\n    // After the Simpson\\'s integration loop, `theta`, `cosTheta`, `sinTheta`,\\n    // `dT_p1`, `dT_p2`, and `dT_sG` hold the appropriate values for `sG`.\\n\\n    const hOver3 = sG / SIMPSONS_INTERVALS / 3;\\n\\n    const deltaX = this.goal.x - guessX * hOver3;\\n    const deltaY = this.goal.y - guessY * hOver3;\\n    const deltaRot = Math.wrapAngle(this.goal.rot - theta);\\n\\n    if (Math.abs(deltaX) + Math.abs(deltaY) + Math.abs(deltaRot) < CONVERGENCE_ERROR)\\n      return true;\\n\\n    jacobian.set(\\n      dX_p1 * hOver3, dX_p2 * hOver3, cosTheta + dX_sG * hOver3,\\n      dY_p1 * hOver3, dY_p2 * hOver3, sinTheta + dY_sG * hOver3,\\n      dT_p1, dT_p2, dT_sG\\n    );\\n\\n    const [m11, m21, m31, m12, m22, m32, m13, m23, m33] = invJacobian.getInverse(jacobian).elements;\\n\\n    this.params.p1 += m11 * deltaX + m12 * deltaY + m13 * deltaRot;\\n    this.params.p2 += m21 * deltaX + m22 * deltaY + m23 * deltaRot;\\n    this.params.sG += m31 * deltaX + m32 * deltaY + m33 * deltaRot;\\n\\n    return false;\\n  }\\n\\n  buildPath(num) {\\n    const { p0, p1, p2, p3, sG } = this.params;\\n\\n    const sG_2 = sG * sG;\\n    const sG_3 = sG_2 * sG;\\n\\n    const a = p0;\\n    const b = (-5.5 * p0 + 9 * p1 - 4.5 * p2 + p3) / sG;\\n    const c = (9 * p0 - 22.5 * p1 + 18 * p2 - 4.5 * p3) / sG_2;\\n    const d = (-4.5 * (p0 - 3 * p1 + 3 * p2 - p3)) / sG_3;\\n\\n    const path = [{ pos: new THREE.Vector2(this.start.x, this.start.y), rot: this.start.rot, curv: this.start.curv }];\\n    const ds = sG / (num - 1);\\n    let s = ds;\\n    let dx = 0;\\n    let dy = 0;\\n    let prevCosRot = Math.cos(path[0].rot);\\n    let prevSinRot = Math.sin(path[0].rot);\\n\\n    for (let i = 1; i < num - 1; i++) {\\n      const rot = (((d * s / 4 + c / 3) * s + b / 2) * s + a) * s + this.start.rot;\\n      const curv = ((d * s + c) * s + b) * s + a;\\n      const cosRot = Math.cos(rot);\\n      const sinRot = Math.sin(rot);\\n\\n      dx = dx * (i - 1) / i + (cosRot + prevCosRot) / (2 * i);\\n      dy = dy * (i - 1) / i + (sinRot + prevSinRot) / (2 * i);\\n\\n      path.push({ pos: new THREE.Vector2(s * dx + this.start.x, s * dy + this.start.y), rot: rot, curv: curv });\\n\\n      s += ds;\\n      prevCosRot = cosRot;\\n      prevSinRot = sinRot;\\n    }\\n\\n    path.push({ pos: new THREE.Vector2(this.end.x, this.end.y), rot: this.end.rot, curv: this.end.curv });\\n\\n    return path;\\n  }\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///2\\n')},function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return LanePath; });\\nconst halfLaneWidth = 3.7;\\n\\nconst centerlineGeometry = new THREE.Geometry();\\nconst leftBoundaryGeometry = new THREE.Geometry();\\nconst rightBoundaryGeometry = new THREE.Geometry();\\n\\nclass LanePath {\\n  static hydrate(obj) {\\n    Object.setPrototypeOf(obj, LanePath.prototype);\\n  }\\n\\n  constructor() {\\n    this.anchors = [];\\n    this.centerlines = [];\\n    this.sampleLengths = [];\\n    this.arcLengths = [];\\n    this.leftBoundaries = [];\\n    this.rightBoundaries = [];\\n  }\\n\\n  get centerline() {\\n    return [].concat(...this.centerlines);\\n  }\\n\\n  get leftBoundary() {\\n    return [].concat(...this.leftBoundaries);\\n  }\\n\\n  get rightBoundary() {\\n    return [].concat(...this.rightBoundaries);\\n  }\\n\\n  get arcLength() {\\n    return this.arcLengths.reduce((sum, l) => sum + l, 0);\\n  }\\n\\n  sampleStations(startStation, num, interval) {\\n    const samples = [];\\n    let anchorIndex = 0;\\n    let sampleIndex = 0;\\n    let totalLength = 0;\\n    let nextStation = startStation;\\n\\n    while (totalLength + this.arcLengths[anchorIndex] < nextStation) {\\n      totalLength += this.arcLengths[anchorIndex];\\n\\n      if (++anchorIndex >= this.arcLengths.length)\\n        return samples;\\n    }\\n\\n    for (let i = 0; i < num; i++) {\\n      let length = this.sampleLengths[anchorIndex][sampleIndex];\\n      while (totalLength + length < nextStation) {\\n        totalLength += length;\\n\\n        if (++sampleIndex >= this.sampleLengths[anchorIndex].length) {\\n          sampleIndex = 0;\\n\\n          if (++anchorIndex >= this.sampleLengths.length)\\n            return samples;\\n        }\\n\\n        length = this.sampleLengths[anchorIndex][sampleIndex];\\n      }\\n\\n      const [p0, p1, p2, p3] = this.anchorsForSplineIndex(anchorIndex);\\n      const weight = (sampleIndex + (nextStation - totalLength) / length) / this.sampleLengths[anchorIndex].length;\\n      const pos = catmullRomVec(weight, p0, p1, p2, p3);\\n      const tangent = tangentAt(weight, p0, p1, p2, p3);\\n      const rot = Math.atan2(tangent.y, tangent.x);\\n      const curv = curvatureAt(weight, p0, p1, p2, p3);\\n\\n      samples.push({ pos, rot, curv });\\n      nextStation += interval;\\n    }\\n\\n    return samples;\\n  }\\n\\n  stationLatitudeFromPosition(position, aroundAnchorIndex = null) {\\n    const [anchorIndex, sampleIndex, sampleStation, prevSampleStation] = this._findClosestSample(position, aroundAnchorIndex);\\n\\n    if (anchorIndex === undefined) return [0, 0, 0];\\n\\n    let prevPoint;\\n    let nextPoint;\\n    let prevStation;\\n    let nextStation;\\n\\n    if (anchorIndex == 0 && sampleIndex == 0) {\\n      prevPoint = this.centerlines[anchorIndex][sampleIndex];\\n      nextPoint = this.centerlines[anchorIndex][sampleIndex + 1];\\n      prevStation = 0;\\n      nextStation = this.sampleLengths[anchorIndex][sampleIndex];\\n    } else if (anchorIndex == this.centerlines.length - 1 && sampleIndex == this.centerlines[anchorIndex].length - 1) {\\n      prevPoint = this.centerlines[anchorIndex][sampleIndex - 1];\\n      nextPoint = this.centerlines[anchorIndex][sampleIndex];\\n      prevStation = prevSampleStation;\\n      nextStation = sampleStation;\\n    } else {\\n      prevPoint = sampleIndex == 0 ? this.centerlines[anchorIndex - 1][this.centerlines[anchorIndex - 1].length - 1] : this.centerlines[anchorIndex][sampleIndex - 1];\\n      nextPoint = sampleIndex == this.centerlines[anchorIndex].length - 1 ? this.centerlines[anchorIndex + 1][0] : this.centerlines[anchorIndex][sampleIndex + 1];\\n\\n      const possibleNext = this.centerlines[anchorIndex][sampleIndex];\\n      const possibleProgress = position.clone().sub(prevPoint).dot(possibleNext.clone().sub(prevPoint)) / prevPoint.distanceToSquared(possibleNext);\\n\\n      if (possibleProgress < 1) {\\n        nextPoint = possibleNext;\\n        prevStation = prevSampleStation;\\n        nextStation = sampleStation;\\n      } else {\\n        prevPoint = possibleNext;\\n        prevStation = sampleStation;\\n        nextStation = sampleStation + this.sampleLengths[anchorIndex][sampleIndex];\\n      }\\n    }\\n\\n    const progress = Math.clamp(position.clone().sub(prevPoint).dot(nextPoint.clone().sub(prevPoint)) / prevPoint.distanceToSquared(nextPoint), 0, 1);\\n    const projectedPosition = nextPoint.clone().sub(prevPoint).multiplyScalar(progress).add(prevPoint);\\n\\n    const station = prevStation + (nextStation - prevStation) * progress;\\n    const latitude = Math.sign((nextPoint.x - prevPoint.x) * (position.y - prevPoint.y) - (nextPoint.y - prevPoint.y) * (position.x - prevPoint.x)) * position.distanceTo(projectedPosition);\\n\\n    return [station, latitude, anchorIndex];\\n  }\\n\\n  _findClosestSample(position, aroundAnchorIndex = null) {\\n    let closest = Number.POSITIVE_INFINITY;\\n    let bestAnchorIndex;\\n    let bestSampleIndex;\\n    let bestStation;\\n    let bestPrevStation;\\n\\n    let currStation = 0;\\n    let prevStation = 0;\\n\\n    let startAnchorIndex = 0;\\n    let endAnchorIndex = this.centerlines.length - 1;\\n\\n    if (aroundAnchorIndex !== null) {\\n      startAnchorIndex = Math.max(0, aroundAnchorIndex - 2);\\n      endAnchorIndex = Math.min(this.centerlines.length - 1, aroundAnchorIndex + 2);\\n    }\\n\\n    if (startAnchorIndex > 0) {\\n      for (let anchorIndex = 0; anchorIndex < startAnchorIndex; anchorIndex++) {\\n        currStation += this.arcLengths[anchorIndex];\\n      }\\n\\n      prevStation = currStation - this.sampleLengths[startAnchorIndex - 1][this.sampleLengths[startAnchorIndex - 1].length - 1];\\n    }\\n\\n    for (let anchorIndex = startAnchorIndex; anchorIndex <= endAnchorIndex; anchorIndex++) {\\n      const centerline = this.centerlines[anchorIndex];\\n      for (let sampleIndex = 0; sampleIndex < centerline.length; sampleIndex++) {\\n        const distSq = position.distanceToSquared(centerline[sampleIndex]);\\n        if (distSq < closest) {\\n          closest = distSq;\\n          bestAnchorIndex = anchorIndex;\\n          bestSampleIndex = sampleIndex;\\n          bestStation = currStation;\\n          bestPrevStation = prevStation;\\n        }\\n\\n        prevStation = currStation;\\n        currStation += this.sampleLengths[anchorIndex][sampleIndex];\\n      }\\n    }\\n\\n    return [bestAnchorIndex, bestSampleIndex, bestStation, bestPrevStation];\\n  }\\n\\n  addAnchor(position, resample = true) {\\n    const index = this.anchors.push(position) - 1;\\n\\n    if (resample) {\\n      for (let i = index - 2; i < index; i++)\\n        this.resample(i);\\n    }\\n  }\\n\\n  updateAnchor(index, position) {\\n    this.anchors[index] = position;\\n\\n    for (let i = index - 2; i <= index + 1; i++)\\n      this.resample(i);\\n  }\\n\\n  removeAnchor(index) {\\n    if (index < 0 || index >= this.anchors.length) return;\\n\\n    this.anchors.splice(index, 1);\\n\\n    const segmentIndex = index < this.anchors.length ? index : index - 1;\\n    this.centerlines.splice(segmentIndex, 1);\\n    this.sampleLengths.splice(segmentIndex, 1);\\n    this.leftBoundaries.splice(segmentIndex, 1);\\n    this.rightBoundaries.splice(segmentIndex, 1);\\n    this.arcLengths.splice(segmentIndex, 1);\\n\\n    for (let i = segmentIndex - 2; i <= segmentIndex; i++)\\n      this.resample(i);\\n  }\\n\\n  resample(index) {\\n    if (index < 0 || index > this.anchors.length - 2) return;\\n\\n    const [p0, p1, p2, p3] = this.anchorsForSplineIndex(index);\\n    const points = [];\\n    const lengths = [];\\n    const leftBoundary = [];\\n    const rightBoundary = [];\\n    let prevPoint = null;\\n\\n    const pointsPerSegment = Math.max(10, Math.ceil(p1.distanceTo(p2) / 1));\\n    const numPoints = index == this.anchors.length - 2 ? pointsPerSegment + 1 : pointsPerSegment;\\n\\n    for (let i = 0; i < numPoints; i++) {\\n      const t = i / pointsPerSegment;\\n      const point = catmullRomVec(t, p0, p1, p2, p3);\\n      points.push(point);\\n\\n      if (prevPoint != null)\\n        lengths.push(prevPoint.distanceTo(point));\\n      prevPoint = point;\\n\\n      const tangent = tangentAt(t, p0, p1, p2, p3);\\n      const normal = new THREE.Vector2(-tangent.y, tangent.x);\\n\\n      leftBoundary.push(normal.clone().multiplyScalar(-halfLaneWidth).add(point));\\n      rightBoundary.push(normal.clone().multiplyScalar(halfLaneWidth).add(point));\\n    }\\n\\n    lengths.push(prevPoint.distanceTo(p2));\\n\\n    this.centerlines[index] = points;\\n    this.sampleLengths[index] = lengths;\\n    this.leftBoundaries[index] = leftBoundary;\\n    this.rightBoundaries[index] = rightBoundary;\\n    this.arcLengths[index] = lengths.reduce((sum, l) => sum + l, 0);\\n  }\\n\\n  resampleAll() {\\n    for (let i = 0; i < this.anchors.length; i++)\\n      this.resample(i);\\n  }\\n\\n  anchorsForSplineIndex(index) {\\n    let p;\\n    if (index == 0)\\n      p = [this.anchors[0]].concat(this.anchors.slice(0, 3));\\n    else\\n      p = this.anchors.slice(index - 1, index + 3);\\n\\n    if (p[3] === undefined)\\n      p[3] = p[2];\\n\\n    return p;\\n  }\\n}\\n\\nfunction catmullRom(t, p0, p1, p2, p3) {\\n  const v0 = (p2 - p0) * 0.5;\\n  const v1 = (p3 - p1) * 0.5;\\n  const t2 = t * t;\\n  const t3 = t * t2;\\n  return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\\n}\\n\\nfunction catmullRomVec(t, p0, p1, p2, p3) {\\n  return new THREE.Vector2(catmullRom(t, p0.x, p1.x, p2.x, p3.x), catmullRom(t, p0.y, p1.y, p2.y, p3.y));\\n}\\n\\nfunction tangentAt(t, p0, p1, p2, p3) {\\n  const delta = 0.0001;\\n  let t1 = t - delta;\\n  let t2 = t + delta;\\n\\n  if (t1 < 0) t1 = 0;\\n  if (t2 > 1) t2 = 1;\\n\\n  const prev = catmullRomVec(t1, p0, p1, p2, p3);\\n  const next = catmullRomVec(t2, p0, p1, p2, p3);\\n\\n  return next.sub(prev).normalize();\\n}\\n\\nfunction curvatureAt(t2, p0, p1, p2, p3) {\\n  const delta = 0.0001;\\n\\n  // If we\\'re estimating curvature at one of the endpoints of the spline,\\n  // slightly shift it inwards to avoid infinite curvature.\\n  if (t2 == 0) t2 = delta;\\n  if (t2 == 1) t2 = 1 - delta;\\n\\n  let t1 = t2 - delta;\\n  let t3 = t2 + delta;\\n\\n  if (t1 < 0) t1 = 0;\\n  if (t3 > 1) t3 = 1;\\n\\n  const pt1 = catmullRomVec(t1, p0, p1, p2, p3);\\n  const pt2 = catmullRomVec(t2, p0, p1, p2, p3);\\n  const pt3 = catmullRomVec(t3, p0, p1, p2, p3);\\n\\n  return (Math.atan2(pt3.y - pt2.y, pt3.x - pt2.x) - Math.atan2(pt2.y - pt1.y, pt2.x - pt1.x)) / pt2.distanceTo(pt1);\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///3\\n')},function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return GPGPU; });\\n/* Partially adapted from https://github.com/turbo/js/blob/master/turbo.js\\n *\\n * Turbo.js License:\\n * Copyright (c) 2016 minxomat\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\nconst vertexShaderCode = `#version 300 es\\nin vec2 position;\\nin vec2 texture;\\nout vec2 kernelPosition;\\n\\nvoid main(void) {\\n  kernelPosition = texture;\\n  gl_Position = vec4(position.xy, 0.0, 1.0);\\n}\\n`;\\n\\nconst fragmentShaderHeader = `#version 300 es\\nprecision highp float;\\nprecision highp int;\\nprecision highp sampler2D;\\nprecision highp sampler2DArray;\\nprecision highp sampler3D;\\nprecision highp samplerCube;\\n\\nin vec2 kernelPosition;\\nout vec4 kernelOut;\\nuniform ivec2 kernelSize;\\n`;\\n\\nclass GPGPU {\\n  static alloc(size, stride) {\\n    if (!Number.isInteger(stride) || stride < 1 || stride > 4)\\n      throw new Error(\\\"Data stride must be an integer between 1 and 4.\\\");\\n\\n    // Find the smallest perfect square greater than or equal to size\\n    const squareSize = Math.pow(Math.ceil(Math.sqrt(size)), 2);\\n\\n    const data = new Float32Array(squareSize * stride);\\n    data.gpgpuSize = size;\\n    data.gpgpuStride = stride;\\n    return data;\\n  }\\n\\n  constructor(configs, shared = {}) {\\n    this._setUpGL();\\n\\n    this.outputTextures = {};\\n    this.sharedTextures = {};\\n\\n    this.programs = configs.map(c => this._prepareProgram(c));\\n\\n    for (const name in shared) {\\n      const options = shared[name];\\n      const { width, height, channels, data } = options;\\n      this.sharedTextures[name] = this._createTexture(data, width, height, channels, options);\\n    }\\n  }\\n\\n  updateSharedTextures(shared) {\\n    this.sharedTextures = {};\\n\\n    for (const name in shared) {\\n      const options = shared[name];\\n      const { width, height, channels, data } = options;\\n      if (this.sharedTextures[name]) this.gl.deleteTexture(this.sharedTextures[name]);\\n      this.sharedTextures[name] = this._createTexture(data, width, height, channels, options);\\n    }\\n  }\\n\\n  updateProgram(programOrProgramIndex, config) {\\n    const program = typeof(programOrProgramIndex) == 'number' ? this.programs[programOrProgramIndex] : programOrProgramIndex;\\n\\n    if (!program)\\n      throw new Error(`Program with index ${programOrProgramIndex} does not exist.`);\\n\\n    if (config.inputs)\\n      throw new Error('The `updateProgram` function cannot be used to update inputs. Use `updateProgramInputs` instead.');\\n\\n    if (config.meta)\\n      program.meta = Object.assign(program.meta, config.meta);\\n\\n    if (config.width !== undefined && config.height !== undefined)\\n      this.updateProgramSize(program, config.width, config.height);\\n\\n    if (typeof(config.uniforms) == 'object')\\n      this.updateProgramUniforms(program, config.uniforms);\\n  }\\n\\n  updateProgramInputs(programIndex, inputs) {\\n    const program = this.programs[programIndex];\\n\\n    if (!program)\\n      throw new Error(`Program with index ${programIndex} does not exist.`);\\n\\n    if (program.inputTextures.length != inputs.length)\\n      throw new Error(`You must provide the same number of inputs as when the program was set up: got ${inputs.length} but expected ${program.inputTextures.length}.`);\\n\\n    const previousInputWidth = program.inputWidth;\\n    const previousInputHeight = program.inputHeight;\\n\\n    const config = program.config;\\n\\n    if (config.width === undefined || config.height === undefined) {\\n      program.inputWidth = undefined;\\n      program.inputHeight = undefined;\\n      program.inputDataSize = undefined;\\n    }\\n\\n    this._prepareProgramInputs(program, inputs);\\n\\n    if (program.inputWidth != previousInputWidth || program.inputHeight != previousInputHeight) {\\n      this.gl.useProgram(program.glProgram);\\n      this.gl.uniform2i(program.kernelSizeLocation, program.inputWidth, program.inputHeight);\\n      this._prepareProgramOutput(program);\\n    }\\n  }\\n\\n  updateProgramSize(programOrProgramIndex, width, height) {\\n    const program = typeof(programOrProgramIndex) == 'number' ? this.programs[programOrProgramIndex] : programOrProgramIndex;\\n\\n    if (!program)\\n      throw new Error(`Program with index ${programOrProgramIndex} does not exist.`);\\n\\n    if (program.inputTextures.length != 0)\\n      throw new Error(`Size can only be updated on programs with no inputs.`);\\n\\n    if (width == program.inputWidth && height == program.inputHeight) return;\\n\\n    program.inputWidth = width;\\n    program.inputHeight = height;\\n    program.inputDataSize = width * height;\\n\\n    this.gl.useProgram(program.glProgram);\\n    this.gl.uniform2i(program.kernelSizeLocation, program.inputWidth, program.inputHeight);\\n    this._prepareProgramOutput(program);\\n  }\\n\\n  updateProgramUniforms(programOrProgramIndex, uniforms) {\\n    const program = typeof(programOrProgramIndex) == 'number' ? this.programs[programOrProgramIndex] : programOrProgramIndex;\\n    this.gl.useProgram(program.glProgram);\\n\\n    if (!program)\\n      throw new Error(`Program with index ${programOrProgramIndex} does not exist.`);\\n\\n    for (const uniformName in uniforms) {\\n      const value = uniforms[uniformName];\\n      let uniform;\\n\\n      if (uniform = program.uniforms[uniformName]) {\\n        this._setUniform(uniform.type, uniform.location, value)\\n      } else if (uniform = program.uniformTextures[uniformName]) {\\n        if (typeof(value) != 'object' || value.type != 'texture')\\n          throw new Error(`Expected texture type for uniform ${uniformName}.`);\\n\\n        const { width, height, channels, data } = uniform;\\n        if (program.uniformTextures[uniformName].texture) this.gl.deleteTexture(program.uniformTextures[uniformName].texture);\\n        program.uniformTextures[uniformName].texture = this._createTexture(data, width, height, channels, uniform);\\n      } else {\\n        throw new Error(`The uniform ${uniformName} does not exist in this program.`);\\n      }\\n    }\\n  }\\n\\n  run() {\\n    const outputs = [];\\n\\n    for (const program of this.programs) {\\n      this.gl.useProgram(program.glProgram);\\n      this.gl.viewport(0, 0, program.inputWidth, program.inputHeight);\\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, program.frameBuffer);\\n\\n      for (const [index, inputTexture] of program.inputTextures.entries()) {\\n        this.gl.activeTexture(this.gl.TEXTURE0 + index);\\n        this.gl.bindTexture(this.gl.TEXTURE_2D, inputTexture);\\n      }\\n\\n      for (const uniformName in program.uniformTextures) {\\n        const uniformTexture = program.uniformTextures[uniformName];\\n        this.gl.activeTexture(this.gl.TEXTURE0 + uniformTexture.index);\\n        this.gl.bindTexture(uniformTexture.target, uniformTexture.texture || this.sharedTextures[uniformTexture.name] || this.outputTextures[uniformTexture.name]);\\n      }\\n\\n      if (typeof(program.draw) == 'function') {\\n        program.draw(this, program);\\n      } else {\\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.textureBuffer);\\n        this.gl.enableVertexAttribArray(program.textureLocation);\\n        this.gl.vertexAttribPointer(program.textureLocation, 2, this.gl.FLOAT, false, 0, 0);\\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\\n        this.gl.enableVertexAttribArray(program.positionLocation);\\n        this.gl.vertexAttribPointer(program.positionLocation, 2, this.gl.FLOAT, false, 0, 0);\\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\\n\\n        if (program.drawProxy) {\\n          const draw = (() => this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0)).bind(this);\\n          program.drawProxy(this, program, draw);\\n        } else {\\n          this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0);\\n        }\\n      }\\n\\n      if (program.output && program.output.name && !program.output.read) {\\n        outputs.push(null);\\n      } else {\\n        const output = new Float32Array(program.inputWidth * program.inputHeight * 4);\\n        this.gl.readPixels(0, 0, program.inputWidth, program.inputHeight, this.gl.RGBA, this.gl.FLOAT, output);\\n        outputs.push(output.subarray(0, program.inputDataSize * 4));\\n      }\\n    }\\n\\n    return outputs;\\n  }\\n\\n  _setUpGL() {\\n    let canvas;\\n\\n    if (self.document)\\n      canvas = document.createElement('canvas');\\n    else if (self.OffscreenCanvas)\\n      canvas = new OffscreenCanvas(0, 0);\\n    else\\n      throw new Error('Could not create a canvas.');\\n\\n    const attr = { alpha: false, antialias: false };\\n    this.gl = canvas.getContext(\\\"webgl2\\\", attr) || canvas.getContext(\\\"experimental-webgl2\\\", attr);\\n\\n    if (!this.gl)\\n      throw new Error(\\\"Unable to initialize WebGL2. Your browser may not support it.\\\");\\n\\n    if (!this.gl.getExtension('EXT_color_buffer_float'))\\n      throw new Error('Required WebGL extension EXT_color_buffer_float not supported.');\\n\\n    if (!this.gl.getExtension('OES_texture_float_linear'))\\n      throw new Error('Required WebGL extension OES_texture_float_linear not supported.');\\n\\n    this.positionBuffer = this._newBuffer([-1, -1, 1, -1, 1, 1, -1, 1]);\\n    this.textureBuffer = this._newBuffer([0, 0, 1, 0, 1, 1, 0, 1]);\\n    this.indexBuffer = this._newBuffer([1, 2, 0, 3, 0, 2], Uint16Array, this.gl.ELEMENT_ARRAY_BUFFER);\\n  }\\n\\n  _prepareProgram(config) {\\n    const program = { config };\\n\\n    program.draw = config.draw;\\n    program.drawProxy = config.drawProxy;\\n    program.meta = Object.assign({}, config.meta);\\n\\n    if (config.width && config.height) {\\n      program.inputWidth = config.width;\\n      program.inputHeight = config.height;\\n      program.inputDataSize = config.width * config.height;\\n    }\\n\\n    program.output = config.output;\\n\\n    const kernel = config.kernel;\\n\\n    if (typeof(kernel) != 'string' || kernel.length == 0)\\n      throw new Error(\\\"Kernel code cannot be empty.\\\");\\n\\n    const inputs = config.inputs || [];\\n    const uniforms = config.uniforms || {};\\n\\n    this._prepareProgramInputs(program, inputs);\\n\\n    let fragmentShaderConfig = \\\"\\\";\\n    \\n    for (const index in inputs)\\n      fragmentShaderConfig += `uniform sampler2D _input${index};\\\\n`;\\n\\n    if (program.inputWidth === undefined || program.inputHeight === undefined)\\n      throw new Error(\\\"Unknown kernel size. You must provide either an input or the `width` and `height` parameters in the kernel config.\\\");\\n\\n    program.uniformTextures = {};\\n    program.uniforms = {};\\n\\n    for (const uniformName in uniforms) {\\n      const uniform = uniforms[uniformName];\\n\\n      if (typeof(uniform) == 'number') {\\n        program.uniforms[uniformName] = {\\n          type: 'float',\\n          value: uniform\\n        };\\n        fragmentShaderConfig += `uniform float ${uniformName};\\\\n`;\\n      } else if (Array.isArray(uniform)) {\\n        if (uniform.length < 2 || uniform.length > 4)\\n          throw new Error(`Array uniforms can only have lengths of 2, 3, or 4 elements (corresponding to vec2, vec3, and vec4).`);\\n\\n        const type = ['vec2', 'vec3', 'vec4'][uniform.length - 2];\\n        program.uniforms[uniformName] = {\\n          type: type,\\n          value: uniform\\n        };\\n        fragmentShaderConfig += `uniform ${type} ${uniformName};\\\\n`;\\n      } else {\\n        const { type, width, height, channels, data, value, length, name } = uniform;\\n\\n        if (type == 'texture' || type == 'outputTexture' || type == 'sharedTexture') {\\n          let target, type;\\n\\n          if (uniform.textureType == '3D') {\\n            target = this.gl.TEXTURE_3D;\\n            type = 'sampler3D';\\n          } else if (uniform.textureType == '2DArray') {\\n            target = this.gl.TEXTURE_2D_ARRAY;\\n            type = 'sampler2DArray';\\n          } else {\\n            target = this.gl.TEXTURE_2D;\\n            type = 'sampler2D';\\n          }\\n\\n          if (type == 'texture') {\\n            program.uniformTextures[uniformName] = { target, texture: data ? this._createTexture(data, width, height, channels, uniform) : null };\\n          } else {\\n            program.uniformTextures[uniformName] = { target, texture: null, name: name || uniformName };\\n          }\\n\\n          fragmentShaderConfig += `uniform ${type} ${uniformName};\\\\n`;\\n        } else {\\n          program.uniforms[uniformName] = { type, value };\\n          if (length !== undefined)\\n            fragmentShaderConfig += `uniform ${type} ${uniformName}[${length}];\\\\n`;\\n          else\\n            fragmentShaderConfig += `uniform ${type} ${uniformName};\\\\n`;\\n        }\\n      }\\n    }\\n\\n    const vertexShader = this.gl.createShader(this.gl.VERTEX_SHADER);\\n    this.gl.shaderSource(vertexShader, config.vertexShader || vertexShaderCode);\\n    this.gl.compileShader(vertexShader);\\n\\n    if (!this.gl.getShaderParameter(vertexShader, this.gl.COMPILE_STATUS)) {\\n      throw new Error(\\n        \\\"Could not build vertex shader (fatal).\\\\n\\\" + \\\"\\\\n\\\" +\\n        \\\"--- CODE DUMP ---\\\\n\\\" + (config.vertexShader || vertexShaderCode) + \\\"\\\\n\\\\n\\\" +\\n        \\\"--- ERROR LOG ---\\\\n\\\" + this.gl.getShaderInfoLog(vertexShader)\\n      );\\n    }\\n\\n    const fragmentShaderMain = `\\nvoid main() {\\n  kernelOut = vec4(kernel(${[...Array(inputs.length).keys()].map(i => `texture(_input${i}, kernelPosition)`).join(', ')}));\\n}\\n    `;\\n\\n    const fragmentShader = this.gl.createShader(this.gl.FRAGMENT_SHADER);\\n    const fragmentShaderSource = fragmentShaderHeader + fragmentShaderConfig + kernel + fragmentShaderMain;\\n    this.gl.shaderSource(fragmentShader, fragmentShaderSource);\\n    this.gl.compileShader(fragmentShader);\\n\\n    if (!this.gl.getShaderParameter(fragmentShader, this.gl.COMPILE_STATUS)) {\\n      const source = fragmentShaderSource.split('\\\\n');\\n      let dbgMsg = \\\"ERROR: Could not build shader (fatal).\\\\n\\\\n------------------ KERNEL CODE DUMP ------------------\\\\n\\\"\\n\\n      for (let l = 0; l < source.length; l++)\\n        dbgMsg += `${l + 1}> ${source[l]}\\\\n`;\\n\\n      dbgMsg += \\\"\\\\n--------------------- ERROR  LOG ---------------------\\\\n\\\" + this.gl.getShaderInfoLog(fragmentShader);\\n\\n      throw new Error(dbgMsg);\\n    }\\n\\n    program.glProgram = this.gl.createProgram();\\n    this.gl.attachShader(program.glProgram, vertexShader);\\n    this.gl.attachShader(program.glProgram, fragmentShader);\\n    this.gl.linkProgram(program.glProgram);\\n    this.gl.useProgram(program.glProgram);\\n\\n    if (!this.gl.getProgramParameter(program.glProgram, this.gl.LINK_STATUS))\\n      throw new Error('Failed to link GLSL program code.');\\n\\n    let textureIndex = 0;\\n\\n    for (const input of program.inputTextures) {\\n      const location = this.gl.getUniformLocation(program.glProgram, `_input${textureIndex}`);\\n      this.gl.uniform1i(location, textureIndex);\\n      textureIndex++;\\n    }\\n\\n    for (const uniformName in program.uniformTextures) {\\n      program.uniformTextures[uniformName].index = textureIndex;\\n      const location = this.gl.getUniformLocation(program.glProgram, uniformName);\\n      this.gl.uniform1i(location, textureIndex);\\n      textureIndex++;\\n    }\\n\\n    for (const uniformName in program.uniforms) {\\n      const { type, value } = program.uniforms[uniformName];\\n      const location = program.uniforms[uniformName].location = this.gl.getUniformLocation(program.glProgram, uniformName);\\n\\n      if (value !== undefined)\\n        this._setUniform(type, location, value);\\n\\n      delete program.uniforms[uniformName].value;\\n    }\\n\\n    program.kernelSizeLocation = this.gl.getUniformLocation(program.glProgram, 'kernelSize');\\n    this.gl.uniform2i(program.kernelSizeLocation, program.inputWidth, program.inputHeight);\\n\\n    program.positionLocation = this.gl.getAttribLocation(program.glProgram, 'position');\\n    program.textureLocation = this.gl.getAttribLocation(program.glProgram, 'texture');\\n\\n    program.frameBuffer = this.gl.createFramebuffer();\\n    this._prepareProgramOutput(program);\\n\\n    return program;\\n  }\\n\\n  _prepareProgramInputs(program, inputs) {\\n    if (program.inputTextures)\\n      program.inputTextures.forEach(t => this.gl.deleteTexture(t));\\n\\n    program.inputTextures = [];\\n\\n    for (const [index, data] of inputs.entries()) {\\n      if (data.gpgpuSize === undefined || data.gpgpuStride === undefined)\\n        throw new Error('GPGPU inputs must be created by the `alloc` function.');\\n\\n      const size = Math.sqrt(data.length / data.gpgpuStride);\\n      if (size <= 0 || size % 1 != 0)\\n        throw new Error('GPGPU input size is expected to be a perfect square.');\\n\\n      if (program.inputWidth === undefined || program.inputHeight === undefined) {\\n        program.inputWidth = size;\\n        program.inputHeight = size;\\n        program.inputDataSize = data.gpgpuSize;\\n      } else if (size != program.inputWidth || size != program.inputHeight) {\\n        throw new Error(`All GPGPU inputs must be of the same size. Received ${data.gpgpuSize} (internal ${size * size}) but expected ${program.inputDataSize} (internal ${program.inputWidth * program.inputHeight}).`);\\n      }\\n\\n      program.inputTextures.push(this._createTexture(data, size, size, data.gpgpuStride));\\n    }\\n  }\\n\\n  _prepareProgramOutput(program) {\\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, program.frameBuffer);\\n\\n    const outputTexture = this._createTexture(null, program.inputWidth, program.inputHeight, 4, program.output);\\n\\n    if (program.output && program.output.textureType !== '3D' && program.output.textureType !== '2DArray') {\\n      this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, outputTexture, 0);\\n      const frameBufferStatus = (this.gl.checkFramebufferStatus(this.gl.FRAMEBUFFER) == this.gl.FRAMEBUFFER_COMPLETE);\\n      if (!frameBufferStatus)\\n        throw new Error('Error attaching float texture to framebuffer. Your device is probably incompatible.');\\n    }\\n\\n    if (program.outputTexture !== undefined)\\n      this.gl.deleteTexture(program.outputTexture);\\n    program.outputTexture = outputTexture;\\n\\n    if (program.output && program.output.name)\\n      this.outputTextures[program.output.name] = outputTexture;\\n  }\\n\\n  _setUniform(type, location, value) {\\n    switch (type) {\\n      case 'int': this.gl.uniform1i(location, value); break;\\n      case 'float': Array.isArray(value) ? this.gl.uniform1fv(location, value) : this.gl.uniform1f(location, value); break;\\n      case 'vec2': this.gl.uniform2fv(location, value); break;\\n      case 'vec3': this.gl.uniform3fv(location, value); break;\\n      case 'vec4': this.gl.uniform4fv(location, value); break;\\n      case 'mat3': this.gl.uniformMatrix3fv(location, value); break;\\n      default: throw new Error(`Unknown uniform type ${type}.`);\\n    }\\n  }\\n\\n  _newBuffer(data, klass, target) {\\n    const buf = this.gl.createBuffer();\\n\\n    this.gl.bindBuffer((target || this.gl.ARRAY_BUFFER), buf);\\n    this.gl.bufferData((target || this.gl.ARRAY_BUFFER), new (klass || Float32Array)(data), this.gl.STATIC_DRAW);\\n\\n    return buf;\\n  }\\n\\n  _createTexture(data, width, height, channels, options = {}) {\\n    const texture = this.gl.createTexture();\\n\\n    let internalFormat, format;\\n\\n    switch (channels) {\\n      case 1:\\n        internalFormat = this.gl.R32F;\\n        format = this.gl.RED;\\n        break;\\n      case 2:\\n        internalFormat = this.gl.RG32F;\\n        format = this.gl.RG;\\n        break;\\n      case 3:\\n        internalFormat = this.gl.RGB32F;\\n        format = this.gl.RGB;\\n        break;\\n      case 4:\\n        internalFormat = this.gl.RGBA32F;\\n        format = this.gl.RGBA;\\n        break;\\n      default:\\n        throw(\\\"Texture channels must between 1 and 4.\\\");\\n    }\\n\\n    const target = options.textureType == '3D' ? this.gl.TEXTURE_3D : options.textureType == '2DArray' ? this.gl.TEXTURE_2D_ARRAY : this.gl.TEXTURE_2D;\\n\\n    this.gl.bindTexture(target, texture);\\n    this.gl.texParameteri(target, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\\n    this.gl.texParameteri(target, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\\n    this.gl.texParameteri(target, this.gl.TEXTURE_WRAP_R, this.gl.CLAMP_TO_EDGE);\\n    this.gl.texParameteri(target, this.gl.TEXTURE_MIN_FILTER, options.filter == 'linear' ? this.gl.LINEAR : this.gl.NEAREST);\\n    this.gl.texParameteri(target, this.gl.TEXTURE_MAG_FILTER, options.filter == 'linear' ? this.gl.LINEAR : this.gl.NEAREST);\\n\\n    if (options.textureType == '3D' || options.textureType == '2DArray') {\\n      this.gl.texImage3D(target, 0, internalFormat, width, height, options.depth, 0, format, this.gl.FLOAT, data);\\n    } else {\\n      this.gl.texImage2D(target, 0, internalFormat, width, height, 0, format, this.gl.FLOAT, data);\\n    }\\n\\n    this.gl.bindTexture(target, null);\\n\\n    return texture;\\n  }\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///4\\n\")},function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return DynamicObstacle; });\\n// Half width and half height\\nconst VEHICLE_SIZE = { w: 2.5, h: 1 };\\nconst CYCLIST_SIZE = { w: 1.2, h: 0.6 };\\nconst PEDESTRIAN_SIZE = { w: 0.6, h: 0.6 };\\n\\nclass DynamicObstacle {\\n  static hydrate(obj) {\\n    Object.setPrototypeOf(obj, DynamicObstacle.prototype);\\n    Object.setPrototypeOf(obj.startPos, THREE.Vector2.prototype);\\n    Object.setPrototypeOf(obj.velocity, THREE.Vector2.prototype);\\n  }\\n\\n  constructor(type, startPos, velocity, parallel) {\\n    this.type = type;\\n    this.startPos = startPos;\\n    this.velocity = velocity;\\n    this.parallel = parallel;\\n\\n    switch (type) {\\n        case 'cyclist':\\n          this.size = Object.assign({}, CYCLIST_SIZE);\\n          break;\\n\\n        case 'pedestrian':\\n          this.size = Object.assign({}, PEDESTRIAN_SIZE);\\n          break;\\n\\n        default:\\n          this.size = Object.assign({}, VEHICLE_SIZE);\\n    }\\n\\n    if (!parallel)\\n      [this.size.w, this.size.h] = [this.size.h, this.size.w];\\n  }\\n\\n  positionAtTime(time) {\\n    return this.velocity.clone().multiplyScalar(time).add(this.startPos);\\n  }\\n\\n  positionsInTimeRange(startTime, endTime, numFrames) {\\n    const dt = (endTime - startTime) / numFrames;\\n    const positions = [];\\n    let time = startTime;\\n\\n    for (let i = 0; i <= numFrames; i++) {\\n      positions.push(this.positionAtTime(time));\\n      time += dt;\\n    }\\n\\n    return positions;\\n  }\\n\\n  verticesInTimeRange(startTime, endTime, config) {\\n    const positions = this.positionsInTimeRange(startTime, endTime, config.numDynamicSubframes);\\n    const vertices = [];\\n\\n    // Hazard dilation (drawn behind, z = 0.75)\\n    const hazardHalfWidth = this.size.w + config.dynamicHazardDilationS + config.collisionDilationS;\\n    const hazardHalfHeight = this.size.h + config.dynamicHazardDilationL + config.collisionDilationL;\\n\\n    positions.forEach(p => {\\n      const v1 = [-hazardHalfWidth + p.x, hazardHalfHeight + p.y];\\n      const v2 = [hazardHalfWidth + p.x, hazardHalfHeight + p.y];\\n      const v3 = [hazardHalfWidth + p.x, -hazardHalfHeight + p.y];\\n      const v4 = [-hazardHalfWidth + p.x, -hazardHalfHeight + p.y];\\n\\n      vertices.push(\\n        v1[0], v1[1], 0.75,\\n        v2[0], v2[1], 0.75,\\n        v3[0], v3[1], 0.75,\\n        v3[0], v3[1], 0.75,\\n        v4[0], v4[1], 0.75,\\n        v1[0], v1[1], 0.75\\n      );\\n    });\\n    \\n    // Collision dilation (drawn in front, z = 0.25)\\n    const collisionHalfWidth = this.size.w + config.collisionDilationS;\\n    const collisionHalfHeight = this.size.h + config.collisionDilationL;\\n\\n    positions.forEach(p => {\\n      const v1 = [-collisionHalfWidth + p.x, collisionHalfHeight + p.y];\\n      const v2 = [collisionHalfWidth + p.x, collisionHalfHeight + p.y];\\n      const v3 = [collisionHalfWidth + p.x, -collisionHalfHeight + p.y];\\n      const v4 = [-collisionHalfWidth + p.x, -collisionHalfHeight + p.y];\\n\\n      vertices.push(\\n        v1[0], v1[1], 0.25,\\n        v2[0], v2[1], 0.25,\\n        v3[0], v3[1], 0.25,\\n        v3[0], v3[1], 0.25,\\n        v4[0], v4[1], 0.25,\\n        v1[0], v1[1], 0.25\\n      );\\n    });\\n\\n    return vertices;\\n  }\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9hdXRvbm9teS9EeW5hbWljT2JzdGFjbGUuanM/MmU3MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0Esc0JBQXNCO0FBQ3RCLHNCQUFzQjtBQUN0Qix5QkFBeUI7O0FBRVY7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNDQUFzQztBQUN0Qzs7QUFFQTtBQUNBLHNDQUFzQztBQUN0Qzs7QUFFQTtBQUNBLHNDQUFzQztBQUN0Qzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixnQkFBZ0I7QUFDbkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSGFsZiB3aWR0aCBhbmQgaGFsZiBoZWlnaHRcbmNvbnN0IFZFSElDTEVfU0laRSA9IHsgdzogMi41LCBoOiAxIH07XG5jb25zdCBDWUNMSVNUX1NJWkUgPSB7IHc6IDEuMiwgaDogMC42IH07XG5jb25zdCBQRURFU1RSSUFOX1NJWkUgPSB7IHc6IDAuNiwgaDogMC42IH07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIER5bmFtaWNPYnN0YWNsZSB7XG4gIHN0YXRpYyBoeWRyYXRlKG9iaikge1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihvYmosIER5bmFtaWNPYnN0YWNsZS5wcm90b3R5cGUpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihvYmouc3RhcnRQb3MsIFRIUkVFLlZlY3RvcjIucHJvdG90eXBlKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yob2JqLnZlbG9jaXR5LCBUSFJFRS5WZWN0b3IyLnByb3RvdHlwZSk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcih0eXBlLCBzdGFydFBvcywgdmVsb2NpdHksIHBhcmFsbGVsKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnN0YXJ0UG9zID0gc3RhcnRQb3M7XG4gICAgdGhpcy52ZWxvY2l0eSA9IHZlbG9jaXR5O1xuICAgIHRoaXMucGFyYWxsZWwgPSBwYXJhbGxlbDtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdjeWNsaXN0JzpcbiAgICAgICAgICB0aGlzLnNpemUgPSBPYmplY3QuYXNzaWduKHt9LCBDWUNMSVNUX1NJWkUpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3BlZGVzdHJpYW4nOlxuICAgICAgICAgIHRoaXMuc2l6ZSA9IE9iamVjdC5hc3NpZ24oe30sIFBFREVTVFJJQU5fU0laRSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aGlzLnNpemUgPSBPYmplY3QuYXNzaWduKHt9LCBWRUhJQ0xFX1NJWkUpO1xuICAgIH1cblxuICAgIGlmICghcGFyYWxsZWwpXG4gICAgICBbdGhpcy5zaXplLncsIHRoaXMuc2l6ZS5oXSA9IFt0aGlzLnNpemUuaCwgdGhpcy5zaXplLnddO1xuICB9XG5cbiAgcG9zaXRpb25BdFRpbWUodGltZSkge1xuICAgIHJldHVybiB0aGlzLnZlbG9jaXR5LmNsb25lKCkubXVsdGlwbHlTY2FsYXIodGltZSkuYWRkKHRoaXMuc3RhcnRQb3MpO1xuICB9XG5cbiAgcG9zaXRpb25zSW5UaW1lUmFuZ2Uoc3RhcnRUaW1lLCBlbmRUaW1lLCBudW1GcmFtZXMpIHtcbiAgICBjb25zdCBkdCA9IChlbmRUaW1lIC0gc3RhcnRUaW1lKSAvIG51bUZyYW1lcztcbiAgICBjb25zdCBwb3NpdGlvbnMgPSBbXTtcbiAgICBsZXQgdGltZSA9IHN0YXJ0VGltZTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IG51bUZyYW1lczsgaSsrKSB7XG4gICAgICBwb3NpdGlvbnMucHVzaCh0aGlzLnBvc2l0aW9uQXRUaW1lKHRpbWUpKTtcbiAgICAgIHRpbWUgKz0gZHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvc2l0aW9ucztcbiAgfVxuXG4gIHZlcnRpY2VzSW5UaW1lUmFuZ2Uoc3RhcnRUaW1lLCBlbmRUaW1lLCBjb25maWcpIHtcbiAgICBjb25zdCBwb3NpdGlvbnMgPSB0aGlzLnBvc2l0aW9uc0luVGltZVJhbmdlKHN0YXJ0VGltZSwgZW5kVGltZSwgY29uZmlnLm51bUR5bmFtaWNTdWJmcmFtZXMpO1xuICAgIGNvbnN0IHZlcnRpY2VzID0gW107XG5cbiAgICAvLyBIYXphcmQgZGlsYXRpb24gKGRyYXduIGJlaGluZCwgeiA9IDAuNzUpXG4gICAgY29uc3QgaGF6YXJkSGFsZldpZHRoID0gdGhpcy5zaXplLncgKyBjb25maWcuZHluYW1pY0hhemFyZERpbGF0aW9uUyArIGNvbmZpZy5jb2xsaXNpb25EaWxhdGlvblM7XG4gICAgY29uc3QgaGF6YXJkSGFsZkhlaWdodCA9IHRoaXMuc2l6ZS5oICsgY29uZmlnLmR5bmFtaWNIYXphcmREaWxhdGlvbkwgKyBjb25maWcuY29sbGlzaW9uRGlsYXRpb25MO1xuXG4gICAgcG9zaXRpb25zLmZvckVhY2gocCA9PiB7XG4gICAgICBjb25zdCB2MSA9IFstaGF6YXJkSGFsZldpZHRoICsgcC54LCBoYXphcmRIYWxmSGVpZ2h0ICsgcC55XTtcbiAgICAgIGNvbnN0IHYyID0gW2hhemFyZEhhbGZXaWR0aCArIHAueCwgaGF6YXJkSGFsZkhlaWdodCArIHAueV07XG4gICAgICBjb25zdCB2MyA9IFtoYXphcmRIYWxmV2lkdGggKyBwLngsIC1oYXphcmRIYWxmSGVpZ2h0ICsgcC55XTtcbiAgICAgIGNvbnN0IHY0ID0gWy1oYXphcmRIYWxmV2lkdGggKyBwLngsIC1oYXphcmRIYWxmSGVpZ2h0ICsgcC55XTtcblxuICAgICAgdmVydGljZXMucHVzaChcbiAgICAgICAgdjFbMF0sIHYxWzFdLCAwLjc1LFxuICAgICAgICB2MlswXSwgdjJbMV0sIDAuNzUsXG4gICAgICAgIHYzWzBdLCB2M1sxXSwgMC43NSxcbiAgICAgICAgdjNbMF0sIHYzWzFdLCAwLjc1LFxuICAgICAgICB2NFswXSwgdjRbMV0sIDAuNzUsXG4gICAgICAgIHYxWzBdLCB2MVsxXSwgMC43NVxuICAgICAgKTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBDb2xsaXNpb24gZGlsYXRpb24gKGRyYXduIGluIGZyb250LCB6ID0gMC4yNSlcbiAgICBjb25zdCBjb2xsaXNpb25IYWxmV2lkdGggPSB0aGlzLnNpemUudyArIGNvbmZpZy5jb2xsaXNpb25EaWxhdGlvblM7XG4gICAgY29uc3QgY29sbGlzaW9uSGFsZkhlaWdodCA9IHRoaXMuc2l6ZS5oICsgY29uZmlnLmNvbGxpc2lvbkRpbGF0aW9uTDtcblxuICAgIHBvc2l0aW9ucy5mb3JFYWNoKHAgPT4ge1xuICAgICAgY29uc3QgdjEgPSBbLWNvbGxpc2lvbkhhbGZXaWR0aCArIHAueCwgY29sbGlzaW9uSGFsZkhlaWdodCArIHAueV07XG4gICAgICBjb25zdCB2MiA9IFtjb2xsaXNpb25IYWxmV2lkdGggKyBwLngsIGNvbGxpc2lvbkhhbGZIZWlnaHQgKyBwLnldO1xuICAgICAgY29uc3QgdjMgPSBbY29sbGlzaW9uSGFsZldpZHRoICsgcC54LCAtY29sbGlzaW9uSGFsZkhlaWdodCArIHAueV07XG4gICAgICBjb25zdCB2NCA9IFstY29sbGlzaW9uSGFsZldpZHRoICsgcC54LCAtY29sbGlzaW9uSGFsZkhlaWdodCArIHAueV07XG5cbiAgICAgIHZlcnRpY2VzLnB1c2goXG4gICAgICAgIHYxWzBdLCB2MVsxXSwgMC4yNSxcbiAgICAgICAgdjJbMF0sIHYyWzFdLCAwLjI1LFxuICAgICAgICB2M1swXSwgdjNbMV0sIDAuMjUsXG4gICAgICAgIHYzWzBdLCB2M1sxXSwgMC4yNSxcbiAgICAgICAgdjRbMF0sIHY0WzFdLCAwLjI1LFxuICAgICAgICB2MVswXSwgdjFbMV0sIDAuMjVcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdmVydGljZXM7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///5\\n\")},function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return /* binding */ PathPlanner_PathPlanner; });\\n\\n// EXTERNAL MODULE: ./js/GPGPU.js\\nvar GPGPU = __webpack_require__(4);\\n\\n// EXTERNAL MODULE: ./js/physics/Car.js\\nvar Car = __webpack_require__(0);\\n\\n// EXTERNAL MODULE: ./js/autonomy/path-planning/CubicPath.js\\nvar CubicPath = __webpack_require__(2);\\n\\n// CONCATENATED MODULE: ./js/autonomy/path-planning/QuinticPath.js\\nclass QuinticPath {\\n  constructor(start, end, params) {\\n    this.start = Object.assign({}, start);\\n    this.end = Object.assign({}, end);\\n\\n    if (start.pos) {\\n      this.start.x = start.pos.x;\\n      this.start.y = start.pos.y\\n    }\\n\\n    if (end.pos) {\\n      this.end.x = end.pos.x;\\n      this.end.y = end.pos.y\\n    }\\n\\n    const diffX = this.end.x - this.start.x;\\n    const diffY = this.end.y - this.start.y;\\n    const sinRot = Math.sin(this.start.rot);\\n    const cosRot = Math.cos(this.start.rot);\\n\\n    this.goal = {\\n      x: cosRot * diffX + sinRot * diffY,\\n      y: -sinRot * diffX + cosRot * diffY,\\n      rot: Math.wrapAngle(this.end.rot - this.start.rot),\\n      curv: this.end.curv\\n    };\\n\\n    this.params = Object.assign({}, params, { p0: this.start.curv, p1: this.start.dCurv || 0, p2: this.start.ddCurv || 0, p5: this.end.curv });\\n  }\\n\\n  buildPath(num) {\\n    const { p0, p1, p2, p3, p4, p5, sG } = this.params;\\n\\n    const sG_2 = sG * sG;\\n    const sG_3 = sG_2 * sG;\\n\\n    const a = p0;\\n    const b = p1;\\n    const c = p2 / 2.0;\\n    const d = (-71.875 * p0 + 81.0 * p3 - 10.125 * p4 + p5 - 21.25 * p1 * sG - 2.75 * p2 * sG_2) / sG_3;\\n    const e = (166.5 * p0 - 202.5 * p3 + 40.5 * p4 - 4.5 * p5 + 45.0 * p1 * sG + 4.5 * p2 * sG_2) / (sG_2 * sG_2);\\n    const f = (-95.625 * p0 + 121.5 * p3 - 30.375 * p4 + 4.5 * p5 - 24.75 * p1 * sG - 2.25 * p2 * sG_2) / (sG_2 * sG_3);\\n\\n    const path = [{ pos: new THREE.Vector2(this.start.x, this.start.y), rot: this.start.rot, curv: this.start.curv }];\\n    const ds = sG / (num - 1);\\n    let s = ds;\\n    let dx = 0;\\n    let dy = 0;\\n    let prevCosRot = Math.cos(path[0].rot);\\n    let prevSinRot = Math.sin(path[0].rot);\\n\\n    for (let i = 1; i < num - 1; i++) {\\n      const rot = (((((f * s / 6.0 + e / 5.0) * s + d / 4.0) * s + c / 3.0) * s + b / 2.0) * s + a) * s + this.start.rot;\\n      const curv = ((((f * s + e) * s + d) * s + c) * s + b) * s + a;\\n      const cosRot = Math.cos(rot);\\n      const sinRot = Math.sin(rot);\\n\\n      dx = dx * (i - 1) / i + (cosRot + prevCosRot) / (2 * i);\\n      dy = dy * (i - 1) / i + (sinRot + prevSinRot) / (2 * i);\\n\\n      path.push({ pos: new THREE.Vector2(s * dx + this.start.x, s * dy + this.start.y), rot: rot, curv: curv });\\n\\n      s += ds;\\n      prevCosRot = cosRot;\\n      prevSinRot = sinRot;\\n    }\\n\\n    path.push({ pos: new THREE.Vector2(this.end.x, this.end.y), rot: this.end.rot, curv: this.end.curv });\\n\\n    return path;\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/xyObstacleGrid.js\\nconst OBSTACLE_VERTEX_SHADER = `#version 300 es\\nuniform mat3 xform;\\nin vec2 position;\\n\\nvoid main(void) {\\n  gl_Position = vec4((xform * vec3(position, 1)).xy, 0, 1);\\n}\\n`;\\n\\nconst OBSTACLE_KERNEL = `\\n  vec4 kernel() {\\n    return vec4(1, 0, 0, 1);\\n  }\\n`;\\n\\nlet obstacleVertices;\\nlet obstacleXform;\\n\\n// Draw obstacle triangles to XY-space obstacle grid\\n/* harmony default export */ var xyObstacleGrid = ({\\n  setUp() {\\n    return {\\n      kernel: OBSTACLE_KERNEL,\\n      vertexShader: OBSTACLE_VERTEX_SHADER,\\n      output: { name: 'xyObstacleGrid' },\\n      draw: (gpgpu, program) => {\\n        const gl = gpgpu.gl;\\n\\n        gl.clearColor(0, 0, 0, 0);\\n        gl.clear(gl.COLOR_BUFFER_BIT);\\n\\n        if (obstacleVertices.length > 0) {\\n          const buf = gl.createBuffer();\\n\\n          gl.bindBuffer(gl.ARRAY_BUFFER, buf);\\n          gl.bufferData(gl.ARRAY_BUFFER, obstacleVertices, gl.STATIC_DRAW);\\n          gl.enableVertexAttribArray(program.positionLocation);\\n          gl.vertexAttribPointer(program.positionLocation, 2, gl.FLOAT, false, 0, 0);\\n\\n          const xformLocation = gl.getUniformLocation(program.glProgram, 'xform');\\n          gl.uniformMatrix3fv(xformLocation, false, obstacleXform.elements);\\n\\n          gl.drawArrays(gl.TRIANGLES, 0, obstacleVertices.length / 2);\\n\\n          gl.deleteBuffer(buf);\\n        }\\n      }\\n    };\\n  },\\n\\n  update(config, xyWidth, xyHeight, xyCenterPoint, vehicleXform, obstacles) {\\n    obstacleVertices = new Float32Array(Array.prototype.concat.apply([], obstacles.map(o => o.vertices)));\\n\\n    const translate = new THREE.Matrix3();\\n    translate.set(\\n      1, 0, -xyCenterPoint.x,\\n      0, 1, -xyCenterPoint.y,\\n      0, 0, 1\\n    );\\n\\n    const scale = new THREE.Matrix3();\\n    scale.set(\\n      2 / (xyWidth * config.xyGridCellSize), 0, 0,\\n      0, 2 / (xyHeight * config.xyGridCellSize), 0,\\n      0, 0, 1\\n    );\\n\\n    obstacleXform = scale.multiply(translate).multiply(vehicleXform);\\n\\n    return {\\n      width: xyWidth,\\n      height: xyHeight\\n    }\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/slObstacleGrid.js\\nconst SL_OBSTACLE_KERNEL = `\\n\\nvec4 kernel() {\\n  float centerlineWidth = float(textureSize(centerline, 0).x);\\n\\n  vec2 sl = (kernelPosition - 0.5) * vec2(kernelSize) * vec2(slGridCellSize) + slCenterPoint;\\n  float centerlineCoord = sl.x / centerlineStationInterval / centerlineWidth * (centerlineWidth - 1.0) / centerlineWidth + (0.5 / centerlineWidth);\\n  if (centerlineCoord < 0.0 || centerlineCoord > 1.0) return vec4(0);\\n\\n  vec3 centerlineSample = texture(centerline, vec2(centerlineCoord, 0)).xyz;\\n  float perpindicular = centerlineSample.z + radians(90.0);\\n  vec2 xy = centerlineSample.xy + sl.yy * vec2(cos(perpindicular), sin(perpindicular));\\n\\n  vec2 xyTexCoords = (xy - xyCenterPoint) / vec2(textureSize(xyObstacleGrid, 0)) / vec2(xyGridCellSize) + 0.5;\\n  return texture(xyObstacleGrid, xyTexCoords);\\n}\\n\\n`;\\n\\n// Convert XY-space obstacle grid to SL-space obstacle grid\\n/* harmony default export */ var slObstacleGrid = ({\\n  setUp() {\\n    return {\\n      kernel: SL_OBSTACLE_KERNEL,\\n      output: { name: 'slObstacleGrid' },\\n      uniforms: {\\n        xyObstacleGrid: { type: 'outputTexture' },\\n        slGridCellSize: { type: 'float' },\\n        xyGridCellSize: { type: 'float' },\\n        slCenterPoint: { type: 'vec2' },\\n        xyCenterPoint: { type: 'vec2' },\\n        centerlineStationInterval: { type: 'float' },\\n        centerline: { type: 'sharedTexture' }\\n      }\\n    }\\n  },\\n\\n  update(config, slWidth, slHeight, slCenterPoint, xyCenterPoint) {\\n    return {\\n      width: slWidth,\\n      height: slHeight,\\n      uniforms: {\\n        slGridCellSize: config.slGridCellSize,\\n        xyGridCellSize: config.xyGridCellSize,\\n        slCenterPoint: [slCenterPoint.x, slCenterPoint.y],\\n        xyCenterPoint: [xyCenterPoint.x, xyCenterPoint.y],\\n        centerlineStationInterval: config.centerlineStationInterval\\n      }\\n    }\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/slObstacleGridDilation.js\\nconst SL_OBSTACLE_DILATION_KERNEL = `\\n\\n// TODO: test performance of returning early if non-zero pixel found\\nvec4 kernel() {\\n  float val = 0.0;\\n\\n  for (int d = 0; d <= collisionDilation; d++) {\\n    val = max(val, texture(slObstacleGrid, kernelPosition + delta * vec2(d)).r);\\n    val = max(val, texture(slObstacleGrid, kernelPosition + delta * vec2(-d)).r);\\n  }\\n\\n  for (int d = collisionDilation + 1; d <= collisionDilation + hazardDilation; d++) {\\n    val = max(val, texture(slObstacleGrid, kernelPosition + delta * vec2(d)).r * 0.5);\\n    val = max(val, texture(slObstacleGrid, kernelPosition + delta * vec2(-d)).r * 0.5);\\n  }\\n\\n  val = max(val, step(0.1, val) * 0.5);\\n\\n  return vec4(val, 0, 0, 1);\\n}\\n\\n`;\\n\\n/* harmony default export */ var slObstacleGridDilation = ({\\n  setUp() {\\n    return [\\n      { // SL-space obstacle grid S dilation\\n        kernel: SL_OBSTACLE_DILATION_KERNEL,\\n        output: { name: 'slObstacleGridStationDilated' },\\n        uniforms: {\\n          slObstacleGrid: { type: 'outputTexture' },\\n          delta: { type: 'vec2' },\\n          collisionDilation: { type: 'int' },\\n          hazardDilation: { type: 'int' }\\n        }\\n      },\\n      { // SL-space obstacle grid L dilation\\n        kernel: SL_OBSTACLE_DILATION_KERNEL,\\n        output: { name: 'slObstacleGridDilated' },\\n        uniforms: {\\n          slObstacleGrid: { type: 'outputTexture', name: 'slObstacleGridStationDilated' },\\n          delta: { type: 'vec2' },\\n          collisionDilation: { type: 'int' },\\n          hazardDilation: { type: 'int' }\\n        }\\n      }\\n    ];\\n  },\\n\\n  update(config, slWidth, slHeight) {\\n    return [\\n      { // SL-space obstacle grid S dilation\\n        width: slWidth,\\n        height: slHeight,\\n        uniforms: {\\n          delta: [1 / slWidth, 0],\\n          collisionDilation: Math.ceil(config.collisionDilationS / config.slGridCellSize),\\n          hazardDilation: Math.ceil(config.hazardDilationS / config.slGridCellSize)\\n        }\\n      },\\n      { // SL-space obstacle grid L dilation\\n        width: slWidth,\\n        height: slHeight,\\n        uniforms: {\\n          delta: [0, 1 / slHeight],\\n          collisionDilation: Math.ceil(config.collisionDilationL / config.slGridCellSize),\\n          hazardDilation: Math.ceil(config.hazardDilationL / config.slGridCellSize)\\n        }\\n      }\\n    ];\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/slDynamicObstacleGrid.js\\nconst DYNAMIC_OBSTACLE_VERTEX_SHADER = `#version 300 es\\nuniform mat3 xform;\\nin vec3 position;\\nout float color;\\n\\nvoid main(void) {\\n  gl_Position = vec4((xform * vec3(position.xy, 1)).xy, position.z, 1);\\n\\n  // The z coordinate is 0.25 for collision zone and 0.75 for hazard zone,\\n  // so that the collision zone is drawn on top.\\n  // Convert this to 1.0 for collision zone, 0.5 for hazard zone\\n  color = (1.0 - step(0.5, position.z)) * 0.5 + 0.5;\\n}\\n`;\\n\\nconst DYNAMIC_OBSTACLE_KERNEL = `\\n  in float color;\\n\\n  vec4 kernel() {\\n    return vec4(color, 0, 0, 1);\\n  }\\n`;\\n\\nlet slDynamicObstacleGrid_obstacleVertices;\\nlet slDynamicObstacleGrid_obstacleXform;\\nconst numDynamicFrames = 20;\\n\\n// Draw dynamic obstacle triangles to SL-space obstacle grid\\n/* harmony default export */ var slDynamicObstacleGrid = ({\\n  setUp() {\\n    return {\\n      kernel: DYNAMIC_OBSTACLE_KERNEL,\\n      vertexShader: DYNAMIC_OBSTACLE_VERTEX_SHADER,\\n      output: { name: 'slDynamicObstacleGrid', textureType: '2DArray', depth: numDynamicFrames },\\n      draw: (gpgpu, program) => {\\n        const gl = gpgpu.gl;\\n\\n        gl.enable(gl.DEPTH_TEST);\\n\\n        const renderbuffer = gl.createRenderbuffer();\\n        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, program.inputWidth, program.inputHeight);\\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\\n\\n        for (let frame = 0; frame < numDynamicFrames; frame++) {\\n          gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, program.outputTexture, 0, frame);\\n          const frameBufferStatus = (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE);\\n          if (!frameBufferStatus)\\n            throw new Error('Error attaching float texture to framebuffer. Your device is probably incompatible.');\\n\\n          gl.clearColor(0, 0, 0, 0);\\n          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\\n\\n          if (slDynamicObstacleGrid_obstacleVertices[frame].length > 0) {\\n            const buf = gl.createBuffer();\\n\\n            gl.bindBuffer(gl.ARRAY_BUFFER, buf);\\n            gl.bufferData(gl.ARRAY_BUFFER, slDynamicObstacleGrid_obstacleVertices[frame], gl.STATIC_DRAW);\\n            gl.enableVertexAttribArray(program.positionLocation);\\n            gl.vertexAttribPointer(program.positionLocation, 3, gl.FLOAT, false, 0, 0);\\n\\n            const xformLocation = gl.getUniformLocation(program.glProgram, 'xform');\\n            gl.uniformMatrix3fv(xformLocation, false, slDynamicObstacleGrid_obstacleXform.elements);\\n\\n            gl.drawArrays(gl.TRIANGLES, 0, slDynamicObstacleGrid_obstacleVertices[frame].length / 3);\\n\\n            if (frame == 0) {\\n              const obstacleGrid = new Float32Array(program.inputWidth * program.inputHeight * 4);\\n              gl.readPixels(0, 0, program.inputWidth, program.inputHeight, gl.RGBA, gl.FLOAT, obstacleGrid);\\n              gpgpu._dynamicObstacleGrid = obstacleGrid;\\n            }\\n\\n            gl.deleteBuffer(buf);\\n          }\\n        }\\n\\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\\n        gl.deleteRenderbuffer(renderbuffer);\\n        gl.disable(gl.DEPTH_TEST);\\n      }\\n    };\\n  },\\n\\n  update(config, slWidth, slHeight, slCenterPoint, vehicleStation, startTime, dynamicFrameTime, dynamicObstacles) {\\n    slDynamicObstacleGrid_obstacleVertices = [];\\n\\n    let time = startTime;\\n    for (let frame = 0; frame < numDynamicFrames; frame++) {\\n      const vertices = Array.prototype.concat.apply([], dynamicObstacles.map(o => o.verticesInTimeRange(time, time + dynamicFrameTime, config)));\\n      slDynamicObstacleGrid_obstacleVertices.push(new Float32Array(vertices));\\n      time += dynamicFrameTime;\\n    }\\n\\n    const translate = new THREE.Matrix3();\\n    translate.set(\\n      1, 0, -slCenterPoint.x - vehicleStation,\\n      0, 1, -slCenterPoint.y,\\n      0, 0, 1\\n    );\\n\\n    const scale = new THREE.Matrix3();\\n    scale.set(\\n      2 / (slWidth * config.slGridCellSize), 0, 0,\\n      0, 2 / (slHeight * config.slGridCellSize), 0,\\n      0, 0, 1\\n    );\\n\\n    slDynamicObstacleGrid_obstacleXform = scale.multiply(translate);\\n\\n    return {\\n      width: slWidth,\\n      height: slHeight\\n    }\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/xyslMap.js\\nconst XYSL_MAP_KERNEL = `\\n\\nvec4 kernel() {\\n  vec2 xy = (kernelPosition - 0.5) * vec2(kernelSize) * vec2(xyGridCellSize) + xyCenterPoint;\\n\\n  int numSamples = textureSize(centerline, 0).x;\\n  int closest = 0;\\n  float closestDist = distance(xy, texelFetch(centerline, ivec2(0, 0), 0).xy);\\n  for (int i = 1; i < numSamples; i++) {\\n    float dist = distance(xy, texelFetch(centerline, ivec2(i, 0), 0).xy);\\n    if (dist < closestDist) {\\n      closestDist = dist;\\n      closest = i;\\n    }\\n  }\\n\\n  vec2 closestPos = texelFetch(centerline, ivec2(closest, 0), 0).xy;\\n  vec2 prev, next;\\n  int prevIndex, nextIndex;\\n\\n  if (closest == 0) {\\n    prevIndex = 0;\\n    nextIndex = 1;\\n    prev = closestPos;\\n    next = texelFetch(centerline, ivec2(1, 0), 0).xy;\\n  } else if (closest == numSamples - 1) {\\n    prevIndex = closest - 1;\\n    nextIndex = closest;\\n    prev = texelFetch(centerline, ivec2(prevIndex, 0), 0).xy;\\n    next = closestPos;\\n  } else {\\n    vec2 before = texelFetch(centerline, ivec2(closest - 1, 0), 0).xy;\\n    vec2 after = texelFetch(centerline, ivec2(closest + 1, 0), 0).xy;\\n\\n    if (distance(before, xy) < distance(after, xy)) {\\n      prevIndex = closest - 1;\\n      nextIndex = closest;\\n      prev = before;\\n      next = closestPos;\\n    } else {\\n      prevIndex = closest;\\n      nextIndex = closest + 1;\\n      prev = closestPos;\\n      next = after;\\n    }\\n  }\\n\\n  float dist = distance(prev, next);\\n  float progress = clamp(dot(xy - prev, next - prev) / dist / dist, 0.0, 1.0);\\n  vec2 projectedPos = (next - prev) * vec2(progress) + prev;\\n\\n  return vec4(\\n    (float(prevIndex) + progress) * centerlineStationInterval,\\n    sign(determinant(mat2(next - prev, xy - prev))) * distance(xy, projectedPos),\\n    0,\\n    0\\n  );\\n}\\n\\n`;\\n\\n// Build XY-SL map\\n/* harmony default export */ var xyslMap = ({\\n  setUp() {\\n    return {\\n      kernel: XYSL_MAP_KERNEL,\\n      output: { name: 'xyslMap', filter: 'linear' },\\n      uniforms: {\\n        centerline: { type: 'sharedTexture' },\\n        xyCenterPoint: { type: 'vec2' },\\n        xyGridCellSize: { type: 'float'},\\n        centerlineStationInterval: { type: 'float'}\\n      }\\n    };\\n  },\\n\\n  update(config, xyWidth, xyHeight, xyCenterPoint) {\\n    return {\\n      width: xyWidth,\\n      height: xyHeight,\\n      uniforms: {\\n        xyCenterPoint: [xyCenterPoint.x, xyCenterPoint.y],\\n        xyGridCellSize: config.xyGridCellSize,\\n        centerlineStationInterval: config.centerlineStationInterval\\n      }\\n    };\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/optimizeCubicPaths.js\\n// Config:\\n// num stations\\n// num latitudes\\n// station connectivity\\n// latitude connectivity\\n//\\n// Shared:\\n// lattice\\n\\nconst OPTIMIZE_CUBIC_SHARED = `\\n\\nconst int NEWTON_ITERATIONS = 16;\\nconst int RELAXATION_ITERATIONS = 16;\\nconst float CONVERGENCE_ERROR = 0.01;\\n\\n// These two consts must stay in sync.\\nconst int SIMPSONS_INTERVALS = 8;\\n//const float SIMPSONS_COEFFS[SIMPSONS_INTERVALS + 1] = float[](1.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 1.0);\\nconst float SIMPSONS_COEFFS[SIMPSONS_INTERVALS + 1] = float[](1.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 1.0);\\n\\nconst float PI = 3.1415926535897932384626433832795;\\nconst float TWO_PI = PI + PI;\\n\\nconst float RELAXATION_ITERATIONS_F = float(RELAXATION_ITERATIONS);\\nconst float SIMPSONS_INTERVALS_F = float(SIMPSONS_INTERVALS);\\n\\nfloat wrapAngle(float angle) {\\n  angle = mod(angle, TWO_PI);\\n  if (angle <= -PI) return angle + TWO_PI;\\n  else if (angle > PI) return angle - TWO_PI;\\n  return angle;\\n}\\n\\nvec4 iterate(vec4 goal, float p0, float p1, float p2, float p3, float sG) {\\n  float ds = sG / SIMPSONS_INTERVALS_F;\\n  float sG_2 = sG * sG;\\n  float sG_3 = sG_2 * sG;\\n\\n  vec3 dX_p = vec3(0.0);\\n  vec3 dY_p = vec3(0.0);\\n  vec2 guess = vec2(0.0);\\n  float s = 0.0;\\n\\n  float theta, cosTheta, sinTheta;\\n  vec3 dT_p;\\n\\n  for (int i = 0; i <= SIMPSONS_INTERVALS; i++) {\\n    float coeff = SIMPSONS_COEFFS[i];\\n\\n    float a = p0;\\n    float b = (-5.5 * p0 + 9.0 * p1 - 4.5 * p2 + p3) / sG;\\n    float c = (9.0 * p0 - 22.5 * p1 + 18.0 * p2 - 4.5 * p3) / sG_2;\\n    float d = (-4.5 * (p0 - 3.0 * p1 + 3.0 * p2 - p3)) / sG_3;\\n\\n    theta = (((d * s / 4.0 + c / 3.0) * s + b / 2.0) * s + a) * s;\\n    cosTheta = cos(theta);\\n    sinTheta = sin(theta);\\n\\n    float s_sG = s / sG;\\n\\n    dT_p = vec3(\\n      // p1\\n      ((3.375 * s_sG - 7.5) * s_sG + 4.5) * s_sG * s,\\n\\n      // p2\\n      ((-3.375 * s_sG + 6.0) * s_sG - 2.25) * s_sG * s,\\n\\n      // sG\\n      ((3.375 * (p0 - 3.0 * p1 + 3.0 * p2 - p3) * s_sG - 3.0 * (2.0 * p0 - 5.0 * p1 + 4.0 * p2 - p3)) * s_sG + 0.25 * (11.0 * p0 - 18.0 * p1 + 9.0 * p2 - 2.0 * p3)) * s_sG * s_sG\\n    );\\n\\n    dX_p -= coeff * sinTheta * dT_p;\\n    dY_p += coeff * cosTheta * dT_p;\\n\\n    guess += coeff * vec2(cosTheta, sinTheta);\\n\\n    s += ds;\\n  }\\n\\n  float hOver3 = sG / SIMPSONS_INTERVALS_F / 3.0;\\n\\n  vec3 delta;\\n  delta.xy = goal.xy - guess * hOver3;\\n  delta.z = wrapAngle(goal.z - theta);\\n\\n  if (abs(delta.x) + abs(delta.y) + abs(delta.z) < CONVERGENCE_ERROR)\\n    return vec4(p1, p2, sG, 1.0);\\n\\n  dX_p.xyz *= hOver3;\\n  dY_p.xyz *= hOver3;\\n  dX_p.z += cosTheta;\\n  dY_p.z += sinTheta;\\n\\n  mat3 invJacobian = inverse(transpose(mat3(dX_p, dY_p, dT_p)));\\n\\n  vec3 deltaP = invJacobian * delta;\\n  vec4 params = vec4(p1, p2, sG, 0.0);\\n  params.xyz += deltaP;\\n\\n  return params;\\n}\\n\\n/* Input:\\n *   start: (vec4)\\n *     x: x position,\\n *     y: y position,\\n *     z: theta rotation,\\n *     w: k curvature\\n *   end: (vec4)\\n *     x: x position,\\n *     y: y position,\\n *     z: theta rotation,\\n *     w: k curvature\\n *\\n * Output: (vec4)\\n *   x: p1,\\n *   y: p2,\\n *   z: sG,\\n *   w: 1 if converged, 0 if not\\n */\\n\\nvec4 optimize(vec4 start, vec4 end) {\\n  // Translate and rotate start and end so that start is at the origin\\n  float sinRot = sin(start.z);\\n  float cosRot = cos(start.z);\\n\\n  vec4 diff = end - start;\\n  vec4 goal;\\n  goal.xy = mat2(cosRot, -sinRot, sinRot, cosRot) * diff.xy;\\n  goal.z = wrapAngle(diff.z);\\n  goal.w = end.w;\\n\\n  vec4 originalGoal = goal;\\n  vec4 dGoal;\\n  dGoal.x = 0.0;\\n  dGoal.yzw = goal.yzw / RELAXATION_ITERATIONS_F;\\n  float dK0 = start.w / RELAXATION_ITERATIONS_F;\\n\\n  // Relax the goal to (x, 0, 0, 0)\\n  goal.yzw = vec3(0, 0, 0);\\n\\n  // Relax the params to (0, 0, 0, 0, goal.x)\\n  float p0 = 0.0;\\n  float p1 = 0.0;\\n  float p2 = 0.0;\\n  float p3 = 0.0;\\n  float sG = goal.x;\\n\\n  if (sG < 0.1) return vec4(0.0);\\n\\n  for (int i = 0; i < RELAXATION_ITERATIONS; i++) {\\n    p0 += dK0;\\n    p3 += dGoal.w;\\n    goal += dGoal;\\n    \\n    vec4 result = iterate(goal, p0, p1, p2, p3, sG);\\n    p1 = result.x;\\n    p2 = result.y;\\n    sG = result.z;\\n  }\\n\\n  goal = originalGoal;\\n\\n  for (int i = 0; i < NEWTON_ITERATIONS; i++) {\\n    vec4 result = iterate(goal, p0, p1, p2, p3, sG);\\n    if (result.w == 1.0) {\\n      result.w = step(0.0, result.z);\\n      return result;\\n    }\\n\\n    p1 = result.x;\\n    p2 = result.y;\\n    sG = result.z;\\n  }\\n\\n  return vec4(p1, p2, sG, 0.0);\\n}\\n\\n`;\\n\\nconst OPTIMIZE_CUBIC_KERNEL = OPTIMIZE_CUBIC_SHARED + `\\n\\n// width: station * latitude index\\n// height: station_conn * lattice_conn\\n//\\n// lattice:\\n// width: latitudes\\n// height: stations\\n\\nvec4 kernel() {\\n  ivec2 indexes = ivec2(kernelPosition * vec2(kernelSize));\\n\\n  int endStation = indexes.x / numLatitudes;\\n  int endLatitude = int(mod(float(indexes.x), float(numLatitudes)));\\n\\n  int startStation = endStation - stationConnectivity + indexes.y / latitudeConnectivity;\\n  int startLatitude = endLatitude - latitudeConnectivity / 2 + int(mod(float(indexes.y), float(latitudeConnectivity)));\\n\\n  if (startStation < 0 || startStation >= numStations || startLatitude < 0 || startLatitude >= numLatitudes)\\n    return vec4(0.0);\\n\\n  vec4 start = texelFetch(lattice, ivec2(startLatitude, startStation), 0);\\n  vec4 end = texelFetch(lattice, ivec2(endLatitude, endStation), 0);\\n\\n  return optimize(start, end);\\n}\\n\\n`;\\n\\nconst OPTIMIZE_CUBIC_FROM_VEHICLE_KERNEL = OPTIMIZE_CUBIC_SHARED + `\\n\\nvec4 kernel() {\\n  ivec2 indexes = ivec2(kernelPosition * vec2(kernelSize));\\n\\n  vec4 start = vec4(0, 0, 0, curvVehicle);\\n  vec4 end = texelFetch(lattice, indexes, 0);\\n\\n  return optimize(start, end);\\n}\\n\\n`;\\n\\n/* harmony default export */ var optimizeCubicPaths = ({\\n  setUp() {\\n    return [\\n      { // Cubic paths between lattice nodes\\n        kernel: OPTIMIZE_CUBIC_KERNEL,\\n        output: { name: 'cubicPaths', read: true },\\n        uniforms: {\\n          lattice: { type: 'sharedTexture' },\\n          numStations: { type: 'int' },\\n          numLatitudes: { type: 'int' },\\n          stationConnectivity: { type: 'int' },\\n          latitudeConnectivity: { type: 'int' }\\n        }\\n      },\\n      { // Cubic paths from vehicle to lattice nodes\\n        kernel: OPTIMIZE_CUBIC_FROM_VEHICLE_KERNEL,\\n        output: { name: 'cubicPathsFromVehicle', read: true },\\n        uniforms: {\\n          lattice: { type: 'sharedTexture' },\\n          curvVehicle: { type: 'float' }\\n        }\\n      }\\n    ]\\n  },\\n\\n  update(config, pose) {\\n    return [\\n      { // Cubic paths between lattice nodes\\n        width: config.lattice.numStations * config.lattice.numLatitudes,\\n        height: config.lattice.stationConnectivity * config.lattice.latitudeConnectivity,\\n        uniforms: {\\n          numStations: config.lattice.numStations,\\n          numLatitudes: config.lattice.numLatitudes,\\n          stationConnectivity: config.lattice.stationConnectivity,\\n          latitudeConnectivity: config.lattice.latitudeConnectivity,\\n        }\\n      },\\n      { // Cubic paths from vehicle to lattice nodes\\n        width: config.lattice.numLatitudes,\\n        height: config.lattice.stationConnectivity,\\n        uniforms: {\\n          curvVehicle: pose.curv\\n        }\\n      }\\n    ];\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/optimizeQuinticPaths.js\\nconst OPTIMIZE_KERNEL = `\\n\\nconst int NEWTON_ITERATIONS = 32;\\nconst int RELAXATION_ITERATIONS = 32;\\nconst float CONVERGENCE_ERROR = 0.01;\\n\\n// These two consts must stay in sync.\\nconst int SIMPSONS_INTERVALS = 8;\\nconst float SIMPSONS_COEFFS[SIMPSONS_INTERVALS + 1] = float[](1.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 1.0);\\n\\nconst float PI = 3.1415926535897932384626433832795;\\nconst float TWO_PI = PI + PI;\\n\\nconst float RELAXATION_ITERATIONS_F = float(RELAXATION_ITERATIONS);\\nconst float SIMPSONS_INTERVALS_F = float(SIMPSONS_INTERVALS);\\n\\nfloat wrapAngle(float angle) {\\n  angle = mod(angle, TWO_PI);\\n  if (angle <= -PI) return angle + TWO_PI;\\n  else if (angle > PI) return angle - TWO_PI;\\n  return angle;\\n}\\n\\nvec4 iterate(vec4 goal, float p0, float p1, float p2, float p3, float p4, float p5, float sG) {\\n  float ds = sG / SIMPSONS_INTERVALS_F;\\n  float sG_2 = sG * sG;\\n  float sG_3 = sG_2 * sG;\\n\\n  vec3 dX_p = vec3(0.0);\\n  vec3 dY_p = vec3(0.0);\\n  vec2 guess = vec2(0.0);\\n  float s = 0.0;\\n\\n  float theta, cosTheta, sinTheta;\\n  vec3 dT_p;\\n\\n  for (int i = 0; i <= SIMPSONS_INTERVALS; i++) {\\n    float coeff = SIMPSONS_COEFFS[i];\\n\\n    float a = p0;\\n    float b = p1;\\n    float c = p2 / 2.0;\\n    float d = (-71.875 * p0 + 81.0 * p3 - 10.125 * p4 + p5 - 21.25 * p1 * sG - 2.75 * p2 * sG_2) / sG_3;\\n    float e = (166.5 * p0 - 202.5 * p3 + 40.5 * p4 - 4.5 * p5 + 45.0 * p1 * sG + 4.5 * p2 * sG_2) / (sG_2 * sG_2);\\n    float f = (-95.625 * p0 + 121.5 * p3 - 30.375 * p4 + 4.5 * p5 - 24.75 * p1 * sG - 2.25 * p2 * sG_2) / (sG_2 * sG_3);\\n\\n    theta = (((((f * s / 6.0 + e / 5.0) * s + d / 4.0) * s + c / 3.0) * s + b / 2.0) * s + a) * s;\\n    cosTheta = cos(theta);\\n    sinTheta = sin(theta);\\n\\n    float s_2 = s * s;\\n    float s_sG = s / sG;\\n    float s_sG_2 = s_sG * s_sG;\\n    float s_sG_3 = s_sG_2 * s_sG;\\n    float s_sG_4 = s_sG_3 * s_sG;\\n    float s_sG_5 = s_sG_4 * s_sG;\\n\\n    dT_p = vec3(\\n      // p3\\n      ((20.25 * s_sG - 40.5) * s_sG + 20.25) * s_sG_3 * s,\\n\\n      // p4\\n      ((-5.0625 * s_sG + 8.1) * s_sG - 2.53125) * s_sG_3 * s,\\n\\n      // sG\\n      (53.90625 * p0 - 60.75 * p3 + 7.59375 * p4 - 0.75 * p5) * s_sG_4 + 10.625 * p1 * s * s_sG_3 + 0.6875 * p2 * s_2 * s_sG_2 + (-133.2 * p0 + 162.0 * p3 - 32.4 * p4 + 3.6 * p5) * s_sG_5 + (-27.0) * p1 * s * s_sG_4 - 1.8 * p2 * s_2 * s_sG_3 + (79.6875 * p0 - 101.25 * p3 + 25.3125 * p4 - 3.75 * p5) * s_sG_5 * s_sG + 16.5 * p1 * s * s_sG_5 + 1.125 * p2 * s_2 * s_sG_4\\n    );\\n\\n    dX_p -= coeff * sinTheta * dT_p;\\n    dY_p += coeff * cosTheta * dT_p;\\n\\n    guess += coeff * vec2(cosTheta, sinTheta);\\n\\n    s += ds;\\n  }\\n\\n  float hOver3 = sG / SIMPSONS_INTERVALS_F / 3.0;\\n\\n  vec3 delta;\\n  delta.xy = goal.xy - guess * hOver3;\\n  delta.z = wrapAngle(goal.z - theta);\\n\\n  if (abs(delta.x) + abs(delta.y) + abs(delta.z) < CONVERGENCE_ERROR)\\n    return vec4(p3, p4, sG, 1.0);\\n\\n  dX_p.xyz *= hOver3;\\n  dY_p.xyz *= hOver3;\\n  dX_p.z += cosTheta;\\n  dY_p.z += sinTheta;\\n\\n  mat3 invJacobian = inverse(transpose(mat3(dX_p, dY_p, dT_p)));\\n\\n  vec3 deltaP = invJacobian * delta;\\n  vec4 params = vec4(p3, p4, sG, 0.0);\\n  params.xyz += deltaP;\\n\\n  return params;\\n}\\n\\nvec4 optimize(vec4 start, vec4 end) {\\n  // Translate and rotate start and end so that start is at the origin\\n  float sinRot = sin(start.z);\\n  float cosRot = cos(start.z);\\n\\n  vec4 diff = end - start;\\n  vec4 goal;\\n  goal.xy = mat2(cosRot, -sinRot, sinRot, cosRot) * diff.xy;\\n  goal.z = wrapAngle(diff.z);\\n  goal.w = end.w;\\n\\n  vec4 originalGoal = goal;\\n  vec4 dGoal;\\n  dGoal.x = 0.0;\\n  dGoal.yzw = goal.yzw / RELAXATION_ITERATIONS_F;\\n  float d_K0 = start.w / RELAXATION_ITERATIONS_F;\\n  float d_dK0 = dCurvVehicle / RELAXATION_ITERATIONS_F;\\n  float d_ddK0 = ddCurvVehicle / RELAXATION_ITERATIONS_F;\\n\\n  // Relax the goal to (x, 0, 0, 0)\\n  goal.yzw = vec3(0, 0, 0);\\n\\n  // Relax the params to (0, 0, 0, 0, goal.x)\\n  float p0 = 0.0;\\n  float p1 = 0.0;\\n  float p2 = 0.0;\\n  float p3 = 0.0;\\n  float p4 = 0.0;\\n  float p5 = 0.0;\\n  float sG = goal.x;\\n\\n  if (sG < 0.1) return vec4(0.0);\\n\\n  for (int i = 0; i < RELAXATION_ITERATIONS; i++) {\\n    p0 += d_K0;\\n    p1 += d_dK0;\\n    p2 += d_ddK0;\\n    p5 += dGoal.w;\\n    goal += dGoal;\\n    \\n    vec4 result = iterate(goal, p0, p1, p2, p3, p4, p5, sG);\\n    p3 = result.x;\\n    p4 = result.y;\\n    sG = result.z;\\n  }\\n\\n  goal = originalGoal;\\n\\n  for (int i = 0; i < NEWTON_ITERATIONS; i++) {\\n    vec4 result = iterate(goal, p0, p1, p2, p3, p4, p5, sG);\\n    if (result.w == 1.0) {\\n      result.w = step(0.0, result.z);\\n      return result;\\n    }\\n\\n    p3 = result.x;\\n    p4 = result.y;\\n    sG = result.z;\\n  }\\n\\n  return vec4(p3, p4, sG, 0.0);\\n}\\n\\nvec4 kernel() {\\n  ivec2 latticeIndexes = ivec2(kernelPosition * vec2(kernelSize));\\n\\n  vec4 start = vec4(0, 0, 0, curvVehicle);\\n  vec4 end = texelFetch(lattice, latticeIndexes, 0);\\n\\n  return optimize(start, end);\\n}\\n\\n`;\\n\\n// Quintic spiral path optimizer\\n//   * Start of paths is the vehicle pose\\n//     * x-pos, y-pos, and rotation aren't needed, since the lattice origin is the vehicle pose\\n//     * So assume position and rotation are 0\\n//   * Ends of paths are all latitudes within the first (stationConnectivity) stations\\n/* harmony default export */ var optimizeQuinticPaths = ({\\n  setUp() {\\n    return {\\n      kernel: OPTIMIZE_KERNEL,\\n      output: { name: 'quinticPathsFromVehicle', read: true },\\n      uniforms: {\\n        lattice: { type: 'sharedTexture' },\\n        curvVehicle: { type: 'float' },\\n        dCurvVehicle: { type: 'float' },\\n        ddCurvVehicle: { type: 'float' }\\n      }\\n    };\\n  },\\n\\n  update(config, pose) {\\n    return {\\n      width: config.lattice.numLatitudes,\\n      height: config.lattice.stationConnectivity,\\n      uniforms: {\\n        curvVehicle: pose.curv,\\n        dCurvVehicle: pose.dCurv,\\n        ddCurvVehicle: pose.ddCurv\\n      }\\n    };\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/graphSearchShared.js\\nconst SHARED_SHADER = `\\n\\nconst float smallV = 0.01;\\nvec4 pathSamples[128];\\nfloat pathSampleCurvRates[128];\\n\\nfloat calculateAcceleration(int index, float initialVelocitySq, float distance) {\\n  if (index <= 4) {\\n    // [aMaxHard, aMinHard, aMaxSoft, aMinSoft, 0]\\n    return accelerationProfiles[index];\\n  } else {\\n    float finalVelocity = finalVelocityProfiles[index - 5];\\n    if (distance < 0.001) return 0.0;\\n    return clamp((finalVelocity * finalVelocity - initialVelocitySq) / (2.0 * distance), accelerationProfiles[1], accelerationProfiles[0]);\\n  }\\n}\\n\\nvec2 xy2sl(vec4 xytk) {\\n  vec2 xy = xytk.xy + rearAxleToCenter * vec2(cos(xytk.z), sin(xytk.z));\\n  vec2 xyTexCoords = (xy - xyCenterPoint) / vec2(textureSize(xyslMap, 0)) / vec2(xyGridCellSize) + 0.5;\\n  return texture(xyslMap, xyTexCoords).xy;\\n}\\n\\nfloat sampleStaticCost(vec4 xytk) {\\n  vec2 sl = xy2sl(xytk);\\n  vec2 slTexCoords = (sl - slCenterPoint) / vec2(textureSize(slObstacleGrid, 0)) / vec2(slGridCellSize) + 0.5;\\n  float obstacleCost = texture(slObstacleGrid, slTexCoords).r;\\n\\n  if (obstacleCost >= 0.75) return -1.0; // Infinite cost\\n\\n  obstacleCost = step(0.25, obstacleCost) * obstacleHazardCost;\\n\\n  float absLatitude = abs(sl.y);\\n  if (absLatitude >= laneShoulderLatitude) return -1.0;\\n\\n  float laneCost = abs(absLatitude - laneCenterLatitude) * laneCostSlope + step(0.0, -sl.y * sign(lanePreference)) * lanePreferenceDiscount;\\n\\n  return obstacleCost + laneCost;\\n}\\n\\nfloat sampleDynamicCost(vec4 xytk, float time, float velocity, float acceleration) {\\n  vec2 sl = xy2sl(xytk);\\n  vec2 slTexCoords = (sl - slCenterPoint) / vec2(textureSize(slDynamicObstacleGrid, 0).xy) / vec2(slGridCellSize) + 0.5;\\n  float dynamicFrame = floor(time / dynamicFrameTime);\\n\\n  float obstacleCost = texture(slDynamicObstacleGrid, vec3(slTexCoords, dynamicFrame)).r;\\n\\n  if (obstacleCost > 0.75) return -1.0; // Infinite cost\\n\\n  return step(0.25, obstacleCost) * obstacleHazardCost;\\n}\\n\\nfloat calculateAverageStaticCost(int numSamples) {\\n  float averageStaticCost = 0.0;\\n\\n  for (int i = 0; i < numSamples; i++) {\\n    float cost = sampleStaticCost(pathSamples[i]);\\n\\n    if (cost < 0.0) return cost;\\n\\n    averageStaticCost += cost;\\n  }\\n\\n  averageStaticCost /= float(numSamples);\\n\\n  return averageStaticCost;\\n}\\n\\nfloat calculateAverageDynamicCost(int numSamples, float pathLength, float initialTime, float initialVelocity, float acceleration, float abandonThreshold) {\\n  float s = 0.0;\\n  float ds = pathLength / float(numSamples - 1);\\n  float averageDynamicCost = 0.0;\\n  float maxVelocity = 0.0;\\n  float maxLateralAcceleration = 0.0;\\n  float numSamples_f = float(numSamples);\\n\\n  for (int i = 0; i < numSamples; i++) {\\n    vec4 pathSample = pathSamples[i]; // vec4(x-pos, y-pos, theta (rotation), kappa (curvature))\\n\\n    float velocitySq = 2.0 * acceleration * s + initialVelocity * initialVelocity;\\n    float velocity = max(smallV, sqrt(max(0.0, velocitySq)));\\n    maxVelocity = max(maxVelocity, velocity);\\n    maxLateralAcceleration = max(maxLateralAcceleration, abs(pathSample.w * velocity * velocity));\\n\\n    float time = 2.0 * s / (initialVelocity + velocity) + initialTime;\\n\\n    float dCurv = pathSampleCurvRates[i] * velocity;\\n    if (dCurv > dCurvatureMax) return -1.0;\\n\\n    float cost = sampleDynamicCost(pathSample, time, velocity, acceleration);\\n    if (cost < 0.0) return cost;\\n\\n    averageDynamicCost += cost;\\n    if (averageDynamicCost / numSamples_f >= abandonThreshold) return -1.0;\\n\\n    s += ds;\\n  }\\n\\n  averageDynamicCost /= numSamples_f;\\n\\n  // Apply speeding penality if any velocity along the trajectory is over the speed limit\\n  averageDynamicCost += step(speedLimit, maxVelocity) * speedLimitPenalty;\\n\\n  // Apply hard acceleration/deceleration penalties if the acceleration/deceleration exceeds the soft limits\\n  averageDynamicCost += step(accelerationProfiles[2] + 0.0001, acceleration) * hardAccelerationPenalty;\\n  averageDynamicCost += (1.0 - step(accelerationProfiles[3], acceleration)) * hardDecelerationPenalty;\\n\\n  // Penalize lateral acceleration\\n  averageDynamicCost += step(softLateralAccelerationLimit, maxLateralAcceleration) * softLateralAccelerationPenalty;\\n  averageDynamicCost += linearLateralAccelerationPenalty * maxLateralAcceleration;\\n\\n  return averageDynamicCost;\\n}\\n\\nvec3 calculateAVT(int accelerationIndex, float initialVelocity, float initialTime, float pathLength) {\\n  float initialVelocitySq = initialVelocity * initialVelocity;\\n  float acceleration = calculateAcceleration(accelerationIndex, initialVelocitySq, pathLength);\\n\\n  float finalVelocitySq = 2.0 * acceleration * pathLength + initialVelocitySq;\\n  float finalVelocity = max(smallV, sqrt(max(0.0, finalVelocitySq)));\\n\\n  float finalTime = initialTime;\\n\\n  if (acceleration == 0.0) {\\n    finalTime += pathLength / finalVelocity;\\n  } else if (finalVelocitySq <= 0.0) { // Calculate final time if the vehicle stops before the end of the trajectory\\n    float distanceLeft = pathLength - (smallV * smallV - initialVelocitySq) / (2.0 * acceleration);\\n    finalTime += (finalVelocity - initialVelocity) / acceleration + distanceLeft / smallV;\\n  } else {\\n    finalTime += 2.0 * pathLength / (finalVelocity + initialVelocity);\\n  }\\n\\n  return vec3(acceleration, finalVelocity, finalTime);\\n}\\n\\n`;\\n\\nconst SAMPLE_CUBIC_PATH_FN = `\\n\\nint sampleCubicPath(vec4 start, vec4 end, vec4 cubicPathParams) {\\n  float p0 = start.w;\\n  float p1 = cubicPathParams.x;\\n  float p2 = cubicPathParams.y;\\n  float p3 = end.w;\\n  float sG = cubicPathParams.z;\\n\\n  if (sG <= 0.0) return 0;\\n\\n  int numSamples = int(ceil(sG / pathSamplingStep)) + 1;\\n\\n  float sG_2 = sG * sG;\\n  float sG_3 = sG_2 * sG;\\n\\n  float a = p0;\\n  float b = (-5.5 * p0 + 9.0 * p1 - 4.5 * p2 + p3) / sG;\\n  float c = (9.0 * p0 - 22.5 * p1 + 18.0 * p2 - 4.5 * p3) / sG_2;\\n  float d = (-4.5 * (p0 - 3.0 * p1 + 3.0 * p2 - p3)) / sG_3;\\n\\n  pathSamples[0] = start;\\n\\n  float ds = sG / float(numSamples - 1);\\n  float s = ds;\\n  vec2 dxy = vec2(0);\\n  vec2 prevCosSin = vec2(cos(start.z), sin(start.z));\\n\\n  for (int i = 1; i < numSamples; i++) {\\n    float rot = (((d * s / 4.0 + c / 3.0) * s + b / 2.0) * s + a) * s + start.z;\\n    float curv = ((d * s + c) * s + b) * s + a;\\n\\n    vec2 cosSin = vec2(cos(rot), sin(rot));\\n    dxy = dxy * vec2(float(i - 1) / float(i)) + (cosSin + prevCosSin) / vec2(2 * i);\\n\\n    pathSamples[i] = vec4(dxy * vec2(s) + start.xy, rot, curv);\\n    pathSampleCurvRates[i] = b + s * (2.0 * c + 3.0 * d * s);\\n\\n    s += ds;\\n    prevCosSin = cosSin;\\n  }\\n\\n  return numSamples;\\n}\\n\\n`;\\n\\nconst SAMPLE_QUINTIC_PATH_FN = `\\n\\nint sampleQuinticPath(vec4 start, vec4 end, vec4 quinticPathParams) {\\n  float p0 = start.w;\\n  float p1 = dCurvVehicle;\\n  float p2 = ddCurvVehicle;\\n  float p3 = quinticPathParams.x;\\n  float p4 = quinticPathParams.y;\\n  float p5 = end.w;\\n  float sG = quinticPathParams.z;\\n\\n  if (sG <= 0.0) return 0;\\n\\n  int numSamples = int(ceil(sG / pathSamplingStep)) + 1;\\n\\n  float sG_2 = sG * sG;\\n  float sG_3 = sG_2 * sG;\\n\\n  float a = p0;\\n  float b = p1;\\n  float c = p2 / 2.0;\\n  float d = (-71.875 * p0 + 81.0 * p3 - 10.125 * p4 + p5 - 21.25 * p1 * sG - 2.75 * p2 * sG_2) / sG_3;\\n  float e = (166.5 * p0 - 202.5 * p3 + 40.5 * p4 - 4.5 * p5 + 45.0 * p1 * sG + 4.5 * p2 * sG_2) / (sG_2 * sG_2);\\n  float f = (-95.625 * p0 + 121.5 * p3 - 30.375 * p4 + 4.5 * p5 - 24.75 * p1 * sG - 2.25 * p2 * sG_2) / (sG_2 * sG_3);\\n\\n  pathSamples[0] = start;\\n\\n  float ds = sG / float(numSamples - 1);\\n  float s = ds;\\n  vec2 dxy = vec2(0);\\n  vec2 prevCosSin = vec2(cos(start.z), sin(start.z));\\n\\n  for (int i = 1; i < numSamples; i++) {\\n    float rot = (((((f * s / 6.0 + e / 5.0) * s + d / 4.0) * s + c / 3.0) * s + b / 2.0) * s + a) * s + start.z;\\n    float curv = ((((f * s + e) * s + d) * s + c) * s + b) * s + a;\\n\\n    vec2 cosSin = vec2(cos(rot), sin(rot));\\n    dxy = dxy * vec2(float(i - 1) / float(i)) + (cosSin + prevCosSin) / vec2(2 * i);\\n\\n    pathSamples[i] = vec4(dxy * vec2(s) + start.xy, rot, curv);\\n    pathSampleCurvRates[i] = b + s * (2.0 * c + s * (3.0 * d + s * (4.0 * e + 5.0 * f * s)));\\n\\n    s += ds;\\n    prevCosSin = cosSin;\\n  }\\n\\n  return numSamples;\\n}\\n\\n`;\\n\\nconst NUM_ACCELERATION_PROFILES = 8;\\nconst NUM_VELOCITY_RANGES = 4;\\nconst NUM_TIME_RANGES = 2;\\n\\nconst SHARED_UNIFORMS = {\\n  xyslMap: { type: 'outputTexture' },\\n  slObstacleGrid: { type: 'outputTexture', name: 'slObstacleGridDilated' },\\n  slDynamicObstacleGrid: { type: 'outputTexture', name: 'slDynamicObstacleGrid', textureType: '2DArray' },\\n  accelerationProfiles: { type: 'float', length: 5 },\\n  finalVelocityProfiles: { type: 'float', length: 3 },\\n  xyCenterPoint: { type: 'vec2' },\\n  xyGridCellSize: { type: 'float' },\\n  slCenterPoint: { type: 'vec2' },\\n  slGridCellSize: { type: 'float'},\\n  laneCenterLatitude: { type: 'float'},\\n  laneShoulderLatitude: { type: 'float'},\\n  laneCostSlope: { type: 'float'},\\n  lanePreference: { type: 'float' },\\n  lanePreferenceDiscount: { type: 'float' },\\n  obstacleHazardCost: { type: 'float' },\\n  speedLimit: { type: 'float' },\\n  speedLimitPenalty: { type: 'float' },\\n  hardAccelerationPenalty: { type: 'float' },\\n  hardDecelerationPenalty: { type: 'float' },\\n  softLateralAccelerationLimit: { type: 'float' },\\n  softLateralAccelerationPenalty: { type: 'float' },\\n  linearLateralAccelerationPenalty: { type: 'float' },\\n  dCurvatureMax: { type: 'float' },\\n  pathSamplingStep: { type: 'float' },\\n  rearAxleToCenter: { type: 'float' },\\n  dynamicFrameTime: { type: 'float' }\\n};\\n\\nfunction buildUniformValues(config, xyCenterPoint, slCenterPoint, dynamicFrameTime) {\\n  return {\\n    accelerationProfiles: [3.5, -6.5, 2.0, -3.0, 0],\\n    finalVelocityProfiles: [0.999 * config.speedLimit, 1.0, 0.01],\\n    xyCenterPoint: [xyCenterPoint.x, xyCenterPoint.y],\\n    xyGridCellSize: config.xyGridCellSize,\\n    slCenterPoint: [slCenterPoint.x, slCenterPoint.y],\\n    slGridCellSize: config.slGridCellSize,\\n    laneCenterLatitude: config.laneCenterLatitude,\\n    laneShoulderLatitude: config.laneShoulderLatitude,\\n    laneCostSlope: config.laneCostSlope,\\n    lanePreference: config.lanePreference,\\n    lanePreferenceDiscount: config.lanePreferenceDiscount,\\n    obstacleHazardCost: config.obstacleHazardCost,\\n    speedLimit: config.speedLimit,\\n    speedLimitPenalty: config.speedLimitPenalty,\\n    hardAccelerationPenalty: config.hardAccelerationPenalty,\\n    hardDecelerationPenalty: config.hardDecelerationPenalty,\\n    softLateralAccelerationLimit: config.softLateralAccelerationLimit,\\n    softLateralAccelerationPenalty: config.softLateralAccelerationPenalty,\\n    linearLateralAccelerationPenalty: config.linearLateralAccelerationPenalty,\\n    dCurvatureMax: config.dCurvatureMax,\\n    pathSamplingStep: config.pathSamplingStep,\\n    rearAxleToCenter: config.rearAxleToCenter,\\n    dynamicFrameTime: dynamicFrameTime\\n  };\\n}\\n\\n\\n\\n// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/pathFromVehicleCosts.js\\n\\n\\nfunction fromVehiclePathCostsKernel(pathType) {\\n  return SHARED_SHADER + (pathType == 'cubic' ? SAMPLE_CUBIC_PATH_FN : SAMPLE_QUINTIC_PATH_FN) +\\n\\n`\\n\\n/* Calculate cost of a {cubic|quintic} path from vehicle to (stationConnectivity * numLatitudes * numAccelerations) nodes\\n *   width: numLatitudes\\n *   height: station * numAccelerations\\n */\\nvec4 kernel() {\\n  ivec2 indexes = ivec2(kernelPosition * vec2(kernelSize));\\n\\n  int latitude = indexes.x;\\n  int station = indexes.y / numAccelerations;\\n  int accelerationIndex = int(mod(float(indexes.y), float(numAccelerations)));\\n\\n  vec4 pathStart = vec4(0, 0, 0, curvVehicle);\\n  vec4 pathEnd = texelFetch(lattice, ivec2(latitude, station), 0);\\n\\n  vec4 pathParams = texelFetch(pathsFromVehicle, ivec2(latitude, station), 0);\\n\\n  // If the path didn't converge\\n  if (pathParams.w == 0.0) return vec4(-1);\\n\\n  int numSamples = ${pathType == 'cubic' ? 'sampleCubicPath' : 'sampleQuinticPath'}(pathStart, pathEnd, pathParams);\\n  float pathLength = pathParams.z;\\n\\n  if (numSamples < 2) return vec4(-1);\\n\\n  float averageStaticCost = calculateAverageStaticCost(numSamples);\\n  if (averageStaticCost < 0.0) return vec4(-1);\\n\\n  int slIndex = station * kernelSize.x + latitude;\\n  float hysteresisAdjustment = (slIndex == firstLatticePoint || slIndex == secondLatticePoint) ?  0.0 : hysteresisDiscount;\\n  averageStaticCost += hysteresisAdjustment;\\n\\n  vec3 avt = calculateAVT(accelerationIndex, velocityVehicle, 0.0, pathLength);\\n  float acceleration = avt.x;\\n  float finalVelocity = avt.y;\\n  float finalTime = avt.z;\\n\\n  float averageDynamicCost = calculateAverageDynamicCost(numSamples, pathLength, 0.0, velocityVehicle, acceleration, 1.0 / 0.0);\\n  if (averageDynamicCost < 0.0) return vec4(-1);\\n\\n  averageDynamicCost += accelerationChangePenalty;\\n\\n  // The cost of a trajectory is the average sample cost scaled by the path length\\n  float totalCost = (averageStaticCost + averageDynamicCost + ${pathType == 'cubic' ? '(cubicPathPenalty * velocityVehicle * velocityVehicle)' : '0.0'}) * pathLength;\\n  ${pathType != 'cubic' ? 'totalCost = -1.0;' : ''}\\n\\n  return vec4(totalCost, finalVelocity, finalTime, ${pathType == 'cubic' ? '-2' : '-1'});\\n}\\n\\n`;\\n}\\n\\n/* harmony default export */ var pathFromVehicleCosts = ({\\n  setUp() {\\n    return [\\n      {\\n        kernel: fromVehiclePathCostsKernel('cubic'),\\n        output: { name: 'cubicPathFromVehicleCosts' },\\n        uniforms: Object.assign({}, SHARED_UNIFORMS, {\\n          lattice: { type: 'sharedTexture' },\\n          pathsFromVehicle: { type: 'outputTexture', name: 'cubicPathsFromVehicle' },\\n          firstLatticePoint: { type: 'int' },\\n          secondLatticePoint: { type: 'int' },\\n          velocityVehicle: { type: 'float' },\\n          curvVehicle: { type: 'float' },\\n          numAccelerations: { type: 'int' },\\n          cubicPathPenalty: { type: 'float' },\\n          hysteresisDiscount: { type: 'float' },\\n          accelerationChangePenalty: { type: 'float' }\\n        })\\n      },\\n      {\\n        kernel: fromVehiclePathCostsKernel('quintic'),\\n        output: { name: 'quinticPathFromVehicleCosts' },\\n        uniforms: Object.assign({}, SHARED_UNIFORMS, {\\n          lattice: { type: 'sharedTexture' },\\n          pathsFromVehicle: { type: 'outputTexture', name: 'quinticPathsFromVehicle' },\\n          firstLatticePoint: { type: 'int' },\\n          secondLatticePoint: { type: 'int' },\\n          velocityVehicle: { type: 'float' },\\n          curvVehicle: { type: 'float' },\\n          dCurvVehicle: { type: 'float' },\\n          ddCurvVehicle: { type: 'float' },\\n          numAccelerations: { type: 'int' },\\n          hysteresisDiscount: { type: 'float' },\\n          accelerationChangePenalty: { type: 'float' }\\n        })\\n      }\\n    ];\\n  },\\n\\n  update(config, pose, xyCenterPoint, slCenterPoint, firstLatticePoint, secondLatticePoint, dynamicFrameTime) {\\n    return [\\n      {\\n        width: config.lattice.numLatitudes,\\n        height: config.lattice.stationConnectivity * NUM_ACCELERATION_PROFILES,\\n        uniforms: Object.assign({}, buildUniformValues(config, xyCenterPoint, slCenterPoint, dynamicFrameTime), {\\n          firstLatticePoint: firstLatticePoint,\\n          secondLatticePoint: secondLatticePoint,\\n          velocityVehicle: pose.velocity,\\n          curvVehicle: pose.curv,\\n          numAccelerations: NUM_ACCELERATION_PROFILES,\\n          cubicPathPenalty: config.cubicPathPenalty,\\n          hysteresisDiscount: config.hysteresisDiscount,\\n          accelerationChangePenalty: config.accelerationChangePenalty\\n        })\\n      },\\n      {\\n        width: config.lattice.numLatitudes,\\n        height: config.lattice.stationConnectivity * NUM_ACCELERATION_PROFILES,\\n        uniforms: Object.assign({}, buildUniformValues(config, xyCenterPoint, slCenterPoint, dynamicFrameTime), {\\n          firstLatticePoint: firstLatticePoint,\\n          secondLatticePoint: secondLatticePoint,\\n          velocityVehicle: pose.velocity,\\n          curvVehicle: pose.curv,\\n          dCurvVehicle: pose.dCurv,\\n          ddCurvVehicle: pose.ddCurv,\\n          numAccelerations: NUM_ACCELERATION_PROFILES,\\n          hysteresisDiscount: config.hysteresisDiscount,\\n          accelerationChangePenalty: config.accelerationChangePenalty\\n        })\\n      }\\n    ];\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/graphSearch.js\\n/* State Lattice Cost Map\\n * \\n * 5-dimensional node: station, latitude, acceleration profile, velocity, time\\n *\\n * A draw call per station s\\n *   * Input to kernel: latitude l, acceleration profile a, velocity range v, time range t\\n *   * Find all SL vertices that can connect to this node\\n *   * For each of those vertices, check if any terminate in this specific velocity and time range\\n *     * Based on initial velocity, initial time, and acceleration\\n *     * Each connected SL vertex should have a * v * t nodes that could possibly terminate at this node\\n *   * For all valid edges, find the one with the lowest cost\\n *\\n * Input:\\n *   * 2D texture array cost map\\n *     * Height: num of latitudes (~20)\\n *     * Width: num of acceleration profiles * num of time ranges * num of velocity ranges (8 * 2 * 4 = ~64)\\n *       * A flattened 3D array:\\n *         d1: acceleration\\n *         d2: velocity\\n *         d3: time\\n *     * Layer: num of stations (~10)\\n *   \\n * Output:\\n *   * 2D texture slice of the next station in the input 2D texture array cost map\\n *\\n * Cost Map Elements:\\n *   * Traversal cost so far\\n *   * Ending velocity\\n *   * Ending time\\n *   * Index of parent node\\n *\\n * Since one cubic path can be shared between multiple trajectories, they need to be pre-optimized.\\n *\\n * Quintic Paths:\\n *   Stations 0 through (numStations - 1) correspond to the stations on the lattice; however,\\n *   a new station (station -1) will be used to signifiy the single vehicle pose node. Either\\n *   a cubic path or quintic path can be used to connect this single node to the lattice\\n *   (depending on vehicle velocity). At station -1, latitude 0 will correspond to a cubic path,\\n *   and latitude 1 will correspond to a quintic path. All other latitudes will be skipped.\\n */\\n\\n\\n\\nconst SOLVE_STATION_KERNEL =\\n  SHARED_SHADER +\\n  SAMPLE_CUBIC_PATH_FN +\\n  SAMPLE_QUINTIC_PATH_FN +\\n\\n`\\n\\nvec4 kernel() {\\n  ivec2 indexes = ivec2(kernelPosition * vec2(kernelSize));\\n\\n  int latitude = indexes.y;\\n\\n  int numPerTime = numAccelerations * numVelocities;\\n  int timeIndex = indexes.x / numPerTime;\\n  indexes.x -= timeIndex * numPerTime;\\n  int velocityIndex = indexes.x / numAccelerations;\\n  int accelerationIndex = int(mod(float(indexes.x), float(numAccelerations)));\\n\\n  int minLatitude = max(latitude - latitudeConnectivity / 2, 0);\\n  int maxLatitude = min(latitude + latitudeConnectivity / 2, numLatitudes - 1);\\n\\n  int slIndex = station * numLatitudes + latitude;\\n\\n  vec4 pathEnd = texelFetch(lattice, ivec2(latitude, station), 0);\\n\\n  float minVelocity = velocityRanges[velocityIndex];\\n  float maxVelocity = velocityRanges[velocityIndex + 1];\\n\\n  float minTime = timeRanges[timeIndex];\\n  float maxTime = timeRanges[timeIndex + 1];\\n\\n  vec4 bestTrajectory = vec4(-1); // -1 means infinite cost\\n  float bestTerminalCost = 1.0 / 0.0;\\n\\n  float hysteresisAdjustment = (slIndex == firstLatticePoint || slIndex == secondLatticePoint) ?  0.0 : hysteresisDiscount;\\n\\n  for (int prevStation = max(station - stationConnectivity, 0); prevStation < station; prevStation++) {\\n    int stationConnectivityIndex = prevStation - station + stationConnectivity;\\n\\n    for (int prevLatitude = minLatitude; prevLatitude <= maxLatitude; prevLatitude++) {\\n      int latitudeConnectivityIndex = prevLatitude - latitude + latitudeConnectivity / 2;\\n      int connectivityIndex = stationConnectivityIndex * latitudeConnectivity + latitudeConnectivityIndex;\\n\\n      vec4 pathStart = texelFetch(lattice, ivec2(prevLatitude, prevStation), 0);\\n      vec4 cubicPathParams = texelFetch(cubicPaths, ivec2(slIndex, connectivityIndex), 0);\\n\\n      // If the path didn't converge\\n      if (cubicPathParams.w == 0.0) continue;\\n\\n      int numSamples = sampleCubicPath(pathStart, pathEnd, cubicPathParams);\\n      float pathLength = cubicPathParams.z;\\n\\n      if (numSamples < 2) continue;\\n\\n      float averageStaticCost = calculateAverageStaticCost(numSamples);\\n      if (averageStaticCost < 0.0) continue;\\n\\n      averageStaticCost += hysteresisAdjustment;\\n\\n      if (averageStaticCost * pathLength >= bestTerminalCost) continue;\\n\\n      for (int prevVelocity = 0; prevVelocity < numVelocities; prevVelocity++) {\\n        for (int prevTime = 0; prevTime < numTimes; prevTime++) {\\n          for (int prevAccel = 0; prevAccel < numAccelerations; prevAccel++) {\\n            int avtIndex = prevTime * numPerTime + prevVelocity * numAccelerations + prevAccel;\\n\\n            // Cost table entry:\\n            //   x: cost so far\\n            //   y: end velocity\\n            //   z: end time\\n            //   w: parent index\\n            vec4 costTableEntry = texelFetch(costTable, ivec3(avtIndex, prevLatitude, prevStation), 0);\\n\\n            // If cost entry is infinity\\n            if (costTableEntry.x < 0.0 || averageStaticCost * pathLength + costTableEntry.x >= bestTerminalCost) continue;\\n\\n            vec3 avt = calculateAVT(accelerationIndex, costTableEntry.y, costTableEntry.z, pathLength);\\n            float acceleration = avt.x;\\n            float finalVelocity = avt.y;\\n            float finalTime = avt.z;\\n\\n            if (averageStaticCost * pathLength + costTableEntry.x + extraTimePenalty * finalTime >= bestTerminalCost) continue;\\n\\n            // If the calculated final velocity does not match this fragment's velocity range, then skip this trajectory\\n            if (finalVelocity < minVelocity || finalVelocity >= maxVelocity) continue;\\n\\n            // If the calculated final time does not match this fragment's time range, then skip this trajectory\\n            if (finalTime < minTime || finalTime >= maxTime) continue;\\n\\n            float abandonThreshold = (bestTerminalCost - extraTimePenalty * finalTime - costTableEntry.x) / pathLength - averageStaticCost;\\n            float averageDynamicCost = calculateAverageDynamicCost(numSamples, pathLength, costTableEntry.z, costTableEntry.y, acceleration, abandonThreshold);\\n            if (averageDynamicCost < 0.0) continue;\\n\\n            if (accelerationIndex != prevAccel)\\n              averageDynamicCost += accelerationChangePenalty;\\n\\n            // The cost of a trajectory is the average sample cost scaled by the path length\\n            float totalCost = (averageStaticCost + averageDynamicCost) * pathLength + costTableEntry.x;\\n\\n            float terminalCost = totalCost + extraTimePenalty * finalTime;\\n            if (terminalCost >= bestTerminalCost) continue;\\n            bestTerminalCost = terminalCost;\\n\\n            int incomingIndex = avtIndex + numPerTime * numTimes * (prevLatitude + numLatitudes * prevStation);\\n            bestTrajectory = vec4(totalCost, finalVelocity, finalTime, incomingIndex);\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  if (station < stationConnectivity) {\\n    ivec2 slaIndex = ivec2(latitude, station * numAccelerations + accelerationIndex);\\n\\n    vec4 costTableEntry = texelFetch(cubicPathFromVehicleCosts, slaIndex, 0);\\n    float terminalCost;\\n\\n    if (costTableEntry.x >= 0.0) {\\n      terminalCost = costTableEntry.x + extraTimePenalty * costTableEntry.z;\\n\\n      if (terminalCost < bestTerminalCost) {\\n        bestTerminalCost = terminalCost;\\n        bestTrajectory = costTableEntry;\\n      }\\n    }\\n\\n    costTableEntry = texelFetch(quinticPathFromVehicleCosts, slaIndex, 0);\\n\\n    if (costTableEntry.x >= 0.0) {\\n      terminalCost = costTableEntry.x + extraTimePenalty * costTableEntry.z;\\n\\n      if (terminalCost < bestTerminalCost) {\\n        bestTerminalCost = terminalCost;\\n        bestTrajectory = costTableEntry;\\n      }\\n    }\\n  }\\n\\n  return bestTrajectory;\\n}\\n\\n`;\\n\\n/* harmony default export */ var graphSearch = ({\\n  setUp() {\\n    return {\\n      kernel: SOLVE_STATION_KERNEL,\\n      output: { name: 'graphSearch' },\\n      uniforms: Object.assign({}, SHARED_UNIFORMS, {\\n        lattice: { type: 'sharedTexture' },\\n        costTable: { type: 'sharedTexture', textureType: '2DArray' },\\n        cubicPaths: { type: 'outputTexture' },\\n        cubicPathFromVehicleCosts: { type: 'outputTexture' },\\n        quinticPathFromVehicleCosts: { type: 'outputTexture' },\\n        firstLatticePoint: { type: 'int' },\\n        secondLatticePoint: { type: 'int' },\\n        velocityVehicle: { type: 'float' },\\n        curvVehicle: { type: 'float' },\\n        dCurvVehicle: { type: 'float' },\\n        ddCurvVehicle: { type: 'float' },\\n        extraTimePenalty: { type: 'float' },\\n        hysteresisDiscount: { type: 'float' },\\n        accelerationChangePenalty: { type: 'float' },\\n        numStations: { type: 'int' },\\n        numLatitudes: { type: 'int' },\\n        numAccelerations: { type: 'int' },\\n        numVelocities: { type: 'int' },\\n        numTimes: { type: 'int' },\\n        stationConnectivity: { type: 'int' },\\n        latitudeConnectivity: { type: 'int' },\\n        velocityRanges: { type: 'float', length: NUM_VELOCITY_RANGES + 1 },\\n        timeRanges: { type: 'float', length: NUM_TIME_RANGES + 1 },\\n        station: { type: 'int' } // Updated in `drawProxy`\\n      }),\\n      drawProxy: (gpgpu, program, draw) => {\\n        const width = NUM_ACCELERATION_PROFILES * NUM_VELOCITY_RANGES * NUM_TIME_RANGES;\\n        const height = program.meta.lattice.numLatitudes;\\n        const costTable = new Float32Array(width * height * program.meta.lattice.numStations * 4);\\n\\n        for (let s = 0; s < program.meta.lattice.numStations; s++) {\\n          gpgpu.updateProgramUniforms(program, { station: s });\\n          draw();\\n\\n          gpgpu.gl.readPixels(0, 0, width, height, gpgpu.gl.RGBA, gpgpu.gl.FLOAT, costTable, s * width * height * 4);\\n\\n          gpgpu.gl.bindTexture(gpgpu.gl.TEXTURE_2D_ARRAY, gpgpu.sharedTextures.costTable);\\n          gpgpu.gl.copyTexSubImage3D(gpgpu.gl.TEXTURE_2D_ARRAY, 0, 0, 0, s, 0, 0, width, height);\\n        }\\n\\n        gpgpu._graphSearchCostTable = costTable;\\n      }\\n    };\\n  },\\n\\n  update(config, pose, xyCenterPoint, slCenterPoint, firstLatticePoint, secondLatticePoint, dynamicFrameTime) {\\n    return {\\n      width: NUM_ACCELERATION_PROFILES * NUM_VELOCITY_RANGES * NUM_TIME_RANGES,\\n      height: config.lattice.numLatitudes,\\n      meta: {\\n        lattice: config.lattice\\n      },\\n      uniforms: Object.assign({}, buildUniformValues(config, xyCenterPoint, slCenterPoint, dynamicFrameTime), {\\n        firstLatticePoint: firstLatticePoint,\\n        secondLatticePoint: secondLatticePoint,\\n        velocityVehicle: pose.velocity,\\n        curvVehicle: pose.curv,\\n        dCurvVehicle: pose.dCurv,\\n        ddCurvVehicle: pose.ddCurv,\\n        extraTimePenalty: config.extraTimePenalty,\\n        hysteresisDiscount: config.hysteresisDiscount,\\n        accelerationChangePenalty: config.accelerationChangePenalty,\\n        numStations: config.lattice.numStations,\\n        numLatitudes: config.lattice.numLatitudes,\\n        numAccelerations: NUM_ACCELERATION_PROFILES,\\n        numVelocities: NUM_VELOCITY_RANGES,\\n        numTimes: NUM_TIME_RANGES,\\n        stationConnectivity: config.lattice.stationConnectivity,\\n        latitudeConnectivity: config.lattice.latitudeConnectivity,\\n        velocityRanges: [0, config.speedLimit / 3, config.speedLimit * 2 / 3, config.speedLimit, 1000000],\\n        timeRanges: [0, 10, 1000000]\\n      })\\n    };\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/xyObstacleCostGrid.js\\nconst XY_OBSTACLE_COST_KERNEL = `\\n\\nvec4 kernel() {\\n  vec2 xy = (kernelPosition - 0.5) * vec2(kernelSize) * vec2(xyGridCellSize) + xyCenterPoint;\\n\\n  vec2 xyTexCoords = (xy - xyCenterPoint) / vec2(textureSize(xyslMap, 0)) / vec2(xyGridCellSize) + 0.5;\\n  vec2 sl = texture(xyslMap, xyTexCoords).xy;\\n\\n  vec2 slTexCoords = (sl - slCenterPoint) / vec2(textureSize(slObstacleGrid, 0)) / vec2(slGridCellSize) + 0.5;\\n  return texture(slObstacleGrid, slTexCoords);\\n}\\n\\n`;\\n\\n// Build XY obstacle costs using XYSL map\\n/* harmony default export */ var xyObstacleCostGrid = ({\\n  setUp() {\\n    return {\\n      kernel: XY_OBSTACLE_COST_KERNEL,\\n      output: { name: 'xyObstacleCostGrid', read: true },\\n      uniforms: {\\n        xyslMap: { type: 'outputTexture' },\\n        slObstacleGrid: { type: 'outputTexture', name: 'slObstacleGridDilated' },\\n        xyCenterPoint: { type: 'vec2' },\\n        xyGridCellSize: { type: 'float'},\\n        slCenterPoint: { type: 'vec2' },\\n        slGridCellSize: { type: 'float'}\\n      }\\n    };\\n  },\\n\\n  update(config, xyWidth, xyHeight, xyCenterPoint, slCenterPoint) {\\n    return {\\n      width: xyWidth,\\n      height: xyHeight,\\n      uniforms: {\\n        xyCenterPoint: [xyCenterPoint.x, xyCenterPoint.y],\\n        xyGridCellSize: config.xyGridCellSize,\\n        slCenterPoint: [slCenterPoint.x, slCenterPoint.y],\\n        slGridCellSize: config.slGridCellSize\\n      }\\n    };\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./js/autonomy/path-planning/PathPlanner.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nconst PathPlanner_NUM_ACCELERATION_PROFILES = 8;\\nconst PathPlanner_NUM_VELOCITY_RANGES = 4;\\nconst PathPlanner_NUM_TIME_RANGES = 2;\\n\\n/* Obstacle cost map:\\n *\\n * 1. Rasterize triangles from polygonal obstacles into XY-space occupancy grid\\n * 2. Convert occupancy grid to SL-space\\n *    * Width is spatial horizon of the state lattice\\n *    * Height is lane width\\n *    * Resolution should be higher than XY-grid\\n *    * Get XY position from centerline texture\\n *    * Lookup XY in XY occupancy grid (nearest)\\n * 3. Dilate SL-space grid using two passes (along station, then along latitude)\\n *    * collision area: half car size + 0.3m\\n *    * high cost area: 1 meter\\n * 4. Convert back to XY-space using XYSL map\\n */\\n\\nclass PathPlanner_PathPlanner {\\n  constructor() {\\n    this.previousStartStation = null;\\n    this.previousFirstLatticePoint = -1;\\n    this.previousSecondLatticePoint = -1;\\n    this.previousFirstAcceleration = -1;\\n    this.previousSecondLatticePoint = -1;\\n\\n    let start = performance.now();\\n    const programs = [\\n      xyObstacleGrid.setUp(),\\n      slObstacleGrid.setUp(),\\n      ...slObstacleGridDilation.setUp(),\\n      slDynamicObstacleGrid.setUp(),\\n      xyslMap.setUp(),\\n      ...optimizeCubicPaths.setUp(),\\n      optimizeQuinticPaths.setUp(),\\n      ...pathFromVehicleCosts.setUp(),\\n      graphSearch.setUp(),\\n    ].map(p => Object.assign({}, p, { width: 1, height: 1 }));\\n\\n    this.gpgpu = new GPGPU[\\\"a\\\" /* default */](programs);\\n  }\\n\\n  reset() {\\n    this.previousStartStation = null;\\n    this.previousFirstLatticePoint = -1;\\n    this.previousSecondLatticePoint = -1;\\n    this.previousFirstAcceleration = -1;\\n    this.previousSecondLatticePoint = -1;\\n  }\\n\\n  plan(vehiclePose, vehicleStation, lanePath, startTime, staticObstacles, dynamicObstacles) {\\n    const latticeStationInterval = this._latticeStationInterval();\\n\\n    const centerlineRaw = lanePath.sampleStations(vehicleStation, Math.ceil((this.config.spatialHorizon + latticeStationInterval) / this.config.centerlineStationInterval) + 1, this.config.centerlineStationInterval);\\n\\n    // Transform all centerline points into vehicle frame\\n    const vehicleXform = vehicleTransform(vehiclePose);\\n    const centerline = centerlineRaw.map(c => { return { pos: c.pos.clone().applyMatrix3(vehicleXform), rot: c.rot - vehiclePose.rot, curv: c.curv } });\\n\\n    const centerlineData = new Float32Array(centerline.length * 3);\\n    const maxPoint = new THREE.Vector2(0, 0);\\n    const minPoint = new THREE.Vector2(0, 0);\\n\\n    for (let i = 0; i < centerline.length; i++) {\\n      const sample = centerline[i];\\n      const pos = sample.pos;\\n      centerlineData[i * 3 + 0] = pos.x;\\n      centerlineData[i * 3 + 1] = pos.y;\\n      centerlineData[i * 3 + 2] = sample.rot;\\n\\n      maxPoint.max(pos);\\n      minPoint.min(pos);\\n    }\\n\\n    const diff = maxPoint.clone().sub(minPoint);\\n    const xyCenterPoint = minPoint.clone().add(maxPoint).divideScalar(2);\\n\\n    // Sizes of the xy grids (in pixels, not meters)\\n    const xyWidth = Math.ceil((diff.x + this.config.gridMargin * 2) / this.config.xyGridCellSize);\\n    const xyHeight = Math.ceil((diff.y + this.config.gridMargin * 2) / this.config.xyGridCellSize);\\n\\n    const stationWidth = this.config.spatialHorizon + latticeStationInterval * 2;\\n    const slCenterPoint = new THREE.Vector2(this.config.spatialHorizon / 2, 0);\\n\\n    // Sizes of the sl grids (in pixels, not meters)\\n    const slWidth = Math.ceil(stationWidth / this.config.slGridCellSize);\\n    const slHeight = Math.ceil((this.config.roadWidth + this.config.gridMargin * 2) / this.config.slGridCellSize);\\n\\n    let startStation;\\n\\n    if (this.previousStartStation === null || vehicleStation + latticeStationInterval / 2 > this.previousStartStation) {\\n      startStation = (this.previousStartStation === null ? vehicleStation : this.previousStartStation) + latticeStationInterval;\\n      this.previousStartStation = startStation;\\n      this.previousFirstLatticePoint -= this.config.lattice.numLatitudes;\\n      this.previousSecondLatticePoint -= this.config.lattice.numLatitudes;\\n    } else {\\n      startStation = this.previousStartStation;\\n    }\\n\\n    const lattice = this._buildLattice(lanePath, startStation, vehiclePose.rot, vehicleXform);\\n\\n    const temporalHorizon = this.config.spatialHorizon / this.config.speedLimit;\\n    const dynamicFrameTime = temporalHorizon / this.config.numDynamicFrames;\\n\\n    for (const [i, p] of [\\n      xyObstacleGrid.update(this.config, xyWidth, xyHeight, xyCenterPoint, vehicleXform, staticObstacles),\\n      slObstacleGrid.update(this.config, slWidth, slHeight, slCenterPoint, xyCenterPoint),\\n      ...slObstacleGridDilation.update(this.config, slWidth, slHeight),\\n      slDynamicObstacleGrid.update(this.config, slWidth, slHeight, slCenterPoint, vehicleStation, startTime, dynamicFrameTime, dynamicObstacles),\\n      xyslMap.update(this.config, xyWidth, xyHeight, xyCenterPoint),\\n      ...optimizeCubicPaths.update(this.config, vehiclePose),\\n      optimizeQuinticPaths.update(this.config, vehiclePose),\\n      ...pathFromVehicleCosts.update(this.config, vehiclePose, xyCenterPoint, slCenterPoint, this.previousFirstLatticePoint, this.previousSecondLatticePoint, dynamicFrameTime),\\n      graphSearch.update(this.config, vehiclePose, xyCenterPoint, slCenterPoint, this.previousFirstLatticePoint, this.previousSecondLatticePoint, dynamicFrameTime)\\n    ].entries()) {\\n      this.gpgpu.updateProgram(i, p);\\n    }\\n\\n    this.gpgpu.updateSharedTextures({\\n      centerline: {\\n        width: centerline.length,\\n        height: 1,\\n        channels: 3,\\n        filter: 'linear',\\n        data: centerlineData\\n      },\\n      costTable: {\\n        width: PathPlanner_NUM_ACCELERATION_PROFILES * PathPlanner_NUM_VELOCITY_RANGES * PathPlanner_NUM_TIME_RANGES,\\n        height: this.config.lattice.numLatitudes,\\n        depth: this.config.lattice.numStations,\\n        channels: 4,\\n        textureType: '2DArray'\\n      },\\n      lattice: {\\n        width: this.config.lattice.numLatitudes,\\n        height: this.config.lattice.numStations,\\n        channels: 4,\\n        data: lattice\\n      }\\n    });\\n\\n    this.gpgpu._graphSearchCostTable = null;\\n    this.gpgpu._dynamicObstacleGrid = null;\\n\\n    let start = performance.now();\\n    const outputs = this.gpgpu.run();\\n    const costTable = this.gpgpu._graphSearchCostTable;\\n    const cubicPathParams = outputs[6];\\n    const cubicPathFromVehicleParams = outputs[7];\\n    const quinticPathFromVehicleParams = outputs[8];\\n\\n    let bestEntry = [Number.POSITIVE_INFINITY];\\n    let bestEntryIndex;\\n    const numEntries = costTable.length / 4;\\n\\n    for (let i = 0; i < numEntries; i++) {\\n      const entryUnpacked = this._unpackCostTableIndex(i);\\n      const entry = [\\n        costTable[i * 4],\\n        costTable[i * 4 + 1],\\n        costTable[i * 4 + 2],\\n        costTable[i * 4 + 3]\\n      ];\\n\\n      if (entry[0] < 0) continue;\\n\\n      entry[0] += this._terminalCost(entryUnpacked, entry);\\n\\n      if (entry[0] < bestEntry[0]) {\\n        bestEntryIndex = i;\\n        bestEntry = entry;\\n      }\\n    }\\n\\n    const inverseVehicleXform = (new THREE.Matrix3()).getInverse(vehicleXform);\\n    let bestTrajectory = null;\\n    let fromVehicleSegment = null;\\n    let fromVehicleParams = null;\\n    let firstLatticePoint = -1;\\n    let firstAcceleration = -1;\\n    let secondLatticePoint = -1;\\n    let secondAcceleration = -1;\\n\\n    if (isFinite(bestEntry[0])) {\\n      [bestTrajectory, fromVehicleSegment, fromVehicleParams, firstLatticePoint, firstAcceleration, secondLatticePoint, secondAcceleration] = this._reconstructTrajectory(\\n        bestEntryIndex,\\n        costTable,\\n        cubicPathParams,\\n        cubicPathFromVehicleParams,\\n        quinticPathFromVehicleParams,\\n        vehiclePose,\\n        lattice\\n      );\\n\\n      fromVehicleSegment.forEach(p => {\\n        p.pos = p.pos.applyMatrix3(inverseVehicleXform);\\n        p.rot += vehiclePose.rot;\\n      });\\n\\n      bestTrajectory.forEach(p => {\\n        p.pos = p.pos.applyMatrix3(inverseVehicleXform);\\n        p.rot += vehiclePose.rot;\\n      });\\n    }\\n\\n    this.previousFirstLatticePoint = firstLatticePoint;\\n    this.previousFirstAcceleration = firstAcceleration;\\n    this.previousSecondLatticePoint = secondLatticePoint;\\n    this.previousSecondAcceleration = secondAcceleration;\\n\\n    return {\\n      path: bestTrajectory,\\n      fromVehicleSegment: fromVehicleSegment,\\n      fromVehicleParams: fromVehicleParams,\\n      latticeStartStation: this.previousStartStation,\\n      dynamicObstacleGrid: { data: this.gpgpu._dynamicObstacleGrid, width: slWidth, height: slHeight }\\n    };\\n  }\\n\\n  _buildLattice(lanePath, startStation, vehicleRot, vehicleXform) {\\n    const centerline = lanePath.sampleStations(startStation, this.config.lattice.numStations, this._latticeStationInterval());\\n    const offset = Math.floor(this.config.lattice.numLatitudes / 2);\\n    const lattice = new Float32Array(this.config.lattice.numStations * this.config.lattice.numLatitudes * 4);\\n    let index = 0;\\n\\n    for (let s = 0; s < centerline.length; s++) {\\n      const sample = centerline[s];\\n\\n      for (let l = 0; l < this.config.lattice.numLatitudes; l++) {\\n        const latitude = (l - offset) / offset * this.config.roadWidth / 2;\\n        const rot = sample.rot - vehicleRot;\\n        const pos = THREE.Vector2.fromAngle(rot + Math.PI / 2).multiplyScalar(latitude).add(sample.pos.clone().applyMatrix3(vehicleXform));\\n        const curv = sample.curv == 0 ? 0 : 1 / (1 / sample.curv - latitude);\\n\\n        lattice[index++] = pos.x;\\n        lattice[index++] = pos.y;\\n        lattice[index++] = rot;\\n        lattice[index++] = curv;\\n      }\\n    }\\n\\n    return lattice;\\n  }\\n\\n  _latticeStationInterval() {\\n    return this.config.spatialHorizon / this.config.lattice.numStations;\\n  }\\n\\n  _terminalCost([stationIndex, latitudeIndex, timeIndex, velocityIndex, accelerationIndex], [cost, finalVelocity, finalTime, incomingIndex]) {\\n    // Only consider vertices that reach the end of the spatial or temporal horizon\\n    if (stationIndex != this.config.lattice.numStations - 1 && finalVelocity > 0.05)\\n      return Number.POSITIVE_INFINITY;\\n\\n    const station = (this.config.spatialHorizon / this.config.lattice.numStations) * (stationIndex + 1);\\n\\n    return station * -this.config.stationReachDiscount + finalTime * this.config.extraTimePenalty;\\n  }\\n\\n  _unpackCostTableIndex(index) {\\n    if (index < 0) return [-1, index + 2, null, null, null];\\n\\n    const numPerTime = PathPlanner_NUM_ACCELERATION_PROFILES * PathPlanner_NUM_VELOCITY_RANGES;\\n    const numPerLatitude = numPerTime * PathPlanner_NUM_TIME_RANGES;\\n    const numPerStation = this.config.lattice.numLatitudes * numPerLatitude;\\n\\n    const stationIndex = Math.floor(index / numPerStation);\\n    index -= stationIndex * numPerStation;\\n\\n    const latitudeIndex = Math.floor(index / numPerLatitude);\\n    index -= latitudeIndex * numPerLatitude;\\n\\n    const timeIndex = Math.floor(index / numPerTime);\\n    index -= timeIndex * numPerTime;\\n\\n    const velocityIndex = Math.floor(index / PathPlanner_NUM_ACCELERATION_PROFILES);\\n    const accelerationIndex = index % PathPlanner_NUM_ACCELERATION_PROFILES;\\n\\n    return [stationIndex, latitudeIndex, timeIndex, velocityIndex, accelerationIndex];\\n  }\\n\\n  _reconstructTrajectory(index, costTable, cubicPathParams, cubicPathFromVehicleParams, quinticPathFromVehicleParams, vehiclePose, lattice) {\\n    let unpacked = this._unpackCostTableIndex(index);\\n    unpacked.push(costTable[index * 4 + 1]);\\n    const nodes = [unpacked];\\n\\n    let count = 0;\\n    while (unpacked[0] >= 0 && count++ < 100) {\\n      index = costTable[index * 4 + 3];\\n      unpacked = this._unpackCostTableIndex(index);\\n\\n      const finalVelocity = unpacked[0] >= 0 ? costTable[index * 4 + 1] : vehiclePose.velocity;\\n      unpacked.push(finalVelocity);\\n\\n      nodes.unshift(unpacked);\\n    }\\n    if (count >= 100) throw new Error('Infinite loop encountered while reconstructing trajectory.');\\n\\n    const points = [];\\n    let fromVehicleSegment = [];\\n    let fromVehicleParams = null;\\n\\n    for (let i = 0; i < nodes.length - 1; i++) {\\n      const [prevStation, prevLatitude, _pt, _pv, _pa, prevVelocity] = nodes[i];\\n      const [station, latitude, _t, _v, _a, velocity] = nodes[i + 1];\\n\\n      let length;\\n      let pathBuilder;\\n\\n      if (prevStation < 0) {\\n        const start = {\\n          pos: new THREE.Vector2(0, 0),\\n          rot: 0,\\n          curv: vehiclePose.curv\\n        };\\n\\n        const endIndex = (station * this.config.lattice.numLatitudes + latitude) * 4;\\n        const end = {\\n          pos: new THREE.Vector2(lattice[endIndex], lattice[endIndex + 1]),\\n          rot: lattice[endIndex + 2],\\n          curv: lattice[endIndex + 3]\\n        };\\n\\n        if (prevLatitude == 0) { // Cubic path from vehicle to lattice node\\n          length = cubicPathFromVehicleParams[endIndex + 2];\\n\\n          const params = {\\n            p1: cubicPathFromVehicleParams[endIndex],\\n            p2: cubicPathFromVehicleParams[endIndex + 1],\\n            sG: length\\n          };\\n\\n          pathBuilder = new CubicPath[\\\"a\\\" /* default */](start, end, params);\\n\\n          fromVehicleParams = { type: 'cubic', params: params };\\n        } else { // Quintic path from vehicle to lattice node\\n          length = quinticPathFromVehicleParams[endIndex + 2];\\n\\n          const params = {\\n            p3: quinticPathFromVehicleParams[endIndex],\\n            p4: quinticPathFromVehicleParams[endIndex + 1],\\n            sG: length\\n          };\\n\\n          pathBuilder = new QuinticPath(start, end, params);\\n\\n          fromVehicleParams = { type: 'quintic', params: params };\\n        }\\n      } else {\\n        const startIndex = (prevStation * this.config.lattice.numLatitudes + prevLatitude) * 4;\\n        const endIndex = (station * this.config.lattice.numLatitudes + latitude) * 4;\\n\\n        const start = {\\n          pos: new THREE.Vector2(lattice[startIndex], lattice[startIndex + 1]),\\n          rot: lattice[startIndex + 2],\\n          curv: lattice[startIndex + 3]\\n        };\\n\\n        const end = {\\n          pos: new THREE.Vector2(lattice[endIndex], lattice[endIndex + 1]),\\n          rot: lattice[endIndex + 2],\\n          curv: lattice[endIndex + 3]\\n        };\\n\\n        const slIndex = station * this.config.lattice.numLatitudes + latitude;\\n        const connectivityIndex = (prevStation - station + this.config.lattice.stationConnectivity) * this.config.lattice.latitudeConnectivity + prevLatitude - latitude + Math.floor(this.config.lattice.latitudeConnectivity / 2);\\n        const cubicPathIndex = (connectivityIndex * this.config.lattice.numStations * this.config.lattice.numLatitudes + slIndex) * 4;\\n\\n        length = cubicPathParams[cubicPathIndex + 2];\\n\\n        pathBuilder = new CubicPath[\\\"a\\\" /* default */](start, end, {\\n          p1: cubicPathParams[cubicPathIndex],\\n          p2: cubicPathParams[cubicPathIndex + 1],\\n          sG: length\\n        });\\n      }\\n\\n      const path = pathBuilder.buildPath(Math.ceil(length / 0.25));\\n\\n      const prevVelocitySq = prevVelocity * prevVelocity;\\n      const accel = (velocity * velocity - prevVelocitySq) / 2 / length;\\n      const ds = length / (path.length - 1);\\n      let s = 0;\\n\\n      for (let p = 0; p < path.length; p++) {\\n        path[p].velocity = Math.sqrt(2 * accel * s + prevVelocitySq);\\n        path[p].acceleration = accel;\\n        s += ds;\\n      }\\n\\n      if (prevStation < 0) {\\n        fromVehicleSegment = path;\\n      } else {\\n        if (i > 0) path.shift();\\n        points.push(...path);\\n      }\\n    }\\n\\n    let firstLatticePoint = null\\n    let firstAcceleration = null;\\n    let secondLatticePoint = null;\\n    let secondAcceleration = null;\\n\\n    if (nodes.length >= 2) {\\n      firstLatticePoint = nodes[1][0] * this.config.lattice.numLatitudes + nodes[1][1];\\n      firstAcceleration = nodes[1][4];\\n    }\\n\\n    if (nodes.length >= 3) {\\n      secondLatticePoint = nodes[2][0] * this.config.lattice.numLatitudes + nodes[2][1];\\n      secondAcceleration = nodes[2][4];\\n    }\\n\\n    return [points, fromVehicleSegment, fromVehicleParams, firstLatticePoint, firstAcceleration, secondLatticePoint, secondAcceleration];\\n  }\\n}\\n\\nfunction vehicleTransform({ pos, rot }) {\\n  const translate = new THREE.Matrix3();\\n  translate.set(\\n    1, 0, -pos.x,\\n    0, 1, -pos.y,\\n    0, 0, 1\\n  );\\n\\n  const cosRot = Math.cos(rot);\\n  const sinRot = Math.sin(rot);\\n\\n  const rotate = new THREE.Matrix3();\\n  rotate.set(\\n    cosRot, sinRot, 0,\\n    -sinRot, cosRot, 0,\\n    0, 0, 1\\n  );\\n\\n  return rotate.multiply(translate);\\n}\\n\\nfunction obstacleTransform(vehicleXform, xyCenterPoint, width, height) {\\n  const translate = new THREE.Matrix3();\\n  translate.set(\\n    1, 0, -xyCenterPoint.x,\\n    0, 1, -xyCenterPoint.y,\\n    0, 0, 1\\n  );\\n\\n  const scale = new THREE.Matrix3();\\n  scale.set(\\n    2 / width, 0, 0,\\n    0, 2 / height, 0,\\n    0, 0, 1\\n  );\\n\\n  return scale.multiply(translate).multiply(vehicleXform);\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///6\\n\")},,function(module,exports){eval(\"throw new Error(\\\"Module parse failed: Unexpected character '�' (1:2)\\\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\\\\n(Source code omitted for this binary file)\\\");//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI4LmpzIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///8\\n\")},,,,,,function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('// ESM COMPAT FLAG\\n__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: ./js/physics/Car.js\\nvar Car = __webpack_require__(0);\\n\\n// CONCATENATED MODULE: ./js/physics/Physics.js\\n\\n\\nclass Physics_Physics {\\n  constructor() {\\n    this.cars = [];\\n  }\\n\\n  step(dt) {\\n    this.cars.forEach(c => c.step(dt));\\n  }\\n\\n  createCar() {\\n    const newCar = new Car[\"a\" /* default */]();\\n    this.cars.push(newCar);\\n\\n    return newCar;\\n  }\\n};\\n\\n// CONCATENATED MODULE: ./js/autonomy/Path.js\\n\\n\\n// input pose: { pos: Vector2 [, rot: radians] }\\n// pose: { pos: Vector2, frontPos: Vector2, fakePos: Vector2, rot: radians }\\nclass Path_Path {\\n  constructor(poses, startRotation = 0, goalRotation = 0) {\\n    this.poses = poses;\\n\\n    for (let i = 0; i < poses.length; i++) {\\n      const pose = poses[i];\\n\\n      if (pose.rot === undefined) {\\n        let rot;\\n\\n        if (i == 0) {\\n          rot = startRotation;\\n        } else if (i == poses.length - 1) {\\n          rot = goalRotation;\\n        } else {\\n          const prev = poses[i - 1].pos;\\n          const next = poses[i + 1].pos;\\n          rot = Math.atan2(next.y - prev.y, next.x - prev.x);\\n        }\\n\\n        pose.rot = rot;\\n      }\\n\\n      pose.frontPos = Car[\"a\" /* default */].getFrontAxlePosition(pose.pos, pose.rot);\\n      pose.fakePos = Car[\"a\" /* default */].getFakeAxlePosition(pose.pos, pose.rot);\\n    }\\n  }\\n}\\n\\n// EXTERNAL MODULE: ./js/autonomy/path-planning/CubicPath.js\\nvar CubicPath = __webpack_require__(2);\\n\\n// CONCATENATED MODULE: ./js/autonomy/control/AutonomousController.js\\n\\n\\nclass AutonomousController_AutonomousController {\\n  constructor(path) {\\n    this.path = path;\\n    this.nextIndex = 1;\\n    this.prevPhiError = 0;\\n    this.prevVelocity = 0;\\n  }\\n\\n  reset() {\\n    this.prevVelocity = 0;\\n  }\\n\\n  replacePath(path) {\\n    this.path = path;\\n    this.nextIndex = 1;\\n  }\\n\\n  predictPoseAfterTime(currentPose, predictionTime) {\\n    const pathPoses = this.path.poses;\\n    const frontAxlePos = Car[\"a\" /* default */].getFrontAxlePosition(currentPose.pos, currentPose.rot);\\n    let [nextIndex, progress] = this.findNextIndex(frontAxlePos);\\n    let currentVelocity = currentPose.velocity;\\n\\n    if (currentVelocity <= 0.01) return currentPose;\\n\\n    while (predictionTime > 0) {\\n      const prevPose = pathPoses[nextIndex - 1];\\n      const nextPose = pathPoses[nextIndex];\\n\\n      const segmentDist = nextPose.pos.distanceTo(prevPose.pos);\\n      const distLeft = segmentDist * (1 - progress);\\n      const sumV = currentVelocity + nextPose.velocity;\\n      const timeToNextIndex = 2 * distLeft / (sumV == 0 ? 0.01 : sumV);\\n      //const timeToNextIndex = distLeft / currentVelocity;\\n\\n      if (timeToNextIndex >= predictionTime || nextIndex + 1 >= pathPoses.length) {\\n        const dist = sumV / 2 * predictionTime;\\n        const newProgress = progress + dist / segmentDist;\\n\\n        return {\\n          pos: nextPose.pos.clone().sub(prevPose.pos).multiplyScalar(newProgress).add(nextPose.pos),\\n          rot: prevPose.rot + (nextPose.rot - prevPose.rot) * newProgress,\\n          curv: prevPose.curv + (nextPose.curv - prevPose.curv) * newProgress,\\n          dCurv: 0,\\n          ddCurv: 0,\\n          velocity: nextPose.velocity\\n        }\\n      }\\n\\n      //currentVelocity = nextPose.velocity;\\n      predictionTime -= timeToNextIndex;\\n      progress = 0;\\n      nextIndex++;\\n    }\\n  }\\n\\n  control(pose, wheelAngle, velocity, dt) {\\n    const pathPoses = this.path.poses;\\n    const frontAxlePos = Car[\"a\" /* default */].getFrontAxlePosition(pose.pos, pose.rot);\\n    const [nextIndex, progress] = this.findNextIndex(frontAxlePos);\\n    this.nextIndex = nextIndex;\\n\\n    let gas = 0;\\n    let brake = 0;\\n    let phi = 0; // the desired wheel deflection\\n\\n    if (nextIndex >= pathPoses.length - 1 && progress >= 1) {\\n      gas = 0;\\n      brake = 1;\\n      phi = 0;\\n    } else {\\n      const kp_a = 4;\\n      const kd_a = 0.5;\\n      const kff_a = 0.5;\\n\\n      const currentAccel = (velocity - this.prevVelocity) / dt;\\n      const prevNextDist = pathPoses[this.nextIndex].pos.distanceTo(pathPoses[this.nextIndex - 1].pos);\\n      const targetVelocity = Math.sqrt(2 * pathPoses[nextIndex].acceleration * prevNextDist * Math.clamp(progress, 0, 1) + pathPoses[this.nextIndex - 1].velocity * pathPoses[this.nextIndex - 1].velocity);\\n      const diffVelocity = targetVelocity - velocity;\\n      const diffAccel = pathPoses[this.nextIndex].acceleration - currentAccel;\\n      const targetAccel = kp_a * diffVelocity + kd_a * diffAccel + kff_a * pathPoses[this.nextIndex].acceleration;\\n\\n      if (targetAccel > 0)\\n        gas = Math.min(targetAccel / Car[\"a\" /* default */].MAX_GAS_ACCEL, 1);\\n      else\\n        brake = Math.min(-targetAccel / Car[\"a\" /* default */].MAX_BRAKE_DECEL, 1);\\n\\n      this.prevVelocity = velocity;\\n\\n      const closestFrontPathPos = projectPointOnSegment(frontAxlePos, pathPoses[this.nextIndex - 1].frontPos, pathPoses[this.nextIndex].frontPos)[0];\\n\\n      // Determine the desired heading at the specific point on the front path by lerping between prevHeading and nextHeading using progress as the weight\\n      const prevHeading = this.nextIndex > 1 ? pathPoses[nextIndex].frontPos.clone().sub(pathPoses[nextIndex - 2].frontPos).angle() : pathPoses[0].rot;\\n      const nextHeading = this.nextIndex < pathPoses.length - 1 ? pathPoses[nextIndex + 1].frontPos.clone().sub(pathPoses[nextIndex - 1].frontPos).angle() : pathPoses[pathPoses.length - 1].rot;\\n      const desiredHeading = prevHeading + (nextHeading - prevHeading) * progress;\\n\\n      // Determine if the front axle is to the left or right of the front path\\n      const pathVec = pathPoses[nextIndex].frontPos.clone().sub(pathPoses[nextIndex - 1].frontPos).normalize();\\n      const zero = new THREE.Vector2(0, 0);\\n      const left = pathVec.clone().rotateAround(zero, Math.PI / 2).add(closestFrontPathPos);\\n      const right = pathVec.clone().rotateAround(zero, -Math.PI / 2).add(closestFrontPathPos);\\n      const dir = frontAxlePos.distanceToSquared(left) < frontAxlePos.distanceToSquared(right) ? -1 : 1;\\n\\n      const k = 4;\\n      const gain = 0.8;\\n      const crossTrackError = frontAxlePos.distanceTo(closestFrontPathPos);\\n      const headingError = Math.wrapAngle(pose.rot - desiredHeading);\\n\\n      //phi = -headingError + gain * Math.atan(k * dir * crossTrackError / velocity);\\n\\n      const curv = pathPoses[nextIndex - 1].curv + (pathPoses[nextIndex].curv - pathPoses[nextIndex - 1].curv) * progress;\\n\\n      phi = Math.atan(curv * Car[\"a\" /* default */].WHEEL_BASE) + gain * Math.atan(k * dir * crossTrackError / Math.max(velocity, 0.01));\\n\\n      const checkSteer = Math.clamp((phi - wheelAngle) / dt / Car[\"a\" /* default */].MAX_STEER_SPEED, -1, 1);\\n    }\\n\\n    const phiError = phi - wheelAngle;\\n    /*\\n    const dPhiError = (phiError - this.prevPhiError) / dt;\\n    this.prevPhiError = phiError;\\n    \\n    const steer = Math.clamp(12 * phiError + 0.8 * dPhiError, -1, 1);\\n    */\\n\\n    const steer = Math.clamp(phiError / dt / Car[\"a\" /* default */].MAX_STEER_SPEED, -1, 1);\\n\\n    return { gas, brake, steer };\\n  }\\n\\n  // Finds the next point the vehicle is approaching and the progress between the prev point and the next point\\n  // Returns [nextPointIndex, progress from (nextPointIndex - 1) to nextPointIndex, {0 - 1}]\\n  findNextIndex(frontAxlePos) {\\n    const pathPoses = this.path.poses;\\n\\n    // Constrain the search to just a few points surrounding the current nextIndex\\n    // for performance and to avoid problems with a path that crosses itself\\n    const start = Math.max(0, this.nextIndex - 20);\\n    const end = Math.min(pathPoses.length - 1, this.nextIndex + 20);\\n    let closestDistSqr = frontAxlePos.distanceToSquared(pathPoses[start].frontPos);\\n    let closestIndex = start;\\n\\n    for (let i = start + 1; i < end; i++) {\\n      const distSqr = frontAxlePos.distanceToSquared(pathPoses[i].frontPos);\\n      if (distSqr < closestDistSqr) {\\n        closestDistSqr = distSqr;\\n        closestIndex = i;\\n      }\\n    }\\n\\n    if (closestIndex == pathPoses.length - 1) {\\n      const [_, progress] = projectPointOnSegment(frontAxlePos, pathPoses[closestIndex - 1].frontPos, pathPoses[closestIndex].frontPos);\\n      return [closestIndex, progress];\\n    } else if (closestIndex == 0) {\\n      const [_, progress] = projectPointOnSegment(frontAxlePos, pathPoses[closestIndex].frontPos, pathPoses[closestIndex + 1].frontPos);\\n      return [closestIndex + 1, progress];\\n    } else {\\n      // The nextPoint is either (closestPoint) or (closestPoint + 1). Project the frontAxlePos to both\\n      // of those two line segments (the segment preceding closestPoint and the segment succeeding closestPoint)\\n      // to determine which segment it\\'s closest to.\\n      const [precedingProjection, precedingProgress] = projectPointOnSegment(frontAxlePos, pathPoses[closestIndex - 1].frontPos, pathPoses[closestIndex].frontPos);\\n      const [succeedingProjection, succeedingProgress] = projectPointOnSegment(frontAxlePos, pathPoses[closestIndex].frontPos, pathPoses[closestIndex + 1].frontPos);\\n\\n      if (frontAxlePos.distanceToSquared(precedingProjection) < frontAxlePos.distanceToSquared(succeedingProjection)) {\\n        return [closestIndex, precedingProgress];\\n      } else {\\n        return [closestIndex + 1, succeedingProgress];\\n      }\\n    }\\n  }\\n}\\n\\n// Returns [pointOnSegment, progressAlongSegment {0 - 1}]\\nfunction projectPointOnSegment(point, start, end) {\\n  const distSqr = start.distanceToSquared(end);\\n  //const progress = Math.clamp(point.clone().sub(start).dot(end.clone().sub(start)) / distSqr, 0, 1);\\n  const progress = point.clone().sub(start).dot(end.clone().sub(start)) / distSqr;\\n  return [end.clone().sub(start).multiplyScalar(progress).add(start), progress];\\n}\\n\\n// CONCATENATED MODULE: ./js/autonomy/control/FollowController.js\\n\\n\\nclass FollowController_FollowController {\\n  constructor(path, car) {\\n    this.path = path;\\n    this.car = car;\\n    this.nextIndex = 1;\\n    this.prevVelocity = 0;\\n    this.prevAccel = 0;\\n  }\\n\\n  reset() {\\n    this.prevVelocity = 0;\\n    this.prevAccel = 0;\\n  }\\n\\n  replacePath(path) {\\n    this.path = path;\\n    this.nextIndex = 1;\\n  }\\n\\n  predictPoseAfterTime(currentPose, predictionTime) {\\n    const pathPoses = this.path.poses;\\n    let [nextIndex, progress] = this.findNextIndex(currentPose.pos);\\n    let currentVelocity = currentPose.velocity;\\n\\n    if (currentVelocity <= 0.01) return currentPose;\\n\\n    while (predictionTime > 0) {\\n      const prevPose = pathPoses[nextIndex - 1];\\n      const nextPose = pathPoses[nextIndex];\\n\\n      const segmentDist = nextPose.pos.distanceTo(prevPose.pos);\\n      const distLeft = segmentDist * (1 - progress);\\n      const sumV = (currentVelocity + nextPose.velocity) / 2;\\n      const timeToNextIndex = 2 * distLeft / (sumV == 0 ? 0.01 : sumV);\\n\\n      if (timeToNextIndex >= predictionTime || nextIndex + 1 >= pathPoses.length) {\\n        const dist = sumV / 2 * predictionTime;\\n        const newProgress = progress + dist / segmentDist;\\n        const newRotation = Math.wrapAngle(prevPose.rot + Math.wrapAngle(nextPose.rot - prevPose.rot) * newProgress);\\n\\n        const pprevPose = nextIndex - 2 >= 0 ? pathPoses[nextIndex - 2] : prevPose;\\n        const nnextPose = nextIndex + 1 < pathPoses.length ? pathPoses[nextIndex + 1] : nextPose;\\n\\n        const dCurv = (nextPose.curv - prevPose.curv) / segmentDist;\\n        const dCurvPrev = ((prevPose.curv - pprevPose.curv) / pprevPose.pos.distanceTo(prevPose.pos) + dCurv) / 2;\\n        const dCurvNext = (dCurv + (nnextPose.curv - nextPose.curv) / nextPose.pos.distanceTo(nnextPose.pos)) / 2;\\n\\n        const ddCurv = (dCurvNext - dCurvPrev) / segmentDist;\\n\\n        return {\\n          pos: nextPose.pos.clone().sub(prevPose.pos).multiplyScalar(newProgress).add(nextPose.pos),\\n          rot: newRotation,\\n          curv: prevPose.curv + (nextPose.curv - prevPose.curv) * newProgress,\\n          dCurv: dCurv,\\n          ddCurv: ddCurv,\\n          velocity: nextPose.velocity\\n        }\\n      }\\n\\n      currentVelocity = nextPose.velocity;\\n      predictionTime -= timeToNextIndex;\\n      progress = 0;\\n      nextIndex++;\\n    }\\n  }\\n\\n  control(pose, wheelAngle, velocity, dt, lockPath = false) {\\n    const pathPoses = this.path.poses;\\n    const [nextIndex, progress, projection] = this.findNextIndex(pose.pos);\\n    this.nextIndex = nextIndex;\\n\\n    const prevPose = pathPoses[nextIndex - 1];\\n    const nextPose = pathPoses[nextIndex];\\n\\n    let gas = 0;\\n    let brake = 0;\\n    let steer = 0;\\n\\n    if (nextIndex >= pathPoses.length - 2 && progress >= 1) {\\n      brake = 1;\\n    } else {\\n      /*\\n      const kp_a = 4;\\n      const kd_a = 0.5;\\n      const kff_a = 0.5;\\n\\n      const currentAccel = (velocity - this.prevVelocity) / dt;\\n      const prevNextDist = nextPose.pos.distanceTo(prevPose.pos);\\n      const targetVelocity = Math.sqrt(2 * nextPose.acceleration * prevNextDist * Math.clamp(progress, 0, 1) + prevPose.velocity * prevPose.velocity);\\n      const diffVelocity = targetVelocity - velocity;\\n      const diffAccel = nextPose.acceleration - currentAccel;\\n      const targetAccel = kp_a * diffVelocity + kd_a * diffAccel + kff_a * nextPose.acceleration;\\n      */\\n      const accelDamping = 0.1;\\n      const targetAccel = nextPose.acceleration;\\n      const dampedAccel = this.prevAccel * (1 - accelDamping) + targetAccel * accelDamping;\\n\\n      if (dampedAccel > 0)\\n        gas = Math.min(dampedAccel / Car[\"a\" /* default */].MAX_GAS_ACCEL, 1);\\n      else\\n        brake = Math.min(-dampedAccel / Car[\"a\" /* default */].MAX_BRAKE_DECEL, 1);\\n\\n      this.prevVelocity = velocity;\\n      this.prevAccel = dampedAccel;\\n\\n      const curvature = prevPose.curv + (nextPose.curv - prevPose.curv) * progress;\\n      const desiredWheelAngle = Math.atan(curvature * Car[\"a\" /* default */].WHEEL_BASE);\\n      const wheelAngleError = desiredWheelAngle - wheelAngle;\\n      steer = Math.clamp(wheelAngleError / dt / Car[\"a\" /* default */].MAX_STEER_SPEED, -1, 1);\\n\\n      if (lockPath) {\\n        const damping = 0.1;\\n        const newRotation = Math.wrapAngle(prevPose.rot + Math.wrapAngle(nextPose.rot - prevPose.rot) * progress);\\n        const newPosition = new THREE.Vector2(projection.x - Car[\"a\" /* default */].REAR_AXLE_POS * Math.cos(newRotation), projection.y - Car[\"a\" /* default */].REAR_AXLE_POS * Math.sin(newRotation));\\n\\n        if (Math.abs(Math.wrapAngle(newRotation - this.car.rotation)) > 0.5) {\\n          console.log(\\'wut\\');\\n        }\\n\\n        this.car.rotation += damping * Math.wrapAngle(newRotation - this.car.rotation);\\n        this.car.position = this.car.position.clone().multiplyScalar(1 - damping).add(newPosition.multiplyScalar(damping));\\n      }\\n    }\\n\\n    return { gas, brake, steer };\\n  }\\n\\n  findNextIndex(pos) {\\n    const pathPoses = this.path.poses;\\n\\n    // Constrain the search to just a few points surrounding the current nextIndex\\n    // for performance and to avoid problems with a path that crosses itself\\n    const start = Math.max(0, this.nextIndex - 20);\\n    const end = Math.min(pathPoses.length - 1, this.nextIndex + 20);\\n    let closestDistSqr = pos.distanceToSquared(pathPoses[start].pos);\\n    let closestIndex = start;\\n\\n    for (let i = start + 1; i < end; i++) {\\n      const distSqr = pos.distanceToSquared(pathPoses[i].pos);\\n      if (distSqr < closestDistSqr) {\\n        closestDistSqr = distSqr;\\n        closestIndex = i;\\n      }\\n    }\\n\\n    if (closestIndex == pathPoses.length - 1) {\\n      const [projection, progress] = FollowController_projectPointOnSegment(pos, pathPoses[closestIndex - 1].pos, pathPoses[closestIndex].pos);\\n      return [closestIndex, progress, projection];\\n    } else if (closestIndex == 0) {\\n      const [projection, progress] = FollowController_projectPointOnSegment(pos, pathPoses[closestIndex].pos, pathPoses[closestIndex + 1].pos);\\n      return [closestIndex + 1, progress, projection];\\n    } else {\\n      // The nextPoint is either (closestPoint) or (closestPoint + 1). Project the pos to both\\n      // of those two line segments (the segment preceding closestPoint and the segment succeeding closestPoint)\\n      // to determine which segment it\\'s closest to.\\n      const [precedingProjection, precedingProgress] = FollowController_projectPointOnSegment(pos, pathPoses[closestIndex - 1].pos, pathPoses[closestIndex].pos);\\n      const [succeedingProjection, succeedingProgress] = FollowController_projectPointOnSegment(pos, pathPoses[closestIndex].pos, pathPoses[closestIndex + 1].pos);\\n\\n      if (pos.distanceToSquared(precedingProjection) < pos.distanceToSquared(succeedingProjection)) {\\n        return [closestIndex, precedingProgress, precedingProjection];\\n      } else {\\n        return [closestIndex + 1, succeedingProgress, succeedingProjection];\\n      }\\n    }\\n  }\\n}\\n\\n// Returns [pointOnSegment, progressAlongSegment {0 - 1}]\\nfunction FollowController_projectPointOnSegment(point, start, end) {\\n  const distSqr = start.distanceToSquared(end);\\n  const progress = point.clone().sub(start).dot(end.clone().sub(start)) / distSqr;\\n  return [end.clone().sub(start).multiplyScalar(progress).add(start), progress];\\n}\\n\\n// CONCATENATED MODULE: ./js/autonomy/control/ManualController.js\\nclass ManualController {\\n  constructor() {\\n    this.carKeys = { forward: false, backward: false, left: false, right: false, brake: false };\\n\\n    document.addEventListener(\\'keydown\\', event => {\\n      switch (event.key) {\\n        case \\'w\\': case \\'W\\': this.carKeys.forward = true; break;\\n        case \\'s\\': case \\'S\\': this.carKeys.backward = true; break;\\n        case \\'a\\': case \\'A\\': this.carKeys.left = true; break;\\n        case \\'d\\': case \\'D\\': this.carKeys.right = true; break;\\n        case \\' \\': this.carKeys.brake = true; break;\\n      }\\n    });\\n\\n    document.addEventListener(\\'keyup\\', event => {\\n      switch (event.key) {\\n        case \\'w\\': case \\'W\\': this.carKeys.forward = false; break;\\n        case \\'s\\': case \\'S\\': this.carKeys.backward = false; break;\\n        case \\'a\\': case \\'A\\': this.carKeys.left = false; break;\\n        case \\'d\\': case \\'D\\': this.carKeys.right = false; break;\\n        case \\' \\': this.carKeys.brake = false; break;\\n      }\\n    });\\n  }\\n\\n  control() {\\n    let gas = 0;\\n    let brake = 0;\\n    let steer = 0;\\n\\n    if (this.carKeys.forward) gas += 1;\\n    if (this.carKeys.backward) gas -= 1;\\n    if (this.carKeys.left) steer -= 1;\\n    if (this.carKeys.right) steer += 1;\\n    if (this.carKeys.brake) brake += 1;\\n\\n    return { gas, brake, steer };\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./js/objects/MapObject.js\\n// geolocation = [33.523900, -111.908756];\\nclass MapObject extends THREE.Object3D {\\n  constructor(geolocation = null) {\\n    super();\\n\\n    this.geolocation = geolocation;\\n    this.tilesGroup = null;\\n\\n    const tileSize = geolocation ? this.tileSizeInMeters() : 10;\\n    const grid = new THREE.GridHelper(MapObject.HALF_NUM_TILES * 8 * tileSize, MapObject.HALF_NUM_TILES * 8, 0x333333, 0x333333);\\n    grid.renderOrder = -1;\\n    grid.material.depthTest = false;\\n    grid.position.add(new THREE.Vector3(-tileSize / 2, 0, -tileSize / 2));\\n    this.add(grid);\\n\\n    if (geolocation)\\n      this.drawTiles();\\n  }\\n\\n  // Converts lat-long geolocation to Google Maps world coodinates\\n  static geoToWorld(latlng) {\\n    const latitudeRadians = latlng[0] * Math.PI / 180;\\n    const x = (latlng[1] + 180) / 360 * 256;\\n    const y = ((1 - Math.log(Math.tan(latitudeRadians) + 1 / Math.cos(latitudeRadians)) / Math.PI) / 2) * 256;\\n    return [x, y];\\n  }\\n\\n  // Calculates the x and y tile indices for the provided world coordinates\\n  static worldToTile(worldCoordinates) {\\n    return [Math.floor(worldCoordinates[0] * MapObject.SCALE / 256), Math.floor(worldCoordinates[1] * MapObject.SCALE / 256)];\\n  }\\n\\n  drawTiles() {\\n    if (this.tileGroup != null) this.remove(this.tilesGroup);\\n    this.tileGroup = new THREE.Group();\\n\\n    const originTile = MapObject.worldToTile(MapObject.geoToWorld(this.geolocation));\\n    const tileSize = this.tileSizeInMeters();\\n\\n    for (let x = -MapObject.HALF_NUM_TILES, h = 0; x < MapObject.HALF_NUM_TILES; x++) {\\n      for (let y = -MapObject.HALF_NUM_TILES; y < MapObject.HALF_NUM_TILES; y++, h++) {\\n        const tileTexture = new THREE.TextureLoader().load(`https://khms${h % 4}.google.com/kh/v=748?x=${originTile[0] + x}&y=${originTile[1] + y}&z=${MapObject.ZOOM}`);\\n        tileTexture.anisotropy = 16;\\n        const tileGeometry = new THREE.PlaneBufferGeometry(tileSize, tileSize);\\n        const tileMaterial = new THREE.MeshBasicMaterial({ map: tileTexture, color: 0xffffff });\\n        const tile = new THREE.Mesh(tileGeometry, tileMaterial);\\n        tile.rotation.x = -Math.PI / 2;\\n        tile.position.x = x * tileSize;\\n        tile.position.z = y * tileSize;\\n\\n        this.tileGroup.add(tile);\\n      }\\n    }\\n\\n    this.add(this.tileGroup);\\n  }\\n\\n  tileSizeInMeters() {\\n    // Because of the Mercator projection used to create the tile images, the size of a tile (in meters) depends on the latitude\\n    return 2 * Math.PI * MapObject.EARTH_RADIUS * Math.cos(this.geolocation[0] * Math.PI / 180) / Math.pow(2, MapObject.ZOOM);\\n  }\\n}\\n\\nMapObject.EARTH_RADIUS = 6378137; // meters\\nMapObject.TILE_PIXELS = 256; // pixels per tile\\nMapObject.ZOOM = 20;\\nMapObject.SCALE = 1 << MapObject.ZOOM;\\nMapObject.HALF_NUM_TILES = 20;\\n\\n// CONCATENATED MODULE: ./js/objects/TDSLoader.js\\n/*\\n * Autodesk 3DS threee.js file loader, based on lib3ds.\\n *\\n * Loads geometry with uv and materials basic properties with texture support.\\n *\\n * @author @tentone\\n * @author @timknip\\n * @class TDSLoader\\n * @constructor\\n */\\n\\n\\n\\nTHREE.TDSLoader = function ( manager ) {\\n\\n\\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\\n\\tthis.debug = false;\\n\\n\\tthis.group = null;\\n\\tthis.position = 0;\\n\\n\\tthis.materials = [];\\n\\tthis.meshes = [];\\n\\n};\\n\\nTHREE.TDSLoader.prototype = {\\n\\n\\tconstructor: THREE.TDSLoader,\\n\\n\\t/**\\n\\t * Load 3ds file from url.\\n\\t *\\n\\t * @method load\\n\\t * @param {[type]} url URL for the file.\\n\\t * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\\n\\t * @param {Function} onProgress onProgress callback.\\n\\t * @param {Function} onError onError callback.\\n\\t */\\n\\tload: function ( url, onLoad, onProgress, onError ) {\\n\\n\\t\\tvar scope = this;\\n\\n\\t\\tvar path = this.path !== undefined ? this.path : THREE.LoaderUtils.extractUrlBase( url );\\n\\n\\t\\tvar loader = new THREE.FileLoader( this.manager );\\n\\n\\t\\tloader.setResponseType( \\'arraybuffer\\' );\\n\\n\\t\\tloader.load( url, function ( data ) {\\n\\n\\t\\t\\tonLoad( scope.parse( data, path ) );\\n\\n\\t\\t}, onProgress, onError );\\n\\n\\t},\\n\\n\\t/**\\n\\t * Parse arraybuffer data and load 3ds file.\\n\\t *\\n\\t * @method parse\\n\\t * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\\n\\t * @param {String} path Path for external resources.\\n\\t * @return {Object3D} Group loaded from 3ds file.\\n\\t */\\n\\tparse: function ( arraybuffer, path ) {\\n\\n\\t\\tthis.group = new THREE.Group();\\n\\t\\tthis.position = 0;\\n\\t\\tthis.materials = [];\\n\\t\\tthis.meshes = [];\\n\\n\\t\\tthis.readFile( arraybuffer, path );\\n\\n\\t\\tfor ( var i = 0; i < this.meshes.length; i ++ ) {\\n\\n\\t\\t\\tthis.group.add( this.meshes[ i ] );\\n\\n\\t\\t}\\n\\n\\t\\treturn this.group;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Decode file content to read 3ds data.\\n\\t *\\n\\t * @method readFile\\n\\t * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\\n\\t */\\n\\treadFile: function ( arraybuffer, path ) {\\n\\n\\t\\tvar data = new DataView( arraybuffer );\\n\\t\\tvar chunk = this.readChunk( data );\\n\\n\\t\\tif ( chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC ) {\\n\\n\\t\\t\\tvar next = this.nextChunk( data, chunk );\\n\\n\\t\\t\\twhile ( next !== 0 ) {\\n\\n\\t\\t\\t\\tif ( next === M3D_VERSION ) {\\n\\n\\t\\t\\t\\t\\tvar version = this.readDWord( data );\\n\\t\\t\\t\\t\\tthis.debugMessage( \\'3DS file version: \\' + version );\\n\\n\\t\\t\\t\\t} else if ( next === MDATA ) {\\n\\n\\t\\t\\t\\t\\tthis.resetPosition( data );\\n\\t\\t\\t\\t\\tthis.readMeshData( data, path );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tthis.debugMessage( \\'Unknown main chunk: \\' + next.toString( 16 ) );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tnext = this.nextChunk( data, chunk );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tthis.debugMessage( \\'Parsed \\' + this.meshes.length + \\' meshes\\' );\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read mesh data chunk.\\n\\t *\\n\\t * @method readMeshData\\n\\t * @param {Dataview} data Dataview in use.\\n\\t */\\n\\treadMeshData: function ( data, path ) {\\n\\n\\t\\tvar chunk = this.readChunk( data );\\n\\t\\tvar next = this.nextChunk( data, chunk );\\n\\n\\t\\twhile ( next !== 0 ) {\\n\\n\\t\\t\\tif ( next === MESH_VERSION ) {\\n\\n\\t\\t\\t\\tvar version = + this.readDWord( data );\\n\\t\\t\\t\\tthis.debugMessage( \\'Mesh Version: \\' + version );\\n\\n\\t\\t\\t} else if ( next === MASTER_SCALE ) {\\n\\n\\t\\t\\t\\tvar scale = this.readFloat( data );\\n\\t\\t\\t\\tthis.debugMessage( \\'Master scale: \\' + scale );\\n\\t\\t\\t\\tthis.group.scale.set( scale, scale, scale );\\n\\n\\t\\t\\t} else if ( next === NAMED_OBJECT ) {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'Named Object\\' );\\n\\t\\t\\t\\tthis.resetPosition( data );\\n\\t\\t\\t\\tthis.readNamedObject( data );\\n\\n\\t\\t\\t} else if ( next === MAT_ENTRY ) {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'Material\\' );\\n\\t\\t\\t\\tthis.resetPosition( data );\\n\\t\\t\\t\\tthis.readMaterialEntry( data, path );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'Unknown MDATA chunk: \\' + next.toString( 16 ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tnext = this.nextChunk( data, chunk );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read named object chunk.\\n\\t *\\n\\t * @method readNamedObject\\n\\t * @param {Dataview} data Dataview in use.\\n\\t */\\n\\treadNamedObject: function ( data ) {\\n\\n\\t\\tvar chunk = this.readChunk( data );\\n\\t\\tvar name = this.readString( data, 64 );\\n\\t\\tchunk.cur = this.position;\\n\\n\\t\\tvar next = this.nextChunk( data, chunk );\\n\\t\\twhile ( next !== 0 ) {\\n\\n\\t\\t\\tif ( next === N_TRI_OBJECT ) {\\n\\n\\t\\t\\t\\tthis.resetPosition( data );\\n\\t\\t\\t\\tvar mesh = this.readMesh( data );\\n\\t\\t\\t\\tmesh.name = name;\\n\\t\\t\\t\\tthis.meshes.push( mesh );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'Unknown named object chunk: \\' + next.toString( 16 ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tnext = this.nextChunk( data, chunk );\\n\\n\\t\\t}\\n\\n\\t\\tthis.endChunk( chunk );\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read material data chunk and add it to the material list.\\n\\t *\\n\\t * @method readMaterialEntry\\n\\t * @param {Dataview} data Dataview in use.\\n\\t */\\n\\treadMaterialEntry: function ( data, path ) {\\n\\n\\t\\tvar chunk = this.readChunk( data );\\n\\t\\tvar next = this.nextChunk( data, chunk );\\n\\t\\tvar material = new THREE.MeshPhongMaterial();\\n\\n\\t\\twhile ( next !== 0 ) {\\n\\n\\t\\t\\tif ( next === MAT_NAME ) {\\n\\n\\t\\t\\t\\tmaterial.name = this.readString( data, 64 );\\n\\t\\t\\t\\tthis.debugMessage( \\'   Name: \\' + material.name );\\n\\n\\t\\t\\t} else if ( next === MAT_WIRE ) {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'   Wireframe\\' );\\n\\t\\t\\t\\tmaterial.wireframe = true;\\n\\n\\t\\t\\t} else if ( next === MAT_WIRE_SIZE ) {\\n\\n\\t\\t\\t\\tvar value = this.readByte( data );\\n\\t\\t\\t\\tmaterial.wireframeLinewidth = value;\\n\\t\\t\\t\\tthis.debugMessage( \\'   Wireframe Thickness: \\' + value );\\n\\n\\t\\t\\t} else if ( next === MAT_TWO_SIDE ) {\\n\\n\\t\\t\\t\\tmaterial.side = THREE.DoubleSide;\\n\\t\\t\\t\\tthis.debugMessage( \\'   DoubleSided\\' );\\n\\n\\t\\t\\t} else if ( next === MAT_ADDITIVE ) {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'   Additive Blending\\' );\\n\\t\\t\\t\\tmaterial.blending = THREE.AdditiveBlending;\\n\\n\\t\\t\\t} else if ( next === MAT_DIFFUSE ) {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'   Diffuse Color\\' );\\n\\t\\t\\t\\tmaterial.color = this.readColor( data );\\n\\n\\t\\t\\t} else if ( next === MAT_SPECULAR ) {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'   Specular Color\\' );\\n\\t\\t\\t\\tmaterial.specular = this.readColor( data );\\n\\n\\t\\t\\t} else if ( next === MAT_AMBIENT ) {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'   Ambient color\\' );\\n\\t\\t\\t\\tmaterial.color = this.readColor( data );\\n\\n\\t\\t\\t} else if ( next === MAT_SHININESS ) {\\n\\n\\t\\t\\t\\tvar shininess = this.readWord( data );\\n\\t\\t\\t\\tmaterial.shininess = shininess;\\n\\t\\t\\t\\tthis.debugMessage( \\'   Shininess : \\' + shininess );\\n\\n\\t\\t\\t} else if ( next === MAT_TEXMAP ) {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'   ColorMap\\' );\\n\\t\\t\\t\\tthis.resetPosition( data );\\n\\t\\t\\t\\tmaterial.map = this.readMap( data, path );\\n\\n\\t\\t\\t} else if ( next === MAT_BUMPMAP ) {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'   BumpMap\\' );\\n\\t\\t\\t\\tthis.resetPosition( data );\\n\\t\\t\\t\\tmaterial.bumpMap = this.readMap( data, path );\\n\\n\\t\\t\\t} else if ( next === MAT_OPACMAP ) {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'   OpacityMap\\' );\\n\\t\\t\\t\\tthis.resetPosition( data );\\n\\t\\t\\t\\tmaterial.alphaMap = this.readMap( data, path );\\n\\n\\t\\t\\t} else if ( next === MAT_SPECMAP ) {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'   SpecularMap\\' );\\n\\t\\t\\t\\tthis.resetPosition( data );\\n\\t\\t\\t\\tmaterial.specularMap = this.readMap( data, path );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'   Unknown material chunk: \\' + next.toString( 16 ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tnext = this.nextChunk( data, chunk );\\n\\n\\t\\t}\\n\\n\\t\\tthis.endChunk( chunk );\\n\\n\\t\\tthis.materials[ material.name ] = material;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read mesh data chunk.\\n\\t *\\n\\t * @method readMesh\\n\\t * @param {Dataview} data Dataview in use.\\n\\t */\\n\\treadMesh: function ( data ) {\\n\\n\\t\\tvar chunk = this.readChunk( data );\\n\\t\\tvar next = this.nextChunk( data, chunk );\\n\\n\\t\\tvar useBufferGeometry = false;\\n\\t\\tvar geometry = null;\\n\\t\\tvar uvs = [];\\n\\n\\t\\tif ( useBufferGeometry ) {\\n\\n\\t\\t\\tgeometry = new THREE.BufferGeometry();\\n\\n\\t\\t}\\telse {\\n\\n\\t\\t\\tgeometry = new THREE.Geometry();\\n\\n\\t\\t}\\n\\n\\t\\tvar material = new THREE.MeshPhongMaterial();\\n\\t\\tvar mesh = new THREE.Mesh( geometry, material );\\n\\t\\tmesh.name = \\'mesh\\';\\n\\n\\t\\twhile ( next !== 0 ) {\\n\\n\\t\\t\\tif ( next === POINT_ARRAY ) {\\n\\n\\t\\t\\t\\tvar points = this.readWord( data );\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'   Vertex: \\' + points );\\n\\n\\t\\t\\t\\t//BufferGeometry\\n\\n\\t\\t\\t\\tif ( useBufferGeometry )\\t{\\n\\n\\t\\t\\t\\t\\tvar vertices = [];\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < points; i ++ )\\t\\t{\\n\\n\\t\\t\\t\\t\\t\\tvertices.push( this.readFloat( data ) );\\n\\t\\t\\t\\t\\t\\tvertices.push( this.readFloat( data ) );\\n\\t\\t\\t\\t\\t\\tvertices.push( this.readFloat( data ) );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tgeometry.addAttribute( \\'position\\', new THREE.BufferAttribute( new Float32Array( vertices ), 3 ) );\\n\\n\\t\\t\\t\\t} else\\t{ //Geometry\\n\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < points; i ++ )\\t\\t{\\n\\n\\t\\t\\t\\t\\t\\tgeometry.vertices.push( new THREE.Vector3( this.readFloat( data ), this.readFloat( data ), this.readFloat( data ) ) );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if ( next === FACE_ARRAY ) {\\n\\n\\t\\t\\t\\tthis.resetPosition( data );\\n\\t\\t\\t\\tthis.readFaceArray( data, mesh );\\n\\n\\t\\t\\t} else if ( next === TEX_VERTS ) {\\n\\n\\t\\t\\t\\tvar texels = this.readWord( data );\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'   UV: \\' + texels );\\n\\n\\t\\t\\t\\t//BufferGeometry\\n\\n\\t\\t\\t\\tif ( useBufferGeometry )\\t{\\n\\n\\t\\t\\t\\t\\tvar uvs = [];\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < texels; i ++ )\\t\\t{\\n\\n\\t\\t\\t\\t\\t\\tuvs.push( this.readFloat( data ) );\\n\\t\\t\\t\\t\\t\\tuvs.push( this.readFloat( data ) );\\n\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tgeometry.addAttribute( \\'uv\\', new THREE.BufferAttribute( new Float32Array( uvs ), 2 ) );\\n\\n\\t\\t\\t\\t} else { //Geometry\\n\\n\\t\\t\\t\\t\\tuvs = [];\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < texels; i ++ )\\t\\t{\\n\\n\\t\\t\\t\\t\\t\\tuvs.push( new THREE.Vector2( this.readFloat( data ), this.readFloat( data ) ) );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if ( next === MESH_MATRIX ) {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'   Tranformation Matrix (TODO)\\' );\\n\\n\\t\\t\\t\\tvar values = [];\\n\\t\\t\\t\\tfor ( var i = 0; i < 12; i ++ ) {\\n\\n\\t\\t\\t\\t\\tvalues[ i ] = this.readFloat( data );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvar matrix = new THREE.Matrix4();\\n\\n\\t\\t\\t\\t//X Line\\n\\t\\t\\t\\tmatrix.elements[ 0 ] = values[ 0 ];\\n\\t\\t\\t\\tmatrix.elements[ 1 ] = values[ 6 ];\\n\\t\\t\\t\\tmatrix.elements[ 2 ] = values[ 3 ];\\n\\t\\t\\t\\tmatrix.elements[ 3 ] = values[ 9 ];\\n\\n\\t\\t\\t\\t//Y Line\\n\\t\\t\\t\\tmatrix.elements[ 4 ] = values[ 2 ];\\n\\t\\t\\t\\tmatrix.elements[ 5 ] = values[ 8 ];\\n\\t\\t\\t\\tmatrix.elements[ 6 ] = values[ 5 ];\\n\\t\\t\\t\\tmatrix.elements[ 7 ] = values[ 11 ];\\n\\n\\t\\t\\t\\t//Z Line\\n\\t\\t\\t\\tmatrix.elements[ 8 ] = values[ 1 ];\\n\\t\\t\\t\\tmatrix.elements[ 9 ] = values[ 7 ];\\n\\t\\t\\t\\tmatrix.elements[ 10 ] = values[ 4 ];\\n\\t\\t\\t\\tmatrix.elements[ 11 ] = values[ 10 ];\\n\\n\\t\\t\\t\\t//W Line\\n\\t\\t\\t\\tmatrix.elements[ 12 ] = 0;\\n\\t\\t\\t\\tmatrix.elements[ 13 ] = 0;\\n\\t\\t\\t\\tmatrix.elements[ 14 ] = 0;\\n\\t\\t\\t\\tmatrix.elements[ 15 ] = 1;\\n\\n\\t\\t\\t\\tmatrix.transpose();\\n\\n\\t\\t\\t\\tvar inverse = new THREE.Matrix4();\\n\\t\\t\\t\\tinverse.getInverse( matrix, true );\\n\\t\\t\\t\\tgeometry.applyMatrix( inverse );\\n\\n\\t\\t\\t\\tmatrix.decompose( mesh.position, mesh.quaternion, mesh.scale );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'   Unknown mesh chunk: \\' + next.toString( 16 ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tnext = this.nextChunk( data, chunk );\\n\\n\\t\\t}\\n\\n\\t\\tthis.endChunk( chunk );\\n\\n\\t\\tif ( ! useBufferGeometry ) {\\n\\n\\t\\t\\t//geometry.faceVertexUvs[0][faceIndex][vertexIndex]\\n\\n\\t\\t\\tif ( uvs.length > 0 ) {\\n\\n\\t\\t\\t\\tvar faceUV = [];\\n\\n\\t\\t\\t\\tfor ( var i = 0; i < geometry.faces.length; i ++ ) {\\n\\n\\t\\t\\t\\t\\tfaceUV.push( [ uvs[ geometry.faces[ i ].a ], uvs[ geometry.faces[ i ].b ], uvs[ geometry.faces[ i ].c ] ] );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgeometry.faceVertexUvs[ 0 ] = faceUV;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tgeometry.computeVertexNormals();\\n\\n\\t\\t}\\n\\n\\t\\treturn mesh;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read face array data chunk.\\n\\t *\\n\\t * @method readFaceArray\\n\\t * @param {Dataview} data Dataview in use.\\n\\t * @param {Mesh} mesh Mesh to be filled with the data read.\\n\\t */\\n\\treadFaceArray: function ( data, mesh ) {\\n\\n\\t\\tvar chunk = this.readChunk( data );\\n\\t\\tvar faces = this.readWord( data );\\n\\n\\t\\tthis.debugMessage( \\'   Faces: \\' + faces );\\n\\n\\t\\tfor ( var i = 0; i < faces; ++ i ) {\\n\\n\\t\\t\\tmesh.geometry.faces.push( new THREE.Face3( this.readWord( data ), this.readWord( data ), this.readWord( data ) ) );\\n\\n\\t\\t\\tvar visibility = this.readWord( data );\\n\\n\\t\\t}\\n\\n\\t\\t//The rest of the FACE_ARRAY chunk is subchunks\\n\\n\\t\\twhile ( this.position < chunk.end ) {\\n\\n\\t\\t\\tvar chunk = this.readChunk( data );\\n\\n\\t\\t\\tif ( chunk.id === MSH_MAT_GROUP ) {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'      Material Group\\' );\\n\\n\\t\\t\\t\\tthis.resetPosition( data );\\n\\n\\t\\t\\t\\tvar group = this.readMaterialGroup( data );\\n\\n\\t\\t\\t\\tvar material = this.materials[ group.name ];\\n\\n\\t\\t\\t\\tif ( material !== undefined )\\t{\\n\\n\\t\\t\\t\\t\\tmesh.material = material;\\n\\n\\t\\t\\t\\t\\tif ( material.name === \\'\\' )\\t\\t{\\n\\n\\t\\t\\t\\t\\t\\tmaterial.name = mesh.name;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'      Unknown face array chunk: \\' + chunk.toString( 16 ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.endChunk( chunk );\\n\\n\\t\\t}\\n\\n\\t\\tthis.endChunk( chunk );\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read texture map data chunk.\\n\\t *\\n\\t * @method readMap\\n\\t * @param {Dataview} data Dataview in use.\\n\\t * @return {Texture} Texture read from this data chunk.\\n\\t */\\n\\treadMap: function ( data, path ) {\\n    if (this.skipMaps) return null;\\n\\n\\t\\tvar chunk = this.readChunk( data );\\n\\t\\tvar next = this.nextChunk( data, chunk );\\n\\t\\tvar texture = {};\\n\\n\\t\\tvar loader = new THREE.TextureLoader( this.manager );\\n\\t\\tloader.setPath( path );\\n\\n\\t\\twhile ( next !== 0 ) {\\n\\n\\t\\t\\tif ( next === MAT_MAPNAME ) {\\n\\n\\t\\t\\t\\tvar name = this.readString( data, 128 );\\n\\t\\t\\t\\ttexture = loader.load( name );\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'      File: \\' + path + name );\\n\\n\\t\\t\\t} else if ( next === MAT_MAP_UOFFSET ) {\\n\\n\\t\\t\\t\\ttexture.offset.x = this.readFloat( data );\\n\\t\\t\\t\\tthis.debugMessage( \\'      OffsetX: \\' + texture.offset.x );\\n\\n\\t\\t\\t} else if ( next === MAT_MAP_VOFFSET ) {\\n\\n\\t\\t\\t\\ttexture.offset.y = this.readFloat( data );\\n\\t\\t\\t\\tthis.debugMessage( \\'      OffsetY: \\' + texture.offset.y );\\n\\n\\t\\t\\t} else if ( next === MAT_MAP_USCALE ) {\\n\\n\\t\\t\\t\\ttexture.repeat.x = this.readFloat( data );\\n\\t\\t\\t\\tthis.debugMessage( \\'      RepeatX: \\' + texture.repeat.x );\\n\\n\\t\\t\\t} else if ( next === MAT_MAP_VSCALE ) {\\n\\n\\t\\t\\t\\ttexture.repeat.y = this.readFloat( data );\\n\\t\\t\\t\\tthis.debugMessage( \\'      RepeatY: \\' + texture.repeat.y );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tthis.debugMessage( \\'      Unknown map chunk: \\' + next.toString( 16 ) );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tnext = this.nextChunk( data, chunk );\\n\\n\\t\\t}\\n\\n\\t\\tthis.endChunk( chunk );\\n\\n\\t\\treturn texture;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read material group data chunk.\\n\\t *\\n\\t * @method readMaterialGroup\\n\\t * @param {Dataview} data Dataview in use.\\n\\t * @return {Object} Object with name and index of the object.\\n\\t */\\n\\treadMaterialGroup: function ( data ) {\\n\\n\\t\\tvar chunk = this.readChunk( data );\\n\\t\\tvar name = this.readString( data, 64 );\\n\\t\\tvar numFaces = this.readWord( data );\\n\\n\\t\\tthis.debugMessage( \\'         Name: \\' + name );\\n\\t\\tthis.debugMessage( \\'         Faces: \\' + numFaces );\\n\\n\\t\\tvar index = [];\\n\\t\\tfor ( var i = 0; i < numFaces; ++ i ) {\\n\\n\\t\\t\\tindex.push( this.readWord( data ) );\\n\\n\\t\\t}\\n\\n\\t\\treturn { name: name, index: index };\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read a color value.\\n\\t *\\n\\t * @method readColor\\n\\t * @param {DataView} data Dataview.\\n\\t * @return {Color} Color value read..\\n\\t */\\n\\treadColor: function ( data ) {\\n\\n\\t\\tvar chunk = this.readChunk( data );\\n\\t\\tvar color = new THREE.Color();\\n\\n\\t\\tif ( chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24 ) {\\n\\n\\t\\t\\tvar r = this.readByte( data );\\n\\t\\t\\tvar g = this.readByte( data );\\n\\t\\t\\tvar b = this.readByte( data );\\n\\n\\t\\t\\tcolor.setRGB( r / 255, g / 255, b / 255 );\\n\\n\\t\\t\\tthis.debugMessage( \\'      Color: \\' + color.r + \\', \\' + color.g + \\', \\' + color.b );\\n\\n\\t\\t}\\telse if ( chunk.id === COLOR_F || chunk.id === LIN_COLOR_F ) {\\n\\n\\t\\t\\tvar r = this.readFloat( data );\\n\\t\\t\\tvar g = this.readFloat( data );\\n\\t\\t\\tvar b = this.readFloat( data );\\n\\n\\t\\t\\tcolor.setRGB( r, g, b );\\n\\n\\t\\t\\tthis.debugMessage( \\'      Color: \\' + color.r + \\', \\' + color.g + \\', \\' + color.b );\\n\\n\\t\\t}\\telse {\\n\\n\\t\\t\\tthis.debugMessage( \\'      Unknown color chunk: \\' + chunk.toString( 16 ) );\\n\\n\\t\\t}\\n\\n\\t\\tthis.endChunk( chunk );\\n\\t\\treturn color;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read next chunk of data.\\n\\t *\\n\\t * @method readChunk\\n\\t * @param {DataView} data Dataview.\\n\\t * @return {Object} Chunk of data read.\\n\\t */\\n\\treadChunk: function ( data ) {\\n\\n\\t\\tvar chunk = {};\\n\\n\\t\\tchunk.cur = this.position;\\n\\t\\tchunk.id = this.readWord( data );\\n\\t\\tchunk.size = this.readDWord( data );\\n\\t\\tchunk.end = chunk.cur + chunk.size;\\n\\t\\tchunk.cur += 6;\\n\\n\\t\\treturn chunk;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Set position to the end of the current chunk of data.\\n\\t *\\n\\t * @method endChunk\\n\\t * @param {Object} chunk Data chunk.\\n\\t */\\n\\tendChunk: function ( chunk ) {\\n\\n\\t\\tthis.position = chunk.end;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Move to the next data chunk.\\n\\t *\\n\\t * @method nextChunk\\n\\t * @param {DataView} data Dataview.\\n\\t * @param {Object} chunk Data chunk.\\n\\t */\\n\\tnextChunk: function ( data, chunk ) {\\n\\n\\t\\tif ( chunk.cur >= chunk.end ) {\\n\\n\\t\\t\\treturn 0;\\n\\n\\t\\t}\\n\\n\\t\\tthis.position = chunk.cur;\\n\\n\\t\\ttry {\\n\\n\\t\\t\\tvar next = this.readChunk( data );\\n\\t\\t\\tchunk.cur += next.size;\\n\\t\\t\\treturn next.id;\\n\\n\\t\\t}\\tcatch ( e ) {\\n\\n\\t\\t\\tthis.debugMessage( \\'Unable to read chunk at \\' + this.position );\\n\\t\\t\\treturn 0;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t/**\\n\\t * Reset dataview position.\\n\\t *\\n\\t * @method resetPosition\\n\\t * @param {DataView} data Dataview.\\n\\t */\\n\\tresetPosition: function () {\\n\\n\\t\\tthis.position -= 6;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read byte value.\\n\\t *\\n\\t * @method readByte\\n\\t * @param {DataView} data Dataview to read data from.\\n\\t * @return {Number} Data read from the dataview.\\n\\t */\\n\\treadByte: function ( data ) {\\n\\n\\t\\tvar v = data.getUint8( this.position, true );\\n\\t\\tthis.position += 1;\\n\\t\\treturn v;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read 32 bit float value.\\n\\t *\\n\\t * @method readFloat\\n\\t * @param {DataView} data Dataview to read data from.\\n\\t * @return {Number} Data read from the dataview.\\n\\t */\\n\\treadFloat: function ( data ) {\\n\\n\\t\\ttry {\\n\\n\\t\\t\\tvar v = data.getFloat32( this.position, true );\\n\\t\\t\\tthis.position += 4;\\n\\t\\t\\treturn v;\\n\\n\\t\\t}\\tcatch ( e ) {\\n\\n\\t\\t\\tthis.debugMessage( e + \\' \\' + this.position + \\' \\' + data.byteLength );\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read 32 bit signed integer value.\\n\\t *\\n\\t * @method readInt\\n\\t * @param {DataView} data Dataview to read data from.\\n\\t * @return {Number} Data read from the dataview.\\n\\t */\\n\\treadInt: function ( data ) {\\n\\n\\t\\tvar v = data.getInt32( this.position, true );\\n\\t\\tthis.position += 4;\\n\\t\\treturn v;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read 16 bit signed integer value.\\n\\t *\\n\\t * @method readShort\\n\\t * @param {DataView} data Dataview to read data from.\\n\\t * @return {Number} Data read from the dataview.\\n\\t */\\n\\treadShort: function ( data ) {\\n\\n\\t\\tvar v = data.getInt16( this.position, true );\\n\\t\\tthis.position += 2;\\n\\t\\treturn v;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read 64 bit unsigned integer value.\\n\\t *\\n\\t * @method readDWord\\n\\t * @param {DataView} data Dataview to read data from.\\n\\t * @return {Number} Data read from the dataview.\\n\\t */\\n\\treadDWord: function ( data ) {\\n\\n\\t\\tvar v = data.getUint32( this.position, true );\\n\\t\\tthis.position += 4;\\n\\t\\treturn v;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read 32 bit unsigned integer value.\\n\\t *\\n\\t * @method readWord\\n\\t * @param {DataView} data Dataview to read data from.\\n\\t * @return {Number} Data read from the dataview.\\n\\t */\\n\\treadWord: function ( data ) {\\n\\n\\t\\tvar v = data.getUint16( this.position, true );\\n\\t\\tthis.position += 2;\\n\\t\\treturn v;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Read string value.\\n\\t *\\n\\t * @method readString\\n\\t * @param {DataView} data Dataview to read data from.\\n\\t * @param {Number} maxLength Max size of the string to be read.\\n\\t * @return {String} Data read from the dataview.\\n\\t */\\n\\treadString: function ( data, maxLength ) {\\n\\n\\t\\tvar s = \\'\\';\\n\\n\\t\\tfor ( var i = 0; i < maxLength; i ++ ) {\\n\\n\\t\\t\\tvar c = this.readByte( data );\\n\\t\\t\\tif ( ! c ) {\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\ts += String.fromCharCode( c );\\n\\n\\t\\t}\\n\\n\\t\\treturn s;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Set resource path used to determine the file path to attached resources.\\n\\t *\\n\\t * @method setPath\\n\\t * @param {String} path Path to resources.\\n\\t * @return Self for chaining.\\n\\t */\\n\\tsetPath: function ( path ) {\\n\\n\\t\\tthis.path = path;\\n\\n\\t\\treturn this;\\n\\n\\t},\\n\\n\\t/**\\n\\t * Print debug message to the console.\\n\\t *\\n\\t * Is controlled by a flag to show or hide debug messages.\\n\\t *\\n\\t * @method debugMessage\\n\\t * @param {Object} message Debug message to print to the console.\\n\\t */\\n\\tdebugMessage: function ( message ) {\\n\\n\\t\\tif ( this.debug ) {\\n\\n\\t\\t\\tconsole.log( message );\\n\\n\\t\\t}\\n\\n\\t}\\n};\\n\\nvar NULL_CHUNK = 0x0000;\\nvar M3DMAGIC = 0x4D4D;\\nvar SMAGIC = 0x2D2D;\\nvar LMAGIC = 0x2D3D;\\nvar MLIBMAGIC = 0x3DAA;\\nvar MATMAGIC = 0x3DFF;\\nvar CMAGIC = 0xC23D;\\nvar M3D_VERSION = 0x0002;\\nvar M3D_KFVERSION = 0x0005;\\nvar COLOR_F = 0x0010;\\nvar COLOR_24 = 0x0011;\\nvar LIN_COLOR_24 = 0x0012;\\nvar LIN_COLOR_F = 0x0013;\\nvar INT_PERCENTAGE = 0x0030;\\nvar FLOAT_PERCENTAGE = 0x0031;\\nvar MDATA = 0x3D3D;\\nvar MESH_VERSION = 0x3D3E;\\nvar MASTER_SCALE = 0x0100;\\nvar LO_SHADOW_BIAS = 0x1400;\\nvar HI_SHADOW_BIAS = 0x1410;\\nvar SHADOW_MAP_SIZE = 0x1420;\\nvar SHADOW_SAMPLES = 0x1430;\\nvar SHADOW_RANGE = 0x1440;\\nvar SHADOW_FILTER = 0x1450;\\nvar RAY_BIAS = 0x1460;\\nvar O_CONSTS = 0x1500;\\nvar AMBIENT_LIGHT = 0x2100;\\nvar BIT_MAP = 0x1100;\\nvar SOLID_BGND = 0x1200;\\nvar V_GRADIENT = 0x1300;\\nvar USE_BIT_MAP = 0x1101;\\nvar USE_SOLID_BGND = 0x1201;\\nvar USE_V_GRADIENT = 0x1301;\\nvar FOG = 0x2200;\\nvar FOG_BGND = 0x2210;\\nvar LAYER_FOG = 0x2302;\\nvar DISTANCE_CUE = 0x2300;\\nvar DCUE_BGND = 0x2310;\\nvar USE_FOG = 0x2201;\\nvar USE_LAYER_FOG = 0x2303;\\nvar USE_DISTANCE_CUE = 0x2301;\\nvar MAT_ENTRY = 0xAFFF;\\nvar MAT_NAME = 0xA000;\\nvar MAT_AMBIENT = 0xA010;\\nvar MAT_DIFFUSE = 0xA020;\\nvar MAT_SPECULAR = 0xA030;\\nvar MAT_SHININESS = 0xA040;\\nvar MAT_SHIN2PCT = 0xA041;\\nvar MAT_TRANSPARENCY = 0xA050;\\nvar MAT_XPFALL = 0xA052;\\nvar MAT_USE_XPFALL = 0xA240;\\nvar MAT_REFBLUR = 0xA053;\\nvar MAT_SHADING = 0xA100;\\nvar MAT_USE_REFBLUR = 0xA250;\\nvar MAT_SELF_ILLUM = 0xA084;\\nvar MAT_TWO_SIDE = 0xA081;\\nvar MAT_DECAL = 0xA082;\\nvar MAT_ADDITIVE = 0xA083;\\nvar MAT_WIRE = 0xA085;\\nvar MAT_FACEMAP = 0xA088;\\nvar MAT_TRANSFALLOFF_IN = 0xA08A;\\nvar MAT_PHONGSOFT = 0xA08C;\\nvar MAT_WIREABS = 0xA08E;\\nvar MAT_WIRE_SIZE = 0xA087;\\nvar MAT_TEXMAP = 0xA200;\\nvar MAT_SXP_TEXT_DATA = 0xA320;\\nvar MAT_TEXMASK = 0xA33E;\\nvar MAT_SXP_TEXTMASK_DATA = 0xA32A;\\nvar MAT_TEX2MAP = 0xA33A;\\nvar MAT_SXP_TEXT2_DATA = 0xA321;\\nvar MAT_TEX2MASK = 0xA340;\\nvar MAT_SXP_TEXT2MASK_DATA = 0xA32C;\\nvar MAT_OPACMAP = 0xA210;\\nvar MAT_SXP_OPAC_DATA = 0xA322;\\nvar MAT_OPACMASK = 0xA342;\\nvar MAT_SXP_OPACMASK_DATA = 0xA32E;\\nvar MAT_BUMPMAP = 0xA230;\\nvar MAT_SXP_BUMP_DATA = 0xA324;\\nvar MAT_BUMPMASK = 0xA344;\\nvar MAT_SXP_BUMPMASK_DATA = 0xA330;\\nvar MAT_SPECMAP = 0xA204;\\nvar MAT_SXP_SPEC_DATA = 0xA325;\\nvar MAT_SPECMASK = 0xA348;\\nvar MAT_SXP_SPECMASK_DATA = 0xA332;\\nvar MAT_SHINMAP = 0xA33C;\\nvar MAT_SXP_SHIN_DATA = 0xA326;\\nvar MAT_SHINMASK = 0xA346;\\nvar MAT_SXP_SHINMASK_DATA = 0xA334;\\nvar MAT_SELFIMAP = 0xA33D;\\nvar MAT_SXP_SELFI_DATA = 0xA328;\\nvar MAT_SELFIMASK = 0xA34A;\\nvar MAT_SXP_SELFIMASK_DATA = 0xA336;\\nvar MAT_REFLMAP = 0xA220;\\nvar MAT_REFLMASK = 0xA34C;\\nvar MAT_SXP_REFLMASK_DATA = 0xA338;\\nvar MAT_ACUBIC = 0xA310;\\nvar MAT_MAPNAME = 0xA300;\\nvar MAT_MAP_TILING = 0xA351;\\nvar MAT_MAP_TEXBLUR = 0xA353;\\nvar MAT_MAP_USCALE = 0xA354;\\nvar MAT_MAP_VSCALE = 0xA356;\\nvar MAT_MAP_UOFFSET = 0xA358;\\nvar MAT_MAP_VOFFSET = 0xA35A;\\nvar MAT_MAP_ANG = 0xA35C;\\nvar MAT_MAP_COL1 = 0xA360;\\nvar MAT_MAP_COL2 = 0xA362;\\nvar MAT_MAP_RCOL = 0xA364;\\nvar MAT_MAP_GCOL = 0xA366;\\nvar MAT_MAP_BCOL = 0xA368;\\nvar NAMED_OBJECT = 0x4000;\\nvar N_DIRECT_LIGHT = 0x4600;\\nvar DL_OFF = 0x4620;\\nvar DL_OUTER_RANGE = 0x465A;\\nvar DL_INNER_RANGE = 0x4659;\\nvar DL_MULTIPLIER = 0x465B;\\nvar DL_EXCLUDE = 0x4654;\\nvar DL_ATTENUATE = 0x4625;\\nvar DL_SPOTLIGHT = 0x4610;\\nvar DL_SPOT_ROLL = 0x4656;\\nvar DL_SHADOWED = 0x4630;\\nvar DL_LOCAL_SHADOW2 = 0x4641;\\nvar DL_SEE_CONE = 0x4650;\\nvar DL_SPOT_RECTANGULAR = 0x4651;\\nvar DL_SPOT_ASPECT = 0x4657;\\nvar DL_SPOT_PROJECTOR = 0x4653;\\nvar DL_SPOT_OVERSHOOT = 0x4652;\\nvar DL_RAY_BIAS = 0x4658;\\nvar DL_RAYSHAD = 0x4627;\\nvar N_CAMERA = 0x4700;\\nvar CAM_SEE_CONE = 0x4710;\\nvar CAM_RANGES = 0x4720;\\nvar OBJ_HIDDEN = 0x4010;\\nvar OBJ_VIS_LOFTER = 0x4011;\\nvar OBJ_DOESNT_CAST = 0x4012;\\nvar OBJ_DONT_RECVSHADOW = 0x4017;\\nvar OBJ_MATTE = 0x4013;\\nvar OBJ_FAST = 0x4014;\\nvar OBJ_PROCEDURAL = 0x4015;\\nvar OBJ_FROZEN = 0x4016;\\nvar N_TRI_OBJECT = 0x4100;\\nvar POINT_ARRAY = 0x4110;\\nvar POINT_FLAG_ARRAY = 0x4111;\\nvar FACE_ARRAY = 0x4120;\\nvar MSH_MAT_GROUP = 0x4130;\\nvar SMOOTH_GROUP = 0x4150;\\nvar MSH_BOXMAP = 0x4190;\\nvar TEX_VERTS = 0x4140;\\nvar MESH_MATRIX = 0x4160;\\nvar MESH_COLOR = 0x4165;\\nvar MESH_TEXTURE_INFO = 0x4170;\\nvar KFDATA = 0xB000;\\nvar KFHDR = 0xB00A;\\nvar KFSEG = 0xB008;\\nvar KFCURTIME = 0xB009;\\nvar AMBIENT_NODE_TAG = 0xB001;\\nvar OBJECT_NODE_TAG = 0xB002;\\nvar CAMERA_NODE_TAG = 0xB003;\\nvar TARGET_NODE_TAG = 0xB004;\\nvar LIGHT_NODE_TAG = 0xB005;\\nvar L_TARGET_NODE_TAG = 0xB006;\\nvar SPOTLIGHT_NODE_TAG = 0xB007;\\nvar NODE_ID = 0xB030;\\nvar NODE_HDR = 0xB010;\\nvar PIVOT = 0xB013;\\nvar INSTANCE_NAME = 0xB011;\\nvar MORPH_SMOOTH = 0xB015;\\nvar BOUNDBOX = 0xB014;\\nvar POS_TRACK_TAG = 0xB020;\\nvar COL_TRACK_TAG = 0xB025;\\nvar ROT_TRACK_TAG = 0xB021;\\nvar SCL_TRACK_TAG = 0xB022;\\nvar MORPH_TRACK_TAG = 0xB026;\\nvar FOV_TRACK_TAG = 0xB023;\\nvar ROLL_TRACK_TAG = 0xB024;\\nvar HOT_TRACK_TAG = 0xB027;\\nvar FALL_TRACK_TAG = 0xB028;\\nvar HIDE_TRACK_TAG = 0xB029;\\nvar POLY_2D = 0x5000;\\nvar SHAPE_OK = 0x5010;\\nvar SHAPE_NOT_OK = 0x5011;\\nvar SHAPE_HOOK = 0x5020;\\nvar PATH_3D = 0x6000;\\nvar PATH_MATRIX = 0x6005;\\nvar SHAPE_2D = 0x6010;\\nvar M_SCALE = 0x6020;\\nvar M_TWIST = 0x6030;\\nvar M_TEETER = 0x6040;\\nvar M_FIT = 0x6050;\\nvar M_BEVEL = 0x6060;\\nvar XZ_CURVE = 0x6070;\\nvar YZ_CURVE = 0x6080;\\nvar INTERPCT = 0x6090;\\nvar DEFORM_LIMIT = 0x60A0;\\nvar USE_CONTOUR = 0x6100;\\nvar USE_TWEEN = 0x6110;\\nvar USE_SCALE = 0x6120;\\nvar USE_TWIST = 0x6130;\\nvar USE_TEETER = 0x6140;\\nvar USE_FIT = 0x6150;\\nvar USE_BEVEL = 0x6160;\\nvar DEFAULT_VIEW = 0x3000;\\nvar VIEW_TOP = 0x3010;\\nvar VIEW_BOTTOM = 0x3020;\\nvar VIEW_LEFT = 0x3030;\\nvar VIEW_RIGHT = 0x3040;\\nvar VIEW_FRONT = 0x3050;\\nvar VIEW_BACK = 0x3060;\\nvar VIEW_USER = 0x3070;\\nvar VIEW_CAMERA = 0x3080;\\nvar VIEW_WINDOW = 0x3090;\\nvar VIEWPORT_LAYOUT_OLD = 0x7000;\\nvar VIEWPORT_DATA_OLD = 0x7010;\\nvar VIEWPORT_LAYOUT = 0x7001;\\nvar VIEWPORT_DATA = 0x7011;\\nvar VIEWPORT_DATA_3 = 0x7012;\\nvar VIEWPORT_SIZE = 0x7020;\\nvar NETWORK_VIEW = 0x7030;\\n\\n/* harmony default export */ var TDSLoader = (THREE.TDSLoader);\\n\\n// EXTERNAL MODULE: ./models/wjj.js\\nvar wjj = __webpack_require__(8);\\nvar wjj_default = /*#__PURE__*/__webpack_require__.n(wjj);\\n\\n// CONCATENATED MODULE: ./js/objects/CarObject.js\\n\\n\\n\\n\\nconst CAR_COLOR = 0x0088ff;\\nconst WHEEL_COLOR = 0xff8800;\\n\\nclass CarObject_CarObject extends THREE.Object3D {\\n  constructor(car) {\\n    super();\\n\\n    this.car = car;\\n\\n    this.buildCar2D();\\n    this.buildCar3D();\\n  }\\n\\n  buildCar2D() {\\n    const carMesh = new THREE.Mesh(\\n      new THREE.PlaneGeometry(Car[\"a\" /* default */].HALF_CAR_LENGTH * 2, Car[\"a\" /* default */].HALF_CAR_WIDTH * 2),\\n      new THREE.MeshBasicMaterial({ color: CAR_COLOR, depthTest: false, transparent: true, opacity: 0.7 })\\n    );\\n    carMesh.rotation.x = -Math.PI / 2;\\n    carMesh.layers.set(2);\\n    this.add(carMesh);\\n\\n    const wheelGeometry = new THREE.PlaneGeometry(Car[\"a\" /* default */].HALF_WHEEL_LENGTH * 2, Car[\"a\" /* default */].HALF_WHEEL_WIDTH * 2);\\n    const wheelMaterial = new THREE.MeshBasicMaterial({ color: WHEEL_COLOR, depthTest: false, transparent: true, opacity: 0.7 })\\n\\n    this.lfWheel2D = new THREE.Mesh(wheelGeometry, wheelMaterial);\\n    this.lfWheel2D.renderOrder = 1;\\n    this.lfWheel2D.position.set(Car[\"a\" /* default */].FRONT_AXLE_POS, 0, Car[\"a\" /* default */].WHEEL_LATERAL_POS);\\n    this.lfWheel2D.rotation.x = -Math.PI / 2;\\n    this.lfWheel2D.layers.set(2);\\n    this.add(this.lfWheel2D);\\n\\n    this.rfWheel2D = new THREE.Mesh(wheelGeometry, wheelMaterial);\\n    this.rfWheel2D.renderOrder = 1;\\n    this.rfWheel2D.position.set(Car[\"a\" /* default */].FRONT_AXLE_POS, 0, -Car[\"a\" /* default */].WHEEL_LATERAL_POS);\\n    this.rfWheel2D.rotation.x = -Math.PI / 2;\\n    this.rfWheel2D.layers.set(2);\\n    this.add(this.rfWheel2D);\\n\\n    const lrWheel = new THREE.Mesh(wheelGeometry, wheelMaterial);\\n    lrWheel.renderOrder = 1;\\n    lrWheel.position.set(Car[\"a\" /* default */].REAR_AXLE_POS, 0, Car[\"a\" /* default */].WHEEL_LATERAL_POS);\\n    lrWheel.rotation.x = -Math.PI / 2;\\n    lrWheel.layers.set(2);\\n    this.add(lrWheel);\\n\\n    const rrWheel = new THREE.Mesh(wheelGeometry, wheelMaterial);\\n    rrWheel.renderOrder = 1;\\n    rrWheel.position.set(Car[\"a\" /* default */].REAR_AXLE_POS, 0, -Car[\"a\" /* default */].WHEEL_LATERAL_POS);\\n    rrWheel.rotation.x = -Math.PI / 2;\\n    rrWheel.layers.set(2);\\n    this.add(rrWheel);\\n  }\\n\\n  buildCar3D() {\\n    const loader = new TDSLoader();\\n    loader.skipMaps = true;\\n\\n    loader.load(wjj_default.a, object => {\\n      object.layers.set(3);\\n      object.rotation.z = Math.PI / 2;\\n      object.rotation.x = -Math.PI / 2;\\n\\n      const box = (new THREE.Box3()).setFromObject(object);\\n      const scaleLength = Car[\"a\" /* default */].HALF_CAR_LENGTH * 2 / (box.max.x - box.min.x);\\n      const scaleWidth = Car[\"a\" /* default */].HALF_CAR_WIDTH * 2 / (box.max.z - box.min.z);\\n      object.scale.set(scaleWidth, scaleLength, (scaleWidth + scaleLength) / 2);\\n\\n      box.setFromObject(object);\\n      object.position.setX(-(box.max.x + box.min.x) / 2);\\n      object.position.setY(-box.min.y);\\n\\n      this.add(object);\\n\\n      const carMaterial = new THREE.MeshToonMaterial({ color: 0x0088ff });\\n      const wheelMaterial = new THREE.MeshToonMaterial({ color: 0xff8800 });\\n\\n      object.traverse(child => {\\n        if (child instanceof THREE.Mesh) {\\n          child.layers.set(3);\\n          child.material = [\\'Toyota_RA7\\', \\'Toyota_RA8\\', \\'Toyota_RA9\\', \\'Toyota_R10\\'].includes(child.name) ? wheelMaterial : carMaterial;\\n\\n          if (child.name == \\'Toyota_RA7\\')\\n            this.lfWheel3D = child;\\n          else if (child.name == \\'Toyota_RA8\\')\\n            this.rfWheel3D = child;\\n        }\\n      });\\n\\n      [this.lfWheel3D, this.rfWheel3D].forEach(wheel => {\\n        wheel.geometry.computeBoundingBox();\\n        wheel.geometry.center();\\n        wheel.position.setY(wheel.position.y - 36);\\n        wheel.position.setZ(wheel.position.z + 36);\\n      });\\n    });\\n  }\\n\\n  updateMatrix() {\\n    this.updateCar();\\n    super.updateMatrix();\\n  }\\n\\n  updateCar() {\\n    const carPosition = this.car.position;\\n    this.position.set(carPosition.x, 0, carPosition.y);\\n    this.rotation.y = -this.car.rotation;\\n\\n    const wheelAngle = this.car.wheelAngle;\\n\\n    // Adding the wheels to the car object can trigger this function in some browsers\\n    // before the other wheels are added, so check them first.\\n    if (this.lfWheel2D) this.lfWheel2D.rotation.z = -wheelAngle;\\n    if (this.rfWheel2D) this.rfWheel2D.rotation.z = -wheelAngle;\\n    if (this.lfWheel3D) this.lfWheel3D.rotation.y = wheelAngle;\\n    if (this.rfWheel3D) this.rfWheel3D.rotation.y = wheelAngle;\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./js/objects/StaticObstacleObject.js\\nconst COLOR = 0xdd0000;\\nconst HEIGHT = 5;\\n\\nclass StaticObstacleObject extends THREE.Object3D {\\n  constructor(staticObstacle) {\\n    super();\\n\\n    const mesh2D = new THREE.Mesh(\\n      new THREE.PlaneGeometry(staticObstacle.width, staticObstacle.height),\\n      new THREE.MeshBasicMaterial({ color: COLOR, depthTest: false, transparent: true, opacity: 0.5 })\\n    );\\n    mesh2D.rotation.x = -Math.PI / 2;\\n    mesh2D.layers.set(2);\\n    this.add(mesh2D);\\n\\n    const mesh3D = new THREE.Mesh(\\n      new THREE.BoxBufferGeometry(staticObstacle.width, HEIGHT, staticObstacle.height),\\n      new THREE.MeshToonMaterial({ color: COLOR, transparent: true, opacity: 0.5 })\\n    );\\n    mesh3D.position.setY(HEIGHT / 2);\\n    mesh3D.layers.set(3);\\n    this.add(mesh3D);\\n\\n    this.rotation.y = -staticObstacle.rot;\\n    this.position.set(staticObstacle.pos.x, 0, staticObstacle.pos.y);\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./js/objects/DynamicObstacleObject.js\\nclass DynamicObstacleObject extends THREE.Object3D {\\n  constructor(dynamicObstacle, lanePath) {\\n    super();\\n\\n    this.dynamicObstacle = dynamicObstacle;\\n    this.lanePath = lanePath;\\n\\n    const colors = {\\n      vehicle: 0xff8800,  //0xff8800\\n      cyclist: 0x00ccff,\\n      pedestrian: 0xffdd00\\n    };\\n\\n    const heights = {\\n      vehicle: 2.0,\\n      cyclist: 1.8,\\n      pedestrian: 1.8\\n    };\\n\\n    const mesh2D = new THREE.Mesh(\\n      new THREE.PlaneGeometry(dynamicObstacle.size.w * 2, dynamicObstacle.size.h * 2),\\n      new THREE.MeshBasicMaterial({ color: colors[dynamicObstacle.type] || 0xff8800, depthTest: false, transparent: true, opacity: 0.7 })\\n    );\\n    mesh2D.rotation.x = -Math.PI / 2;\\n    mesh2D.layers.set(2);\\n    this.add(mesh2D);\\n\\n    const mesh3D = new THREE.Mesh(\\n      new THREE.BoxBufferGeometry(dynamicObstacle.size.w * 2, heights[dynamicObstacle.type] || 1.5, dynamicObstacle.size.h * 2),\\n      new THREE.MeshToonMaterial({ color: colors[dynamicObstacle.type] || 0xff8800, transparent: true, opacity: 0.7 })\\n    );\\n    mesh3D.position.setY((heights[dynamicObstacle.type] || 1.5) / 2);\\n    mesh3D.layers.set(3);\\n    this.add(mesh3D);\\n  }\\n\\n  update(time) {\\n    const slPos = this.dynamicObstacle.positionAtTime(time);\\n\\n    // Sample just the station this dynamic obstacle is at\\n    const [sample] = this.lanePath.sampleStations(slPos.x, 1, 0);\\n\\n    if (sample === undefined) {\\n      this.visible = false;\\n      return;\\n    }\\n\\n    const rot = sample.rot;\\n    const pos = THREE.Vector2.fromAngle(rot + Math.PI / 2).multiplyScalar(slPos.y).add(sample.pos);\\n\\n    this.position.set(pos.x, 0, pos.y);\\n    this.rotation.y = -rot;\\n\\n    super.updateMatrix();\\n\\n    this.visible = slPos.x >= 0;\\n  }\\n}\\n\\n// EXTERNAL MODULE: ./js/autonomy/LanePath.js\\nvar LanePath = __webpack_require__(3);\\n\\n// EXTERNAL MODULE: ./js/autonomy/StaticObstacle.js\\nvar StaticObstacle = __webpack_require__(1);\\n\\n// EXTERNAL MODULE: ./js/autonomy/DynamicObstacle.js\\nvar DynamicObstacle = __webpack_require__(5);\\n\\n// CONCATENATED MODULE: ./js/simulator/PathPlannerConfigEditor.js\\n\\n\\nconst LOCAL_STORAGE_KEY = \\'dash_PathPlannerConfig\\';\\n\\nconst internalConfig = {\\n  lattice: {\\n    numStations: 8,\\n    numLatitudes: 17,\\n    stationConnectivity: 3,\\n    latitudeConnectivity: 7\\n  },\\n\\n  roadWidth: 3.7 * 2, // meters\\n\\n  numDynamicFrames: 20,\\n  numDynamicSubframes: 4,\\n\\n  dCurvatureMax: Car[\"a\" /* default */].MAX_STEER_SPEED / Car[\"a\" /* default */].WHEEL_BASE,\\n  rearAxleToCenter: -Car[\"a\" /* default */].REAR_AXLE_POS\\n};\\n\\nconst defaultConfig = {\\n  \\n  //  spatialHorizon: 120, // meters\\n  // centerlineStationInterval: 0.5, // meters\\n\\n  // xyGridCellSize: 0.3, // meters\\n  // slGridCellSize: 0.15, // meters\\n  // gridMargin: 20, // meters\\n  // pathSamplingStep: 1, // meters\\n\\n  // cubicPathPenalty: 0,\\n\\n  // collisionDilationS: Car.HALF_CAR_LENGTH + 2, // meters\\n  // hazardDilationS: 8, // meters\\n  // collisionDilationL: Car.HALF_CAR_WIDTH + 0.5, //meters\\n  // hazardDilationL: 0.5, // meters\\n\\n  // dynamicHazardDilationS: 16,\\n  // dynamicHazardDilationL: 0.5,\\n\\n  // obstacleHazardCost: 200,\\n\\n  // laneCenterLatitude: internalConfig.roadWidth / 4,\\n  // laneShoulderLatitude: internalConfig.roadWidth / 2 * 1.1 - Car.HALF_CAR_WIDTH,\\n  // laneCostSlope: 20, // cost / meter\\n  // lanePreferenceDiscount: 55,\\n\\n  // stationReachDiscount: 400,\\n  // extraTimePenalty: 1000,\\n\\n  // hysteresisDiscount: 50,\\n\\n  // speedLimitPenalty: 200,\\n\\n  // hardAccelerationPenalty: 70,\\n  // hardDecelerationPenalty: 50,\\n\\n  // softLateralAccelerationLimit: 4, // m/s^2\\n  // softLateralAccelerationPenalty: 100,\\n  // linearLateralAccelerationPenalty: 10,\\n\\n  // accelerationChangePenalty: 10,\\n  x方向最大线速度: 0.3,\\n  x方向最小线速度: 0,\\n  最大旋转角速度: 0.2,\\n  最小旋转角速度:0,\\n\\n  x方向的极限加速度:0.1,\\n  极限旋转加速度:0.1,\\n};\\n\\nclass PathPlannerConfigEditor {\\n  constructor() {\\n    this._config = Object.assign({}, defaultConfig);\\n\\n    this.showConfigBox = document.getElementById(\\'show-config-box\\');\\n    this.configBox = document.getElementById(\\'config-box-content\\');\\n    this.configForm = document.getElementById(\\'config-form\\');\\n\\n    this._setUpButtons();\\n\\n    let storedConfig = {};\\n    try {\\n      storedConfig = JSON.parse(window.localStorage.getItem(LOCAL_STORAGE_KEY)) || {};\\n    } catch (e) {}\\n\\n    for (const key of Object.keys(this._config).sort()) {\\n      if (storedConfig[key] !== undefined) this._config[key] = storedConfig[key];\\n      this.configForm.appendChild(this._createConfigField(key, this._config[key]));\\n    }\\n  }\\n\\n  get config() {\\n    return Object.assign({}, this._config, internalConfig);\\n  }\\n\\n  _setUpButtons() {\\n    document.getElementById(\\'show-config-button\\').addEventListener(\\'click\\', e => {\\n      this.showConfigBox.classList.add(\\'is-hidden\\');\\n      this.configBox.classList.remove(\\'is-hidden\\');\\n    });\\n\\n    document.getElementById(\\'hide-config-button\\').addEventListener(\\'click\\', e => {\\n      this.showConfigBox.classList.remove(\\'is-hidden\\');\\n      this.configBox.classList.add(\\'is-hidden\\');\\n    });\\n\\n    document.getElementById(\\'save-config-button\\').addEventListener(\\'click\\', this._saveConfigFields.bind(this));\\n    document.getElementById(\\'restore-defaults-config-button\\').addEventListener(\\'click\\', this._restoreDefaults.bind(this));\\n  }\\n\\n  _createConfigField(key, value) {\\n    const html =\\n      `<div class=\"field is-horizontal\">\\n          <div class=\"field-label is-small\" style=\"flex-grow: 100;\">\\n              <label class=\"label has-text-grey-light\" for=\"config-field-${key}\">${key}</label>\\n          </div>\\n          <div class=\"field-body\">\\n              <div class=\"field\">\\n                  <div class=\"control\" style=\"margin-right: 16px;\">\\n                      <input id=\"config-field-${key}\" name=\"${key}\" class=\"input is-small ${value !== defaultConfig[key] ? \\'is-danger\\' : \\'\\'}\" type=\"text\" style=\"width: 60px; border-width: 2px;\" value=\"${value}\" />\\n                  </div>\\n              </div>\\n          </div>\\n      </div>`;\\n\\n    const template = document.createElement(\\'template\\');\\n    template.innerHTML = html;\\n    return template.content.firstChild;\\n  }\\n\\n  _saveConfigFields() {\\n    const formData = new FormData(this.configForm);\\n\\n    for (const [k, v] of formData.entries()) {\\n      const parsedValue = Number.parseFloat(v);\\n      this._config[k] = parsedValue\\n\\n      const fieldDom = document.getElementById(`config-field-${k}`);\\n      if (parsedValue === defaultConfig[k])\\n        fieldDom.classList.remove(\\'is-danger\\');\\n      else\\n        fieldDom.classList.add(\\'is-danger\\');\\n    }\\n\\n    try {\\n      window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(this._config));\\n    } catch (e) {}\\n  }\\n\\n  _restoreDefaults() {\\n    this._config = Object.assign({}, defaultConfig);\\n\\n    try {\\n      window.localStorage.removeItem(LOCAL_STORAGE_KEY);\\n    } catch (e) {}\\n\\n    while (this.configForm.firstChild)\\n      this.configForm.removeChild(this.configForm.firstChild);\\n\\n    for (const key of Object.keys(this._config).sort())\\n      this.configForm.appendChild(this._createConfigField(key, this._config[key]));\\n  }\\n}\\n\\nPathPlannerConfigEditor.internalConfig = internalConfig;\\n\\n// CONCATENATED MODULE: ./js/simulator/DynamicObstacleEditor.js\\n\\n\\n\\nclass DynamicObstacleEditor_DynamicObstacleEditor {\\n  constructor() {\\n    this.editorDom = document.getElementById(\\'editor-dynamic-obstacles-box\\');\\n    this.formsContainer = document.getElementById(\\'editor-dynamic-obstacle-forms\\');\\n    this.statsDynamicObstacles = document.getElementById(\\'editor-stats-dynamic-obstacles\\');\\n\\n    document.getElementById(\\'editor-add-dynamic-obstacle\\').addEventListener(\\'click\\', this.addDynamicObstacle.bind(this));\\n  }\\n\\n  enable() {\\n    this.editorDom.classList.remove(\\'is-hidden\\');\\n  }\\n\\n  disable() {\\n    this.editorDom.classList.add(\\'is-hidden\\');\\n  }\\n\\n  toJSON() {\\n    const forms = this.formsContainer.getElementsByTagName(\\'form\\');\\n    const obstacles = [];\\n\\n    for (let i = 0; i < forms.length; i++) {\\n      const formData = new FormData(forms[i]);\\n      const params = { parallel: false };\\n\\n      for (const [k, v] of formData.entries())\\n        params[k] = v;\\n\\n      let type = 0;\\n      if (params.type == \\'cyclist\\')\\n        type = 1;\\n      else if (params.type == \\'pedestrian\\')\\n        type = 2;\\n\\n      obstacles.push({\\n        p: [params.sPos, params.lPos],\\n        v: [params.sVel, params.lVel],\\n        l: !!params.parallel ? 1 : 0,\\n        t: type\\n      });\\n    }\\n\\n    return obstacles;\\n  }\\n\\n  loadJSON(json) {\\n    this.clearDynamicObstacles();\\n\\n    json.forEach(o => {\\n      const form = this.addDynamicObstacle();\\n\\n      form[\\'sPos\\'].value = o.p[0];\\n      form[\\'lPos\\'].value = o.p[1];\\n      form[\\'sVel\\'].value = o.v[0];\\n      form[\\'lVel\\'].value = o.v[1];\\n      form[\\'parallel\\'].checked = !!o.l;\\n      form[\\'type\\'].selectedIndex = o.t;\\n    });\\n  }\\n\\n  collectDynamicObstacles() {\\n    const forms = this.formsContainer.getElementsByTagName(\\'form\\');\\n    const obstacles = [];\\n\\n    for (let i = 0; i < forms.length; i++) {\\n      const formData = new FormData(forms[i]);\\n      const params = { parallel: false };\\n\\n      for (const [k, v] of formData.entries())\\n        params[k] = v;\\n\\n      const pos = new THREE.Vector2(Number(params.sPos) || 0, (Number(params.lPos) || 0) * PathPlannerConfigEditor.internalConfig.roadWidth / 2);\\n      const vel = new THREE.Vector2(Number(params.sVel) || 0, Number(params.lVel) || 0);\\n      const parallel = !!params.parallel;\\n\\n      obstacles.push(new DynamicObstacle[\"a\" /* default */](params.type, pos, vel, parallel));\\n    }\\n\\n    return obstacles;\\n  }\\n\\n  addDynamicObstacle() {\\n    const index = this.formsContainer.getElementsByTagName(\\'form\\').length + 1;\\n    const form = this.buildForm(index);\\n\\n    this.formsContainer.appendChild(form);\\n    this.statsDynamicObstacles.textContent = this.formsContainer.getElementsByTagName(\\'form\\').length;\\n\\n    return form;\\n  }\\n\\n  removeDynamicObstacle(form) {\\n    this.formsContainer.removeChild(form);\\n    this.reindexForms();\\n    this.statsDynamicObstacles.textContent = this.formsContainer.getElementsByTagName(\\'form\\').length;\\n  }\\n\\n  clearDynamicObstacles() {\\n    this.formsContainer.innerHTML = \\'\\';\\n    this.statsDynamicObstacles.textContent = 0;\\n  }\\n\\n  reindexForms() {\\n    const forms = this.formsContainer.getElementsByTagName(\\'form\\');\\n\\n    for (let i = 0; i < forms.length; i++) {\\n      forms[i].getElementsByClassName(\\'dynamic-obstacle-index\\')[0].textContent = i + 1;\\n    }\\n  }\\n\\n  buildForm(index) {\\n    const html =\\n      `<form class=\"editor-dynamic-obstacle-form\">\\n          <div class=\"columns is-gapless\">\\n              <div class=\"column is-1\">\\n                  <div class=\"field\">\\n                      <div class=\"field-label is-normal is-size-7 has-text-grey-lighter has-text-weight-bold dynamic-obstacle-index\">${index}</div>\\n                  </div>\\n              </div>\\n              <div class=\"column is-3\">\\n                  <div class=\"field\">\\n                      <div class=\"control\">\\n                          <div class=\"select is-small\">\\n                              <select name=\"type\">\\n                                  <option value=\"vehicle\">Vehicle</option>\\n                                  <option value=\"cyclist\">Cyclist</option>\\n                                  <option value=\"pedestrian\">Pedestrian</option>\\n                              </select>\\n                          </div>\\n                      </div>\\n                  </div>\\n              </div>\\n              <div class=\"column is-1\">\\n                  <div class=\"field\">\\n                      <div class=\"control has-text-centered\">\\n                          <label class=\"checkbox\">\\n                              <input type=\"checkbox\" name=\"parallel\" checked />&nbsp;\\n                          </label>\\n                      </div>\\n                  </div>\\n              </div>\\n              <div class=\"column is-3\">\\n                  <div class=\"field has-addons editor-field-center\">\\n                      <div class=\"control\">\\n                          <input class=\"input is-small\" type=\"text\" name=\"sPos\" style=\"width: 50px;\" value=\"0\" />\\n                      </div>\\n                      <div class=\"control\">\\n                          <input class=\"input is-small\" type=\"text\" name=\"lPos\" style=\"width: 50px;\" value=\"0\" />\\n                      </div>\\n                  </div>\\n              </div>\\n              <div class=\"column is-3\">\\n                  <div class=\"field has-addons editor-field-center\">\\n                      <div class=\"control\">\\n                          <input class=\"input is-small\" type=\"text\" name=\"sVel\" style=\"width: 50px;\" value=\"0\" />\\n                      </div>\\n                      <div class=\"control\">\\n                          <input class=\"input is-small\" type=\"text\" name=\"lVel\" style=\"width: 50px;\" value=\"0\" />\\n                      </div>\\n                  </div>\\n              </div>\\n              <div class=\"column is-1\">\\n                  <div class=\"field has-text-right\">\\n                      <div class=\"button is-small is-danger editor-remove-dynamic-obstacle\" title=\"Remove Dynamic Obstacle\">\\n                          <span class=\"icon is-small\">\\n                              <i class=\"fas fa-lg fa-trash-alt\"></i>\\n                          </span>\\n                      </div>\\n                  </div>\\n              </div>\\n          </div>\\n      </form>`;\\n\\n    const template = document.createElement(\\'template\\');\\n    template.innerHTML = html;\\n    const form = template.content.firstChild;\\n\\n    form.getElementsByClassName(\\'editor-remove-dynamic-obstacle\\')[0].addEventListener(\\'click\\', e => this.removeDynamicObstacle(form));\\n\\n    return form;\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./js/Helpers.js\\nfunction formatDate(date) {\\n  return date && date.toLocaleDateString(undefined, {month: \\'short\\', day: \\'numeric\\', year: \\'numeric\\', hour: \\'numeric\\', minute: \\'numeric\\', hour12: true});\\n}\\n\\n\\n\\n// CONCATENATED MODULE: ./js/simulator/examples.js\\n/* harmony default export */ var examples = ([\\n  { name: \"One-car overtake\", data: {\"p\":[-298.12979,357.51057,7.55497,136.89255,255.45446,-186.65063,586.66288,-494.5808],\"s\":[],\"d\":[{\"p\":[\"150\",\"0.5\"],\"v\":[\"15\",\"0\"],\"l\":1,\"t\":0}],\"l\":1238.129,\"c\":{\"s\":\"25\",\"sl\":\"25\",\"lp\":1},\"v\":1} },\\n\\n  { name: \"Two-car overtake\", data: {\"p\":[-276.4674,303.00865,44.88593,120.86712,305.10729,-435.99728],\"s\":[],\"d\":[{\"p\":[\"100\",\"0.5\"],\"v\":[\"5\",\"0\"],\"l\":1,\"t\":0},{\"p\":[\"100\",\"-0.5\"],\"v\":[\"6\",\"0\"],\"l\":1,\"t\":0}],\"l\":990.576,\"c\":{\"s\":\"20\",\"sl\":\"20\",\"lp\":1},\"v\":1} },\\n\\n  { name: \"Rough road\", data: {\"p\":[-102.46078,26.38513,-68.69821,25.79776,-55.94913,19.50427,-25.32284,12.6183,-16.6024,10.7739,-6.708,11.78013,31.36054,12.11554,47.04057,14.7988,56.85048,23.26776,56.84979,35.25828,46.95511,43.89463,25.48979,43.55924,8.13326,52.2799,-15.34437,64.10242],\"s\":[{\"p\":[-54.96429,21.2553],\"r\":-0.27612,\"w\":2.7671,\"h\":1.67703},{\"p\":[-36.09254,12.36963],\"r\":0.14726,\"w\":3.43791,\"h\":1.84475},{\"p\":[-13.41625,14.2537],\"r\":0.11658,\"w\":4.69568,\"h\":1.42549},{\"p\":[44.00931,18.38166],\"r\":0.25771,\"w\":4.94713,\"h\":4.27642},{\"p\":[62.74669,29.41331],\"r\":0,\"w\":4.10855,\"h\":5.86952},{\"p\":[46.71119,38.74469],\"r\":1.14742,\"w\":4.52775,\"h\":6.70794},{\"p\":[-14.26275,63.60006],\"r\":2.67526,\"w\":10.14584,\"h\":12.24173},{\"p\":[19.7351,9.40621],\"r\":0.65041,\"w\":1.97177,\"h\":1.07553},{\"p\":[28.99679,9.71727],\"r\":0.20862,\"w\":1.97175,\"h\":1.03072},{\"p\":[24.15205,9.93872],\"r\":-0.31907,\"w\":1.25476,\"h\":0.9859}],\"d\":[],\"l\":259.088,\"c\":{\"s\":\"10\",\"sl\":\"10\",\"lp\":1},\"v\":1} },\\n\\n  { name: \"Dodging a speeder\", data: {\"p\":[-226.14066,275.34941,21.32194,-6.2654,266.99958,-174.39559,466.42449,-427.95124],\"s\":[],\"d\":[{\"p\":[\"-250\",\"-0.5\"],\"v\":[\"40\",\"0\"],\"l\":1,\"t\":0}],\"l\":996.572,\"c\":{\"s\":\"25\",\"sl\":\"25\",\"lp\":-1},\"v\":1} },\\n\\n  { name: \"Lane blockage with oncoming traffic\", data: {\"p\":[-84.96318,-14.94973,374.91044,-14.7168],\"s\":[{\"p\":[-34.91024,-12.51359],\"r\":0,\"w\":2.76711,\"h\":2.68324}],\"d\":[{\"p\":[\"40\",\"-0.5\"],\"v\":[\"-10\",\"0\"],\"l\":1,\"t\":0},{\"p\":[\"150\",\"-0.5\"],\"v\":[\"-10\",\"0\"],\"l\":1,\"t\":0}],\"l\":459.874,\"c\":{\"s\":\"20\",\"sl\":\"20\",\"lp\":1},\"v\":1} },\\n\\n  { name: \"Merging into slower traffic\", data: {\"p\":[-629.09464,16.31589,281.97162,14.81565],\"s\":[{\"p\":[-440.00152,11.62602],\"r\":0,\"w\":3.1379,\"h\":3.13801},{\"p\":[-259.74036,11.98013],\"r\":0,\"w\":2.51556,\"h\":4.4441},{\"p\":[93.71013,11.27032],\"r\":0,\"w\":4.07947,\"h\":7.84501},{\"p\":[-94.72208,11.28172],\"r\":0,\"w\":3.76609,\"h\":7.53122}],\"d\":[{\"p\":[\"320\",\"0.5\"],\"v\":[\"12\",\"0\"],\"l\":1,\"t\":0},{\"p\":[\"280\",\"0.5\"],\"v\":[\"12\",\"0\"],\"l\":1,\"t\":0},{\"p\":[\"240\",\"0.5\"],\"v\":[\"12\",\"0\"],\"l\":1,\"t\":0},{\"p\":[\"200\",\"0.5\"],\"v\":[\"12\",\"0\"],\"l\":1,\"t\":0},{\"p\":[\"160\",\"0.5\"],\"v\":[\"12\",\"0\"],\"l\":1,\"t\":0},{\"p\":[\"120\",\"0.5\"],\"v\":[\"12\",\"0\"],\"l\":1,\"t\":0},{\"p\":[\"80\",\"0.5\"],\"v\":[\"12\",\"0\"],\"l\":1,\"t\":0},{\"p\":[\"40\",\"0.5\"],\"v\":[\"12\",\"0\"],\"l\":1,\"t\":0},{\"p\":[\"0\",\"0.5\"],\"v\":[\"12\",\"0\"],\"l\":1,\"t\":0},{\"p\":[\"-40\",\"0.5\"],\"v\":[\"12\",\"0\"],\"l\":1,\"t\":0},{\"p\":[\"-80\",\"0.5\"],\"v\":[\"12\",\"0\"],\"l\":1,\"t\":0},{\"p\":[\"-120\",\"0.5\"],\"v\":[\"12\",\"0\"],\"l\":1,\"t\":0},{\"p\":[\"-160\",\"0.5\"],\"v\":[\"12\",\"0\"],\"l\":1,\"t\":0},{\"p\":[\"-200\",\"0.5\"],\"v\":[\"12\",\"0\"],\"l\":1,\"t\":0}],\"l\":911.067,\"c\":{\"s\":\"25\",\"sl\":\"25\",\"lp\":-1},\"v\":1} },\\n\\n  { name: \"Negotiating crosswalks\", data: {\"p\":[-144.73574,55.4495,-104.89441,31.62755,-33.87479,61.57811,54.60631,46.34858,152.3728,-41.4335,219.90258,-113.95225],\"s\":[],\"d\":[{\"p\":[\"51\",\"-2\"],\"v\":[\"0\",\"1.5\"],\"l\":1,\"t\":2},{\"p\":[\"52\",\"+2\"],\"v\":[\"0\",\"-1.6\"],\"l\":1,\"t\":2},{\"p\":[\"53\",\"-2\"],\"v\":[\"0\",\"1.5\"],\"l\":1,\"t\":2},{\"p\":[\"54\",\"+2\"],\"v\":[\"0\",\"-1.4\"],\"l\":1,\"t\":2},{\"p\":[\"55\",\"-2\"],\"v\":[\"0\",\"1.5\"],\"l\":1,\"t\":2},{\"p\":[\"50\",\"+3\"],\"v\":[\"0\",\"-1.5\"],\"l\":1,\"t\":2},{\"p\":[\"51\",\"-3\"],\"v\":[\"0\",\"1.7\"],\"l\":1,\"t\":2},{\"p\":[\"52\",\"+3\"],\"v\":[\"0\",\"-1.5\"],\"l\":1,\"t\":2},{\"p\":[\"53\",\"-3\"],\"v\":[\"0\",\"1.3\"],\"l\":1,\"t\":2},{\"p\":[\"50\",\"-4\"],\"v\":[\"0\",\"1.6\"],\"l\":1,\"t\":2},{\"p\":[\"51\",\"-4\"],\"v\":[\"0\",\"1.2\"],\"l\":1,\"t\":2},{\"p\":[\"52\",\"-5\"],\"v\":[\"0\",\"1.5\"],\"l\":1,\"t\":2},{\"p\":[\"53\",\"-5\"],\"v\":[\"0\",\"1.4\"],\"l\":1,\"t\":2},{\"p\":[\"50\",\"4.5\"],\"v\":[\"0\",\"-1.6\"],\"l\":1,\"t\":2},{\"p\":[\"51\",\"5\"],\"v\":[\"0\",\"-1.4\"],\"l\":1,\"t\":2},{\"p\":[\"52\",\"4\"],\"v\":[\"0\",\"-1.5\"],\"l\":1,\"t\":2},{\"p\":[\"53\",\"4.5\"],\"v\":[\"0\",\"-1.4\"],\"l\":1,\"t\":2},{\"p\":[\"49\",\"5.5\"],\"v\":[\"0\",\"-1.2\"],\"l\":1,\"t\":2},{\"p\":[\"50\",\"6\"],\"v\":[\"0\",\"-1.6\"],\"l\":1,\"t\":2},{\"p\":[\"51\",\"5.75\"],\"v\":[\"0\",\"-1.5\"],\"l\":1,\"t\":2},{\"p\":[\"52\",\"5\"],\"v\":[\"0\",\"-1.5\"],\"l\":1,\"t\":2},{\"p\":[\"49\",\"-6\"],\"v\":[\"0\",\"1.5\"],\"l\":1,\"t\":2},{\"p\":[\"50\",\"-5.5\"],\"v\":[\"0\",\"1.7\"],\"l\":1,\"t\":2},{\"p\":[\"51\",\"-5\"],\"v\":[\"0\",\"0.9\"],\"l\":1,\"t\":2},{\"p\":[\"52\",\"-5.75\"],\"v\":[\"0\",\"1.2\"],\"l\":1,\"t\":2},{\"p\":[\"150\",\"-75\"],\"v\":[\"0\",\"9\"],\"l\":0,\"t\":1},{\"p\":[\"152\",\"-80\"],\"v\":[\"0\",\"10\"],\"l\":0,\"t\":1},{\"p\":[\"154\",\"-85\"],\"v\":[\"0\",\"9.5\"],\"l\":0,\"t\":1},{\"p\":[\"150\",\"75\"],\"v\":[\"0\",\"-10\"],\"l\":0,\"t\":1},{\"p\":[\"152\",\"80\"],\"v\":[\"0\",\"-9\"],\"l\":0,\"t\":1},{\"p\":[\"154\",\"85\"],\"v\":[\"0\",\"-9.5\"],\"l\":0,\"t\":1}],\"l\":447.535,\"c\":{\"s\":\"5\",\"sl\":\"20\",\"lp\":1},\"v\":1} },\\n\\n  { name: \"Chasing the peloton\", data: {\"p\":[-708.1093,561.67222,-657.73649,701.46772,-531.30212,736.41613,-332.91517,708.663,-201.34176,611.01215,-80.04523,477.38232,22.75082,341.69385,147.66174,176.73622,253.02371,-15.01574,448.31828,-335.71836,495.60932,-544.40048],\"s\":[],\"d\":[{\"p\":[\"50\",\"0.4\"],\"v\":[\"15.5\",\"-0.1\"],\"l\":1,\"t\":1},{\"p\":[\"52\",\"0.6\"],\"v\":[\"15.7\",\"-0.15\"],\"l\":1,\"t\":1},{\"p\":[\"54\",\"0.3\"],\"v\":[\"15.3\",\"-0.13\"],\"l\":1,\"t\":1},{\"p\":[\"56\",\"0.7\"],\"v\":[\"15.2\",\"-0.1\"],\"l\":1,\"t\":1},{\"p\":[\"58\",\"0.3\"],\"v\":[\"15.8\",\"-0.12\"],\"l\":1,\"t\":1},{\"p\":[\"60\",\"0.7\"],\"v\":[\"15.6\",\"-0.17\"],\"l\":1,\"t\":1},{\"p\":[\"62\",\"0.1\"],\"v\":[\"15.4\",\"-0.14\"],\"l\":1,\"t\":1},{\"p\":[\"64\",\"-0.1\"],\"v\":[\"15.5\",\"0.13\"],\"l\":1,\"t\":1},{\"p\":[\"66\",\"0.3\"],\"v\":[\"15.3\",\"-0.13\"],\"l\":1,\"t\":1},{\"p\":[\"68\",\"0\"],\"v\":[\"15.6\",\"0.15\"],\"l\":1,\"t\":1},{\"p\":[\"70\",\"-0.3\"],\"v\":[\"15.8\",\"0.17\"],\"l\":1,\"t\":1},{\"p\":[\"72\",\"-0.7\"],\"v\":[\"15.7\",\"0.12\"],\"l\":1,\"t\":1},{\"p\":[\"74\",\"-0.5\"],\"v\":[\"15.1\",\"0.15\"],\"l\":1,\"t\":1},{\"p\":[\"76\",\"-0.7\"],\"v\":[\"15.9\",\"0.11\"],\"l\":1,\"t\":1},{\"p\":[\"78\",\"-0.3\"],\"v\":[\"15.5\",\"0.16\"],\"l\":1,\"t\":1},{\"p\":[\"80\",\"-0.5\"],\"v\":[\"15.6\",\"0.13\"],\"l\":1,\"t\":1}],\"l\":2018.213,\"c\":{\"s\":\"15\",\"sl\":\"25\",\"lp\":1},\"v\":1} }\\n]);\\n\\n// CONCATENATED MODULE: ./js/simulator/ScenarioManager.js\\n\\n\\n\\nconst ScenarioManager_LOCAL_STORAGE_KEY = \\'dash_Scenarios\\';\\n\\nclass ScenarioManager_ScenarioManager {\\n  constructor(editor) {\\n    this.editor = editor;\\n    this.modal = document.getElementById(\\'scenarios-modal\\');\\n\\n    document.getElementById(\\'scenarios-modal-background\\').addEventListener(\\'click\\', this._closeModal.bind(this));\\n    document.getElementById(\\'scenarios-modal-close\\').addEventListener(\\'click\\', this._closeModal.bind(this));\\n\\n    this.examplesTab = document.getElementById(\\'scenarios-modal-examples-tab\\');\\n    this.savedTab = document.getElementById(\\'scenarios-modal-saved-tab\\');\\n    this.importTab = document.getElementById(\\'scenarios-modal-import-tab\\');\\n\\n    this.examplesTabButton = document.getElementById(\\'scenarios-modal-examples-tab-button\\');\\n    this.savedTabButton = document.getElementById(\\'scenarios-modal-saved-tab-button\\');\\n    this.importTabButton = document.getElementById(\\'scenarios-modal-import-tab-button\\');\\n    this.examplesTabButton.addEventListener(\\'click\\', e => this.switchTab(this.examplesTab));\\n    this.savedTabButton.addEventListener(\\'click\\', e => this.switchTab(this.savedTab));\\n    this.importTabButton.addEventListener(\\'click\\', e => this.switchTab(this.importTab));\\n\\n    this.itemsContainer = document.getElementById(\\'scenarios-modal-items\\');\\n\\n    this.sortName = document.getElementById(\\'scenarios-sort-name\\');\\n    this.sortName.addEventListener(\\'click\\', e => this._buildScenarioItems(\\'name\\'));\\n    this.sortSavedAt = document.getElementById(\\'scenarios-sort-saved-at\\');\\n    this.sortSavedAt.addEventListener(\\'click\\', e => this._buildScenarioItems(\\'savedAt\\'));\\n\\n    this.importBox = document.getElementById(\\'scenario-import-box\\');\\n    this.importInfo = document.getElementById(\\'scenario-import-info\\');\\n\\n    this.importBox.addEventListener(\\'input\\', this._importBoxChanged.bind(this));\\n\\n    for (let i = 0; i < examples.length; i++)\\n      document.getElementById(`example-${i}`).addEventListener(\\'click\\', e => this._loadScenario(examples[i]));\\n  }\\n\\n  switchTab(tab) {\\n    this.examplesTab.classList.add(\\'is-hidden\\')\\n    this.savedTab.classList.add(\\'is-hidden\\')\\n    this.importTab.classList.add(\\'is-hidden\\')\\n    this.examplesTabButton.classList.remove(\\'is-active\\');\\n    this.savedTabButton.classList.remove(\\'is-active\\');\\n    this.importTabButton.classList.remove(\\'is-active\\');\\n\\n    let button = this.savedTabButton;\\n    if (tab == this.examplesTab)\\n      button = this.examplesTabButton;\\n    else if (tab == this.importTab)\\n      button = this.importTabButton;\\n\\n    tab.classList.remove(\\'is-hidden\\');\\n    button.classList.add(\\'is-active\\');\\n\\n    if (tab == this.importTab)\\n      this.importBox.focus();\\n  }\\n\\n  saveScenario(name, data, force = false) {\\n    const scenarios = this.fetchScenarios();\\n    let scenario = scenarios[name];\\n    const now = new Date();\\n\\n    if (scenario) {\\n      if (!force) return [false, scenario.savedAt];\\n\\n      scenario.data = data;\\n      scenario.savedAt = now;\\n    } else {\\n       scenario = {\\n        name: name,\\n        data: data,\\n        savedAt: now\\n      };\\n      \\n      scenarios[name] = scenario;\\n    }\\n\\n    const json = JSON.stringify(scenarios);\\n    window.localStorage.setItem(ScenarioManager_LOCAL_STORAGE_KEY, json);\\n\\n    return [true, scenario.savedAt];\\n  }\\n\\n  fetchScenarios() {\\n    const scenarios = JSON.parse(window.localStorage.getItem(ScenarioManager_LOCAL_STORAGE_KEY)) || {};\\n\\n    for (const k in scenarios)\\n      scenarios[k].savedAt = new Date(scenarios[k].savedAt);\\n\\n    return scenarios;\\n  }\\n\\n  showModal(onLoadScenario = null) {\\n    this.onLoadScenario = onLoadScenario;\\n\\n    this.modal.classList.add(\\'is-active\\');\\n    this.switchTab(this.savedTab);\\n\\n    this._buildScenarioItems();\\n    this.itemsContainer.scrollTop = 0;\\n    \\n    this.importBox.value = \\'\\';\\n    this.importBox.dispatchEvent(new Event(\\'input\\'));\\n  }\\n\\n  _closeModal() {\\n    this.onLoadScenario = null;\\n    this.modal.classList.remove(\\'is-active\\');\\n  }\\n\\n  _buildScenarioItems(sort = \\'savedAt\\') {\\n    this.itemsContainer.innerHTML = \\'\\';\\n\\n    this.sortName.classList.remove(\\'is-underlined\\');\\n    this.sortSavedAt.classList.remove(\\'is-underlined\\');\\n    if (sort == \\'name\\')\\n      this.sortName.classList.add(\\'is-underlined\\');\\n    else if (sort == \\'savedAt\\')\\n      this.sortSavedAt.classList.add(\\'is-underlined\\');\\n\\n    const scenarios = Object.values(this.fetchScenarios());\\n\\n    if (scenarios.length == 0) {\\n      this._showEmptyMessage();\\n    } else {\\n      scenarios.sort((a, b) => {\\n        if (sort == \\'savedAt\\') {\\n          if (a.savedAt < b.savedAt) return +1;\\n          else if (b.savedAt < a.savedAt) return -1;\\n        }\\n\\n        const nameA = a.name.toLowerCase();\\n        const nameB = b.name.toLowerCase();\\n\\n        if (nameA < nameB) return -1;\\n        if (nameB < nameA) return +1;\\n        return 0;\\n      });\\n\\n      scenarios.forEach(s => this._addScenarioItem(s));\\n    }\\n  }\\n\\n  _showEmptyMessage() {\\n    this.itemsContainer.innerHTML = \"<i>You don\\'t have any saved scenarios.</i>\";\\n  }\\n\\n  _addScenarioItem(scenario) {\\n    const html =\\n      `<div class=\"columns\">\\n          <div class=\"column is-7 scenario-item-name scenario-item-load\" title=\"\"></div>\\n          <div class=\"column is-4 scenario-item-saved-at\"></div>\\n          <div class=\"column is-1\">\\n              <div class=\"field is-grouped is-pulled-right\">\\n                  <p class=\"control\" style=\"margin-right: 8px;\">\\n                      <span class=\"button is-small is-danger scenario-item-delete\" title=\"Delete\">\\n                          <span class=\"icon is-small\">\\n                              <i class=\"fas fa-lg fa-trash-alt\"></i>\\n                          </span>\\n                      </span>\\n                  </p>\\n              </div>\\n          </div>\\n      </div>`;\\n\\n    const template = document.createElement(\\'template\\');\\n    template.innerHTML = html;\\n    const item = template.content.firstChild;\\n\\n    const nameDom = item.getElementsByClassName(\\'scenario-item-name\\')[0];\\n    nameDom.textContent = scenario.name;\\n    nameDom.title = scenario.name;\\n\\n    item.getElementsByClassName(\\'scenario-item-saved-at\\')[0].textContent = formatDate(scenario.savedAt);\\n\\n    item.getElementsByClassName(\\'scenario-item-load\\')[0].addEventListener(\\'click\\', e => this._loadScenario(scenario));\\n\\n    item.getElementsByClassName(\\'scenario-item-delete\\')[0].addEventListener(\\'click\\', e => {\\n      if (window.confirm(`Are you sure you want to delete the scenario \"${scenario.name}\"?`)) {\\n        this._deleteScenario(scenario);\\n        this.itemsContainer.removeChild(item);\\n\\n        if (this.itemsContainer.children.length == 0)\\n          this._showEmptyMessage();\\n      }\\n    });\\n\\n    this.itemsContainer.appendChild(item);\\n  }\\n\\n  _loadScenario(scenario) {\\n    this.editor.loadJSON(scenario.data);\\n    this.editor.updateSavedInfo(scenario.name, formatDate(scenario.savedAt));\\n\\n    if (this.onLoadScenario) this.onLoadScenario();\\n\\n    this._closeModal();\\n  }\\n\\n  _deleteScenario(scenario) {\\n    const scenarios = this.fetchScenarios();\\n    delete scenarios[scenario.name];\\n\\n    const json = JSON.stringify(scenarios);\\n    window.localStorage.setItem(ScenarioManager_LOCAL_STORAGE_KEY, json);\\n  }\\n\\n  _importBoxChanged() {\\n    this.importBox.classList.remove(\\'is-danger\\');\\n    this.importInfo.classList.add(\\'is-hidden\\');\\n\\n    const encoded = this.importBox.value;\\n\\n    if (encoded != \\'\\') {\\n      try {\\n        const json = JSON.parse(atob(this.importBox.value));\\n\\n        if (json.s === undefined || json.d === undefined || json.p === undefined || json.p.length % 2 != 0)\\n          throw new Error();\\n\\n        this.importInfo.innerHTML = `\\n          <div class=\"button is-small is-static has-text-grey-light is-paddingless\" style=\"background: transparent; border: none;\">\\n              Road Length:&nbsp;<b>${json.l.toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 })}</b>m\\n          </div>\\n          &nbsp;\\n          <div class=\"button is-small is-static has-text-grey-light is-paddingless\" style=\"background: transparent; border: none;\">\\n              Static Obstacles:&nbsp;<b>${json.s.length}</b>\\n          </div>\\n          &nbsp;\\n          <div class=\"button is-small is-static has-text-grey-light is-paddingless\" style=\"background: transparent; border: none;\">\\n              Dynamic Obstacles:&nbsp;<b>${json.d.length}</b>\\n          </div>\\n          <div class=\"button is-small is-success is-pulled-right scenario-import-button\">\\n            <span class=\"icon\">\\n              <i class=\"fas fa-check\"></i>\\n            </span>\\n            <span>Import</span>\\n          </div>\\n        `;\\n\\n        this.importInfo.getElementsByClassName(\\'scenario-import-button\\')[0].addEventListener(\\'click\\', e => this._loadScenario({ data: json }));\\n        this.importInfo.classList.remove(\\'is-hidden\\');\\n      } catch (e) {\\n        this.importBox.classList.add(\\'is-danger\\');\\n      }\\n    }\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./js/simulator/ShareManager.js\\nclass ShareManager {\\n  constructor() {\\n    this.modal = document.getElementById(\\'scenario-share-modal\\');\\n    this.linkDom = document.getElementById(\\'scenario-share-link\\');\\n    this.boxDom = document.getElementById(\\'scenario-share-box\\');\\n    this.clipboardButton = document.getElementById(\\'scenario-share-clipboard\\');\\n    this.clipboardIcon = document.getElementById(\\'scenario-share-clipboard-icon\\');\\n    this.clipboardSuccessIcon = document.getElementById(\\'scenario-share-clipboard-success-icon\\');\\n\\n    document.getElementById(\\'scenario-share-modal-background\\').addEventListener(\\'click\\', this._closeModal.bind(this));\\n    document.getElementById(\\'scenario-share-modal-close\\').addEventListener(\\'click\\', this._closeModal.bind(this));\\n    this.clipboardButton.addEventListener(\\'click\\', this._copyLinkToClipboard.bind(this));\\n\\n    this.linkDom.addEventListener(\\'focus\\', e => this.linkDom.select());\\n    this.boxDom.addEventListener(\\'focus\\', e => this.boxDom.select());\\n  }\\n\\n  showModal(scenario) {\\n    this.modal.classList.add(\\'is-active\\');\\n\\n    this.clipboardIcon.classList.remove(\\'is-hidden\\');\\n    this.clipboardSuccessIcon.classList.add(\\'is-hidden\\');\\n    this.clipboardButton.classList.remove(\\'is-success\\');\\n\\n    const code = btoa(JSON.stringify(scenario));\\n\\n    const url = new URL(window.location);\\n    url.search = \\'\\';\\n    url.hash = \\'/s/\\' + encodeURIComponent(code);\\n\\n    this.linkDom.value = url.href;\\n    this.boxDom.value = code;\\n  }\\n\\n  _closeModal() {\\n    this.modal.classList.remove(\\'is-active\\');\\n  }\\n\\n  _copyLinkToClipboard() {\\n    this.linkDom.focus();\\n    this.linkDom.select();\\n\\n    if (document.execCommand(\\'copy\\', false, null)) {\\n      this.clipboardIcon.classList.add(\\'is-hidden\\');\\n      this.clipboardSuccessIcon.classList.remove(\\'is-hidden\\');\\n      this.clipboardButton.classList.add(\\'is-success\\');\\n    }\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./js/simulator/Editor.js\\n\\n\\n\\n\\n\\n\\n\\nconst GROUND_PLANE = new THREE.Plane(new THREE.Vector3(0, 1, 0));\\n\\nconst NORMAL_OPACITY = 0.7;\\nconst HOVER_OPACITY = 1;\\nconst NORMAL_POINT_COLOR = 0x0088ff;\\nconst HOVER_POINT_COLOR = 0x33ccff;\\nconst NORMAL_STATIC_OBSTACLE_COLOR = 0xdd0000;\\nconst HOVER_STATIC_OBSTACLE_COLOR = 0xdd3333;\\nconst NORMAL_DYNAMIC_OBSTACLE_COLOR = 0xff8800;\\nconst HOVER_DYNAMIC_OBSTACLE_COLOR = 0xffcc33;\\n\\nconst INITIAL_SPEED_FALLBACK = 20;\\nconst SPEED_LIMIT_FALLBACK = 20;\\nconst LANE_PREFERENCE_FALLBACK = +1;\\n\\nclass Editor_Editor {\\n  constructor(canvas, camera, scene) {\\n    this.canvas = canvas;\\n    this.camera = camera;\\n\\n    this.isEnabled = false;\\n    this.raycaster = new THREE.Raycaster();\\n    this.mouse = new THREE.Vector2();\\n    this.dragOffset = new THREE.Vector3();\\n    this.draggingPoint = null;\\n    this.pointIndex = 0;\\n    this.obstacleIndex = 0;\\n    this.previousSavedName = null;\\n    this.scenarioManager = new ScenarioManager_ScenarioManager(this);\\n    this.shareManager = new ShareManager();\\n\\n    this.centerlineGeometry = new THREE.Geometry();\\n    this.leftBoundaryGeometry = new THREE.Geometry();\\n    this.rightBoundaryGeometry = new THREE.Geometry();\\n    this.draggingObstaclePreview = null;\\n\\n    this.group = new THREE.Group();\\n    this.group.renderOrder = 1;\\n    this.pointGroup = new THREE.Group();\\n    this.pointGroup.renderOrder = 2;\\n    this.obstacleGroup = new THREE.Group();\\n    this.obstacleGroup.renderOrder = 1;\\n    this.group.add(this.obstacleGroup);\\n    this.group.add(this.pointGroup);\\n    scene.add(this.group);\\n\\n    this.lanePath = new LanePath[\"a\" /* default */]();\\n    this.dynamicObstacleEditor = new DynamicObstacleEditor_DynamicObstacleEditor();\\n\\n    this.editorPathButton = document.getElementById(\\'editor-path\\');\\n    this.editorPathButton.addEventListener(\\'click\\', e => this.changeEditMode(\\'path\\'));\\n    this.editorObstaclesButton = document.getElementById(\\'editor-obstacles\\');\\n    this.editorObstaclesButton.addEventListener(\\'click\\', e => this.changeEditMode(\\'staticObstacles\\'));\\n    this.editorDynamicObstaclesButton = document.getElementById(\\'editor-dynamic-obstacles\\');\\n    this.editorDynamicObstaclesButton.addEventListener(\\'click\\', e => this.changeEditMode(\\'dynamicObstacles\\'));\\n\\n    this.editorRoadBox = document.getElementById(\\'editor-road-box\\');\\n    this.initialSpeedDom = document.getElementById(\\'editor-initial-speed\\');\\n    this.speedLimitDom = document.getElementById(\\'editor-speed-limit\\');\\n    this.laneLeftDom = document.getElementById(\\'editor-lane-left\\');\\n    this.laneRightDom = document.getElementById(\\'editor-lane-right\\');\\n\\n    this.laneLeftDom.addEventListener(\\'click\\', e => this._changeLanePreference(-1));\\n    this.laneRightDom.addEventListener(\\'click\\', e => this._changeLanePreference(+1));\\n\\n    this.initialSpeedDom.value = INITIAL_SPEED_FALLBACK;\\n    this.speedLimitDom.value = SPEED_LIMIT_FALLBACK;\\n    this._changeLanePreference(LANE_PREFERENCE_FALLBACK);\\n\\n    this.statsRoadLength = document.getElementById(\\'editor-stats-road-length\\');\\n    this.statsStaticObstacles = document.getElementById(\\'editor-stats-static-obstacles\\');\\n    this.statsStation = document.getElementById(\\'editor-stats-station\\');\\n    this.statsLatitude = document.getElementById(\\'editor-stats-latitude\\');\\n    this.scenarioNameDom = document.getElementById(\\'editor-scenario-name\\');\\n    this.scenarioSavedAtDom = document.getElementById(\\'editor-scenario-saved-at\\');\\n\\n    this.helpPath = document.getElementById(\\'editor-help-path\\');\\n    this.helpStaticObstacles = document.getElementById(\\'editor-help-static-obstacles\\');\\n    this.helpDynamicObstacles = document.getElementById(\\'editor-help-dynamic-obstacles\\');\\n\\n    this.changeEditMode(\\'path\\');\\n    this.removeMode = false;\\n\\n    canvas.addEventListener(\\'mousedown\\', this.mouseDown.bind(this));\\n    canvas.addEventListener(\\'mousemove\\', this.mouseMove.bind(this));\\n    canvas.addEventListener(\\'mouseup\\', this.mouseUp.bind(this));\\n    canvas.addEventListener(\\'contextmenu\\', e => this.isEnabled && e.preventDefault());\\n\\n    const editorClearOptions = document.getElementById(\\'editor-clear-options\\');\\n    document.getElementById(\\'editor-clear\\').addEventListener(\\'click\\', event => {\\n      event.stopPropagation();\\n      editorClearOptions.classList.toggle(\\'is-hidden\\');\\n    });\\n    document.addEventListener(\\'click\\', () => editorClearOptions.classList.add(\\'is-hidden\\'));\\n\\n    document.getElementById(\\'editor-clear-obstacles\\').addEventListener(\\'click\\', this.clearStaticObstacles.bind(this));\\n    document.getElementById(\\'editor-clear-dynamic-obstacles\\').addEventListener(\\'click\\', this.dynamicObstacleEditor.clearDynamicObstacles.bind(this.dynamicObstacleEditor));\\n    document.getElementById(\\'editor-clear-path\\').addEventListener(\\'click\\', this.clearPath.bind(this));\\n    document.getElementById(\\'editor-clear-all\\').addEventListener(\\'click\\', this.clearAll.bind(this));\\n\\n    document.getElementById(\\'editor-save\\').addEventListener(\\'click\\', this.saveClicked.bind(this));\\n    document.getElementById(\\'editor-load\\').addEventListener(\\'click\\', this.loadClicked.bind(this));\\n    document.getElementById(\\'editor-share\\').addEventListener(\\'click\\', this.shareClicked.bind(this));\\n\\n    document.addEventListener(\\'keydown\\', this.keyDown.bind(this));\\n    document.addEventListener(\\'keyup\\', this.keyUp.bind(this));\\n\\n    const resolution = new THREE.Vector2(this.canvas.clientWidth, this.canvas.clientHeight);\\n    this.centerlineObject = new THREE.Mesh(\\n      new THREE.Geometry(),\\n      new MeshLineMaterial({\\n        color: new THREE.Color(0x004488),\\n        lineWidth: 8,\\n        resolution: resolution,\\n        sizeAttenuation: false,\\n        near: camera.near,\\n        far: camera.far,\\n        depthWrite: false\\n      })\\n    );\\n    this.centerlineObject.rotation.x = Math.PI / 2;\\n    this.centerlineObject.renderOrder = 1;\\n    this.group.add(this.centerlineObject);\\n\\n    this.leftBoundaryObject = new THREE.Mesh(\\n      new THREE.Geometry(),\\n      new MeshLineMaterial({\\n        color: new THREE.Color(0xff40ff),\\n        lineWidth: 0.15,\\n        resolution: resolution,\\n        transparent: true,\\n        opacity: 0.7\\n      })\\n    );\\n    this.leftBoundaryObject.rotation.x = Math.PI / 2;\\n    this.leftBoundaryObject.renderOrder = 1;\\n    this.group.add(this.leftBoundaryObject);\\n\\n    this.rightBoundaryObject = new THREE.Mesh(\\n      new THREE.Geometry(),\\n      new MeshLineMaterial({\\n        color: new THREE.Color(0xff40ff),\\n        lineWidth: 0.15,\\n        resolution: resolution,\\n        transparent: true,\\n        opacity: 0.7\\n      })\\n    );\\n    this.rightBoundaryObject.rotation.x = Math.PI / 2;\\n    this.rightBoundaryObject.renderOrder = 1;\\n    this.group.add(this.rightBoundaryObject);\\n\\n    window.addEventListener(\\'resize\\', () => {\\n      // Use setTimeout to queue the resolution update after the canvas is reflowed.\\n      // This gets around some weirdness noticed when opening and closing Chrome Developer Tools.\\n      setTimeout(() => {\\n        const resolution = new THREE.Vector2(this.canvas.clientWidth, this.canvas.clientHeight);\\n        this.centerlineObject.material.uniforms.resolution.value = resolution;\\n        this.leftBoundaryObject.material.uniforms.resolution.value = resolution;\\n        this.rightBoundaryObject.material.uniforms.resolution.value = resolution;\\n      }, 0);\\n    });\\n  }\\n\\n  get enabled() {\\n    return this.isEnabled;\\n  }\\n\\n  set enabled(e) {\\n    this.isEnabled = e;\\n    this.pointGroup.visible = this.obstacleGroup.visible = !!this.isEnabled\\n  }\\n\\n  get staticObstacles() {\\n    return this.obstacleGroup.children.map(o => new StaticObstacle[\"a\" /* default */](new THREE.Vector2(o.position.x, o.position.z), -o.rotation.z, o.userData.width, o.userData.height));\\n  }\\n\\n  get dynamicObstacles() {\\n    return this.dynamicObstacleEditor.collectDynamicObstacles();\\n  }\\n\\n  get initialSpeed() {\\n    let speed = parseFloat(this.initialSpeedDom.value);\\n    if (Number.isNaN(speed) || speed < 0)\\n      speed = 0;\\n\\n    return Number.isNaN(speed) || speed < 0 ? INITIAL_SPEED_FALLBACK : speed;\\n  }\\n\\n  get speedLimit() {\\n    let limit = parseFloat(this.speedLimitDom.value);\\n    if (Number.isNaN(limit) || limit < 0)\\n      limit = 0;\\n\\n    return Number.isNaN(limit) || limit < 0 ? SPEED_LIMIT_FALLBACK : limit;\\n  }\\n\\n  scenarioToJSON() {\\n    const trunc = n => +n.toFixed(5);\\n\\n    const json = {\\n      p: Array.prototype.concat.apply([], this.lanePath.anchors.map(a => [trunc(a.x), trunc(a.y)])),\\n      s: this.staticObstacles.map(o => o.toJSON()),\\n      d: this.dynamicObstacleEditor.toJSON(),\\n      l: Number(this.lanePath.arcLength.toFixed(3)),\\n      c: {\\n        s: this.initialSpeedDom.value,\\n        sl: this.speedLimitDom.value,\\n        lp: this.lanePreference\\n      },\\n      v: 1\\n    };\\n\\n    return json;\\n  }\\n\\n  loadJSON(json) {\\n    if (json.p === undefined || json.p.length % 2 != 0) {\\n      throw new Error(\\'Incomplete lane path.\\');\\n    }\\n\\n    this.clearAll();\\n\\n    this.lanePath = new LanePath[\"a\" /* default */]();\\n    for (let i = 0; i < json.p.length; i += 2) {\\n      this.addPoint(new THREE.Vector2(json.p[i], json.p[i + 1]), false);\\n    }\\n    this.lanePath.resampleAll();\\n    this.rebuildPathGeometry();\\n\\n    json.s.forEach(o => {\\n      const staticObstacle = StaticObstacle[\"a\" /* default */].fromJSON(o);\\n      this.addStaticObstacle(new THREE.Vector3(staticObstacle.pos.x, 0, staticObstacle.pos.y), staticObstacle.width, staticObstacle.height, staticObstacle.rot)\\n    });\\n\\n    this.dynamicObstacleEditor.loadJSON(json.d);\\n\\n    let initialSpeed = INITIAL_SPEED_FALLBACK;\\n    let speedLimit = SPEED_LIMIT_FALLBACK;\\n    try { initialSpeed = json.c.s; } catch (e) { }\\n    try { speedLimit = json.c.sl; } catch (e) { }\\n\\n    this.initialSpeedDom.value = initialSpeed;\\n    this.speedLimitDom.value = speedLimit;\\n\\n    let lanePreference = LANE_PREFERENCE_FALLBACK;\\n    try {\\n      if (typeof(json.c.lp) === \\'number\\')\\n        lanePreference = Math.sign(json.c.lp) || LANE_PREFERENCE_FALLBACK;\\n    } catch (e) { }\\n\\n    this._changeLanePreference(lanePreference);\\n  }\\n\\n  update() {\\n    if (!this.isEnabled) return;\\n\\n    this.raycaster.setFromCamera(this.mouse, this.camera);\\n    const intersection = this.raycaster.ray.intersectPlane(GROUND_PLANE);\\n\\n    const [station, latitude, _around] = this.lanePath.stationLatitudeFromPosition(new THREE.Vector2(intersection.x, intersection.z));\\n    this.statsStation.textContent = (station || 0).toFixed(1);\\n    this.statsLatitude.textContent = (latitude || 0).toFixed(1);\\n\\n    if (this.draggingPoint) {\\n      if (intersection != null) {\\n        this.updatePoint(this.draggingPoint, intersection.clone().add(this.dragOffset));\\n        this.rebuildPathGeometry();\\n      }\\n    } else if (this.draggingObstacle) {\\n      if (intersection !== null) {\\n        if (this.draggingObstacle === true) {\\n          if (this.draggingObstaclePreview) this.group.remove(this.draggingObstaclePreview);\\n\\n          const [center, width, height] = this._dimensionsFromRect(this.dragOffset, intersection);\\n\\n          this.draggingObstaclePreview = new THREE.Mesh(\\n            new THREE.PlaneGeometry(width, height),\\n            new THREE.MeshBasicMaterial({ color: NORMAL_STATIC_OBSTACLE_COLOR, depthTest: false, transparent: true, opacity: 0.4 })\\n          );\\n          this.draggingObstaclePreview.rotation.x = -Math.PI / 2;\\n          this.draggingObstaclePreview.position.copy(center);\\n          this.group.add(this.draggingObstaclePreview);\\n        } else {\\n          this.draggingObstacle.position.copy(intersection.clone().add(this.dragOffset));\\n        }\\n      }\\n    } else if (this.rotatingObstacle) {\\n      const rotation = (this.dragOffset.x - this.mouse.x) * 2 *  Math.PI;\\n      this.rotatingObstacle.rotation.z = Math.wrapAngle(rotation + this.initialObstacleRotation);\\n    } else {\\n      this.pointGroup.children.forEach(p => {\\n        p.material.color.set(NORMAL_POINT_COLOR)\\n        p.material.opacity = NORMAL_OPACITY;\\n      });\\n\\n      this.obstacleGroup.children.forEach(o => {\\n        o.material.color.set(NORMAL_STATIC_OBSTACLE_COLOR)\\n        o.material.opacity = NORMAL_OPACITY;\\n      });\\n\\n      this.canvas.classList.remove(\\'editor-grab\\', \\'editor-grabbing\\', \\'editor-removing\\');\\n\\n      if (this.editMode == \\'path\\' && this.pointGroup.children.length > 0) {\\n        let picked = null;\\n        this.raycaster.intersectObjects(this.pointGroup.children).forEach(p => {\\n          if (picked === null || p.object.userData.index > picked.object.userData.index) picked = p;\\n        });\\n\\n        if (picked) {\\n          picked.object.material.color.set(HOVER_POINT_COLOR);\\n          picked.object.material.opacity = HOVER_OPACITY;\\n\\n          if (this.removeMode)\\n            this.canvas.classList.add(\\'editor-removing\\');\\n          else\\n            this.canvas.classList.add(\\'editor-grab\\');\\n        }\\n      } else if (this.editMode == \\'staticObstacles\\' && this.obstacleGroup.children.length > 0) {\\n        let picked = null;\\n        this.raycaster.intersectObjects(this.obstacleGroup.children).forEach(o => {\\n          if (picked === null || o.object.userData.index > picked.object.userData.index) picked = o;\\n        });\\n\\n        if (picked) {\\n          picked.object.material.color.set(HOVER_STATIC_OBSTACLE_COLOR);\\n          picked.object.material.opacity = HOVER_OPACITY;\\n\\n          if (this.removeMode)\\n            this.canvas.classList.add(\\'editor-removing\\');\\n          else\\n            this.canvas.classList.add(\\'editor-grab\\');\\n        }\\n      }\\n    }\\n  }\\n\\n  changeEditMode(mode) {\\n    this.editorPathButton.classList.add(\\'is-outlined\\');\\n    this.editorObstaclesButton.classList.add(\\'is-outlined\\');\\n    this.editorDynamicObstaclesButton.classList.add(\\'is-outlined\\');\\n    this.editorPathButton.classList.remove(\\'is-selected\\');\\n    this.editorObstaclesButton.classList.remove(\\'is-selected\\');\\n    this.editorDynamicObstaclesButton.classList.remove(\\'is-selected\\');\\n    this.editorRoadBox.classList.add(\\'is-hidden\\');\\n    this.helpPath.classList.add(\\'is-hidden\\');\\n    this.helpStaticObstacles.classList.add(\\'is-hidden\\');\\n    this.helpDynamicObstacles.classList.add(\\'is-hidden\\');\\n\\n    if (mode == \\'path\\') {\\n      this.editMode = \\'path\\';\\n      this.editorPathButton.classList.remove(\\'is-outlined\\');\\n      this.editorPathButton.classList.add(\\'is-selected\\');\\n      this.editorRoadBox.classList.remove(\\'is-hidden\\');\\n      this.helpPath.classList.remove(\\'is-hidden\\');\\n      this.dynamicObstacleEditor.disable();\\n    } else if (mode == \\'staticObstacles\\') {\\n      this.editMode = \\'staticObstacles\\';\\n      this.editorObstaclesButton.classList.remove(\\'is-outlined\\');\\n      this.editorObstaclesButton.classList.add(\\'is-selected\\');\\n      this.helpStaticObstacles.classList.remove(\\'is-hidden\\');\\n      this.dynamicObstacleEditor.disable();\\n    } else {\\n      this.editMode = \\'dynamicObstacles\\';\\n      this.editorDynamicObstaclesButton.classList.remove(\\'is-outlined\\');\\n      this.editorDynamicObstaclesButton.classList.add(\\'is-selected\\');\\n      this.helpDynamicObstacles.classList.remove(\\'is-hidden\\');\\n      this.dynamicObstacleEditor.enable();\\n    }\\n  }\\n\\n  addStaticObstacle(center, width, height, rotation = 0) {\\n    const obstacle = new THREE.Mesh(\\n      new THREE.PlaneGeometry(width, height),\\n      new THREE.MeshBasicMaterial({ color: NORMAL_STATIC_OBSTACLE_COLOR, depthTest: false, transparent: true, opacity: NORMAL_OPACITY })\\n    );\\n    obstacle.rotation.x = -Math.PI / 2;\\n    obstacle.rotation.z = -Math.wrapAngle(rotation);\\n    obstacle.position.copy(center);\\n    obstacle.userData = { index: this.obstacleIndex++, width: width, height: height };\\n\\n    this.obstacleGroup.add(obstacle);\\n    this.statsStaticObstacles.textContent = this.obstacleGroup.children.length;\\n  }\\n\\n  removeStaticObstacle(obstacle) {\\n    this.obstacleGroup.remove(obstacle);\\n    this.statsStaticObstacles.textContent = this.obstacleGroup.children.length;\\n  }\\n\\n  clearStaticObstacles() {\\n    this.group.remove(this.obstacleGroup);\\n    this.obstacleGroup = new THREE.Group();\\n    this.obstacleGroup.renderOrder = 1;\\n    this.group.add(this.obstacleGroup);\\n    this.obstacleIndex = 0;\\n    this.statsStaticObstacles.textContent = 0;\\n  }\\n\\n  clearAll() {\\n    this.clearPath();\\n    this.clearStaticObstacles();\\n    this.dynamicObstacleEditor.clearDynamicObstacles();\\n  }\\n\\n  rebuildPathGeometry() {\\n    if (this.lanePath.anchors.length > 1) {\\n      this.centerlineGeometry.setFromPoints(this.lanePath.centerline);\\n      const centerline = new MeshLine();\\n      centerline.setGeometry(this.centerlineGeometry);\\n      this.centerlineObject.geometry = centerline.geometry;\\n\\n      this.leftBoundaryGeometry.setFromPoints(this.lanePath.leftBoundary);\\n      const leftBoundary = new MeshLine();\\n      leftBoundary.setGeometry(this.leftBoundaryGeometry);\\n      this.leftBoundaryObject.geometry = leftBoundary.geometry;\\n\\n      this.rightBoundaryGeometry.setFromPoints(this.lanePath.rightBoundary);\\n      const rightBoundary = new MeshLine();\\n      rightBoundary.setGeometry(this.rightBoundaryGeometry);\\n      this.rightBoundaryObject.geometry = rightBoundary.geometry;\\n    } else {\\n      this.centerlineObject.geometry.dispose();\\n      this.centerlineObject.geometry = new THREE.Geometry();\\n\\n      this.leftBoundaryObject.geometry.dispose();\\n      this.leftBoundaryObject.geometry = new THREE.Geometry();\\n\\n      this.rightBoundaryObject.geometry.dispose();\\n      this.rightBoundaryObject.geometry = new THREE.Geometry();\\n    }\\n\\n    this.statsRoadLength.textContent = this.lanePath.arcLength.toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 });\\n  }\\n\\n  addPoint(pos, resample = true) {\\n    const point = new THREE.Mesh(\\n      new THREE.CircleGeometry(1, 32),\\n      new THREE.MeshBasicMaterial({\\n        color: NORMAL_POINT_COLOR,\\n        depthTest: false,\\n        transparent: true,\\n        opacity: NORMAL_OPACITY\\n      })\\n    );\\n    point.rotation.x = -Math.PI / 2;\\n    point.position.set(pos.x, 0, pos.y);\\n    point.userData = { index: this.pointIndex++ };\\n\\n    this.lanePath.addAnchor(pos, resample);\\n    this.pointGroup.add(point);\\n\\n    return point;\\n  }\\n\\n  updatePoint(object, pos) {\\n    object.position.copy(pos);\\n    this.lanePath.updateAnchor(object.userData.index, new THREE.Vector2(pos.x, pos.z));\\n  }\\n\\n  removePoint(object) {\\n    const index = object.userData.index;\\n\\n    this.pointGroup.remove(object);\\n    this.pointGroup.children.forEach(p => {\\n      if (p.userData.index > index) p.userData.index--;\\n    });\\n    this.pointIndex--;\\n\\n    this.lanePath.removeAnchor(index);\\n  }\\n\\n  clearPath() {\\n    this.group.remove(this.pointGroup);\\n    this.pointGroup = new THREE.Group();\\n    this.pointGroup.renderOrder = 2;\\n    this.group.add(this.pointGroup);\\n    this.pointIndex = 0;\\n\\n    this.lanePath = new LanePath[\"a\" /* default */]();\\n    this.rebuildPathGeometry();\\n\\n    this.initialSpeedDom.value = INITIAL_SPEED_FALLBACK;\\n    this.speedLimitDom.value = SPEED_LIMIT_FALLBACK;\\n  }\\n\\n  keyDown(event) {\\n    if (event.repeat || this.editMode != \\'path\\' && this.editMode != \\'staticObstacles\\') return;\\n\\n    if (event.key == \\'Shift\\') {\\n      this.removeMode = true;\\n      this.canvas.classList.add(\\'editor-pointing\\');\\n      event.preventDefault();\\n    } else if (event.key == \\'Control\\' && this.editMode == \\'staticObstacles\\') {\\n      this.rotateMode = true;\\n      this.canvas.classList.add(\\'editor-pointing\\');\\n      event.preventDefault();\\n    }\\n  }\\n\\n  keyUp(event) {\\n    if (event.key == \\'Shift\\') {\\n      this.removeMode = false;\\n      this.canvas.classList.remove(\\'editor-pointing\\', \\'editor-removing\\');\\n    } else if (event.key == \\'Control\\') {\\n      this.rotateMode = false;\\n      this.canvas.classList.remove(\\'editor-pointing\\', \\'editor-grabbing\\');\\n    }\\n  }\\n\\n  mouseDown(event) {\\n    if (!this.isEnabled || event.button != 0) return;\\n\\n    this.mouse.x = (event.offsetX / this.canvas.clientWidth) * 2 - 1;\\n    this.mouse.y = -(event.offsetY / this.canvas.clientHeight) * 2 + 1;\\n\\n    this.raycaster.setFromCamera(this.mouse, this.camera);\\n\\n    if (this.editMode == \\'path\\') {\\n      let picked = null;\\n      this.raycaster.intersectObjects(this.pointGroup.children).forEach(p => {\\n        if (picked === null || p.object.userData.index > picked.object.userData.index) picked = p;\\n      });\\n\\n      if (picked) {\\n        if (this.removeMode) {\\n          this.removePoint(picked.object);\\n          this.rebuildPathGeometry();\\n        } else {\\n          this.canvas.classList.remove(\\'editor-grab\\');\\n          this.canvas.classList.add(\\'editor-grabbing\\');\\n\\n          this.draggingPoint = picked.object;\\n          this.dragOffset.copy(picked.object.position).sub(picked.point);\\n        }\\n      } else if (!this.removeMode) {\\n        const intersection = this.raycaster.ray.intersectPlane(GROUND_PLANE);\\n        if (intersection != null) {\\n          this.addPoint(new THREE.Vector2(intersection.x, intersection.z));\\n          this.rebuildPathGeometry();\\n        }\\n      }\\n    } else if (this.editMode == \\'staticObstacles\\') {\\n      let picked = null;\\n      this.raycaster.intersectObjects(this.obstacleGroup.children).forEach(o => {\\n        if (picked === null || o.object.userData.index > picked.object.userData.index) picked = o;\\n      });\\n\\n      if (picked) {\\n        if (this.removeMode) {\\n          this.removeStaticObstacle(picked.object);\\n        } else {\\n          this.canvas.classList.remove(\\'editor-grab\\');\\n          this.canvas.classList.add(\\'editor-grabbing\\');\\n\\n          if (this.rotateMode) {\\n            this.rotatingObstacle = picked.object;\\n            this.initialObstacleRotation = picked.object.rotation.z;\\n            this.dragOffset.set(this.mouse.x, this.mouse.y, 0);\\n          } else {\\n            this.draggingObstacle = picked.object;\\n            this.dragOffset.copy(picked.object.position).sub(picked.point);\\n          }\\n        }\\n      } else if (!this.removeMode && !this.rotateMode) {\\n        const intersection = this.raycaster.ray.intersectPlane(GROUND_PLANE);\\n        if (intersection != null) {\\n          this.draggingObstacle = true;\\n          this.dragOffset.copy(intersection);\\n        }\\n      }\\n    }\\n  }\\n\\n  mouseMove(event) {\\n    this.mouse.x = (event.offsetX / this.canvas.clientWidth) * 2 - 1;\\n    this.mouse.y = -(event.offsetY / this.canvas.clientHeight) * 2 + 1;\\n  }\\n\\n  mouseUp(event) {\\n    if (!this.isEnabled || event.button != 0) return;\\n\\n    if (this.draggingObstacle === true) {\\n      this.group.remove(this.draggingObstaclePreview);\\n      this.draggingObstaclePreview = null;\\n\\n      this.mouse.x = (event.offsetX / this.canvas.clientWidth) * 2 - 1;\\n      this.mouse.y = -(event.offsetY / this.canvas.clientHeight) * 2 + 1;\\n\\n      this.raycaster.setFromCamera(this.mouse, this.camera);\\n\\n      const intersection = this.raycaster.ray.intersectPlane(GROUND_PLANE);\\n      if (intersection != null) {\\n        const [center, width, height] = this._dimensionsFromRect(this.dragOffset, intersection);\\n        this.addStaticObstacle(center, width, height);\\n      }\\n    }\\n\\n    this.draggingPoint = null;\\n    this.draggingObstacle = null;\\n    this.rotatingObstacle = null;\\n    this.canvas.classList.remove(\\'editor-grab\\', \\'editor-grabbing\\');\\n  }\\n\\n  updateSavedInfo(name, savedAt) {\\n    this.previousSavedName = name || null;\\n\\n    name = name || \\'Untitled\\';\\n    savedAt = savedAt || \\'Unsaved\\';\\n\\n    this.scenarioNameDom.textContent = name;\\n    this.scenarioNameDom.title = name;\\n    this.scenarioSavedAtDom.textContent = savedAt;\\n  }\\n\\n  _changeLanePreference(pref) {\\n    this.lanePreference = pref;\\n\\n    if (pref > 0) {\\n      this.laneLeftDom.classList.add(\\'is-outlined\\');\\n      this.laneLeftDom.classList.remove(\\'is-selected\\');\\n      this.laneRightDom.classList.remove(\\'is-outlined\\');\\n      this.laneRightDom.classList.add(\\'is-selected\\');\\n    } else {\\n      this.laneRightDom.classList.add(\\'is-outlined\\');\\n      this.laneRightDom.classList.remove(\\'is-selected\\');\\n      this.laneLeftDom.classList.remove(\\'is-outlined\\');\\n      this.laneLeftDom.classList.add(\\'is-selected\\');\\n    }\\n  }\\n\\n  saveClicked() {\\n    const name = window.prompt(\\'Name your scenario:\\', this.previousSavedName || \\'\\');\\n    if (name === null) return;\\n    if (name === \\'\\') {\\n      window.alert(\\'The scenario name cannot be blank.\\');\\n      return;\\n    }\\n\\n    let [success, savedAt] = this.scenarioManager.saveScenario(name, this.scenarioToJSON(), name === this.previousSavedName);\\n    const formattedSavedAt = formatDate(savedAt);\\n\\n    if (success) {\\n      this.updateSavedInfo(name, formattedSavedAt);\\n    } else if (confirm(`A scenario named \"${name}\" already exists, last saved ${formattedSavedAt}. Do you want to overwrite it?`)) {\\n      [success, savedAt] = this.scenarioManager.saveScenario(name, this.scenarioToJSON(), true);\\n      this.updateSavedInfo(name, formatDate(savedAt));\\n    }\\n  }\\n\\n  loadClicked() {\\n    this.scenarioManager.showModal();\\n  }\\n\\n  shareClicked() {\\n    this.shareManager.showModal(this.scenarioToJSON());\\n  }\\n\\n  _dimensionsFromRect(from, to) {\\n    const center = from.clone().add(to).divideScalar(2);\\n    const width = Math.max(0.5, Math.abs(from.x - to.x));\\n    const height = Math.max(0.5, Math.abs(from.z - to.z));\\n    return [center, width, height];\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./js/simulator/OrbitControls.js\\n/**\\n * @author qiao / https://github.com/qiao\\n * @author mrdoob / http://mrdoob.com\\n * @author alteredq / http://alteredqualia.com/\\n * @author WestLangley / http://github.com/WestLangley\\n * @author erich666 / http://erichaines.com\\n */\\n\\n// This set of controls performs orbiting, dollying (zooming), and panning.\\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\\n//\\n//    Orbit - left mouse / touch: one finger move\\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\\n//    Pan - right mouse, or arrow keys / touch: three finger swipe\\n\\nconst OrbitControls = function ( object, domElement ) {\\n\\n\\tthis.object = object;\\n\\n\\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\\n\\n\\t// Set to false to disable this control\\n\\tthis.enabled = true;\\n\\n\\t// \"target\" sets the location of focus, where the object orbits around\\n\\tthis.target = new THREE.Vector3();\\n\\n\\t// How far you can dolly in and out ( PerspectiveCamera only )\\n\\tthis.minDistance = 0;\\n\\tthis.maxDistance = Infinity;\\n\\n\\t// How far you can zoom in and out ( OrthographicCamera only )\\n\\tthis.minZoom = 0;\\n\\tthis.maxZoom = Infinity;\\n\\n\\t// How far you can orbit vertically, upper and lower limits.\\n\\t// Range is 0 to Math.PI radians.\\n\\tthis.minPolarAngle = 0; // radians\\n\\tthis.maxPolarAngle = Math.PI; // radians\\n\\n\\t// How far you can orbit horizontally, upper and lower limits.\\n\\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\\n\\tthis.minAzimuthAngle = - Infinity; // radians\\n\\tthis.maxAzimuthAngle = Infinity; // radians\\n\\n\\t// Set to true to enable damping (inertia)\\n\\t// If damping is enabled, you must call controls.update() in your animation loop\\n\\tthis.enableDamping = false;\\n\\tthis.dampingFactor = 0.25;\\n\\n\\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\\n\\t// Set to false to disable zooming\\n\\tthis.enableZoom = true;\\n\\tthis.zoomSpeed = 1.0;\\n\\n\\t// Set to false to disable rotating\\n\\tthis.enableRotate = true;\\n\\tthis.rotateSpeed = 1.0;\\n\\n\\t// Set to false to disable panning\\n\\tthis.enablePan = true;\\n\\tthis.keyPanSpeed = 7.0;\\t// pixels moved per arrow key push\\n\\n\\t// Set to true to automatically rotate around the target\\n\\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\\n\\tthis.autoRotate = false;\\n\\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\\n\\n\\t// Set to false to disable use of the keys\\n\\tthis.enableKeys = true;\\n\\n\\t// The four arrow keys\\n\\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\\n\\n\\t// Mouse buttons\\n\\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\\n\\n\\t// for reset\\n\\tthis.target0 = this.target.clone();\\n\\tthis.position0 = this.object.position.clone();\\n\\tthis.zoom0 = this.object.zoom;\\n\\n\\t//\\n\\t// public methods\\n\\t//\\n\\n\\tthis.getPolarAngle = function () {\\n\\n\\t\\treturn spherical.phi;\\n\\n\\t};\\n\\n\\tthis.getAzimuthalAngle = function () {\\n\\n\\t\\treturn spherical.theta;\\n\\n\\t};\\n\\n\\tthis.saveState = function () {\\n\\n\\t\\tscope.target0.copy( scope.target );\\n\\t\\tscope.position0.copy( scope.object.position );\\n\\t\\tscope.zoom0 = scope.object.zoom;\\n\\n\\t};\\n\\n\\tthis.reset = function () {\\n\\n\\t\\tscope.target.copy( scope.target0 );\\n\\t\\tscope.object.position.copy( scope.position0 );\\n\\t\\tscope.object.zoom = scope.zoom0;\\n\\n\\t\\tscope.object.updateProjectionMatrix();\\n\\t\\tscope.dispatchEvent( changeEvent );\\n\\n\\t\\tscope.update();\\n\\n\\t\\tstate = STATE.NONE;\\n\\n\\t};\\n\\n  this.rotateLeft = function(angle) {\\n    rotateLeft(angle);\\n  }\\n\\n\\t// this method is exposed, but perhaps it would be better if we can make it private...\\n\\tthis.update = function () {\\n\\n\\t\\tvar offset = new THREE.Vector3();\\n\\n\\t\\t// so camera.up is the orbit axis\\n\\t\\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\\n\\t\\tvar quatInverse = quat.clone().inverse();\\n\\n\\t\\tvar lastPosition = new THREE.Vector3();\\n\\t\\tvar lastQuaternion = new THREE.Quaternion();\\n\\n\\t\\treturn function update() {\\n\\n\\t\\t\\tvar position = scope.object.position;\\n\\n\\t\\t\\toffset.copy( position ).sub( scope.target );\\n\\n\\t\\t\\t// rotate offset to \"y-axis-is-up\" space\\n\\t\\t\\toffset.applyQuaternion( quat );\\n\\n\\t\\t\\t// angle from z-axis around y-axis\\n\\t\\t\\tspherical.setFromVector3( offset );\\n\\n\\t\\t\\tif ( scope.autoRotate && state === STATE.NONE ) {\\n\\n\\t\\t\\t\\trotateLeft( getAutoRotationAngle() );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tspherical.theta += sphericalDelta.theta;\\n\\t\\t\\tspherical.phi += sphericalDelta.phi;\\n\\n\\t\\t\\t// restrict theta to be between desired limits\\n\\t\\t\\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\\n\\n\\t\\t\\t// restrict phi to be between desired limits\\n\\t\\t\\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\\n\\n\\t\\t\\tspherical.makeSafe();\\n\\n\\n\\t\\t\\tspherical.radius *= scale;\\n\\n\\t\\t\\t// restrict radius to be between desired limits\\n\\t\\t\\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\\n\\n\\t\\t\\t// move target to panned location\\n\\t\\t\\tscope.target.add( panOffset );\\n\\n\\t\\t\\toffset.setFromSpherical( spherical );\\n\\n\\t\\t\\t// rotate offset back to \"camera-up-vector-is-up\" space\\n\\t\\t\\toffset.applyQuaternion( quatInverse );\\n\\n\\t\\t\\tposition.copy( scope.target ).add( offset );\\n\\n\\t\\t\\tscope.object.lookAt( scope.target );\\n\\n\\t\\t\\tif ( scope.enableDamping === true ) {\\n\\n\\t\\t\\t\\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\\n\\t\\t\\t\\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tsphericalDelta.set( 0, 0, 0 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tscale = 1;\\n\\t\\t\\tpanOffset.set( 0, 0, 0 );\\n\\n\\t\\t\\t// update condition is:\\n\\t\\t\\t// min(camera displacement, camera rotation in radians)^2 > EPS\\n\\t\\t\\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\\n\\n\\t\\t\\tif ( zoomChanged ||\\n\\t\\t\\t\\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\\n\\t\\t\\t\\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\\n\\n\\t\\t\\t\\tscope.dispatchEvent( changeEvent );\\n\\n\\t\\t\\t\\tlastPosition.copy( scope.object.position );\\n\\t\\t\\t\\tlastQuaternion.copy( scope.object.quaternion );\\n\\t\\t\\t\\tzoomChanged = false;\\n\\n\\t\\t\\t\\treturn true;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn false;\\n\\n\\t\\t};\\n\\n\\t}();\\n\\n\\tthis.dispose = function () {\\n\\n\\t\\tscope.domElement.removeEventListener( \\'contextmenu\\', onContextMenu, false );\\n\\t\\tscope.domElement.removeEventListener( \\'mousedown\\', onMouseDown, false );\\n\\t\\tscope.domElement.removeEventListener( \\'wheel\\', onMouseWheel, false );\\n\\n\\t\\tscope.domElement.removeEventListener( \\'touchstart\\', onTouchStart, false );\\n\\t\\tscope.domElement.removeEventListener( \\'touchend\\', onTouchEnd, false );\\n\\t\\tscope.domElement.removeEventListener( \\'touchmove\\', onTouchMove, false );\\n\\n\\t\\tdocument.removeEventListener( \\'mousemove\\', onMouseMove, false );\\n\\t\\tdocument.removeEventListener( \\'mouseup\\', onMouseUp, false );\\n\\n\\t\\twindow.removeEventListener( \\'keydown\\', onKeyDown, false );\\n\\n\\t\\t//scope.dispatchEvent( { type: \\'dispose\\' } ); // should this be added here?\\n\\n\\t};\\n\\n\\t//\\n\\t// internals\\n\\t//\\n\\n\\tvar scope = this;\\n\\n\\tvar changeEvent = { type: \\'change\\' };\\n\\tvar startEvent = { type: \\'start\\' };\\n\\tvar endEvent = { type: \\'end\\' };\\n\\n\\tvar STATE = { NONE: - 1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY: 4, TOUCH_PAN: 5 };\\n\\n\\tvar state = STATE.NONE;\\n\\n\\tvar EPS = 0.000001;\\n\\n\\t// current position in spherical coordinates\\n\\tvar spherical = new THREE.Spherical();\\n\\tvar sphericalDelta = new THREE.Spherical();\\n\\n\\tvar scale = 1;\\n\\tvar panOffset = new THREE.Vector3();\\n\\tvar zoomChanged = false;\\n\\n\\tvar rotateStart = new THREE.Vector2();\\n\\tvar rotateEnd = new THREE.Vector2();\\n\\tvar rotateDelta = new THREE.Vector2();\\n\\n\\tvar panStart = new THREE.Vector2();\\n\\tvar panEnd = new THREE.Vector2();\\n\\tvar panDelta = new THREE.Vector2();\\n\\n\\tvar dollyStart = new THREE.Vector2();\\n\\tvar dollyEnd = new THREE.Vector2();\\n\\tvar dollyDelta = new THREE.Vector2();\\n\\n\\tfunction getAutoRotationAngle() {\\n\\n\\t\\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\\n\\n\\t}\\n\\n\\tfunction getZoomScale() {\\n\\n\\t\\treturn Math.pow( 0.95, scope.zoomSpeed );\\n\\n\\t}\\n\\n\\tfunction rotateLeft( angle ) {\\n\\n\\t\\tsphericalDelta.theta -= angle;\\n\\n\\t}\\n\\n\\tfunction rotateUp( angle ) {\\n\\n\\t\\tsphericalDelta.phi -= angle;\\n\\n\\t}\\n\\n\\tvar panLeft = function () {\\n\\n\\t\\tvar v = new THREE.Vector3();\\n\\n\\t\\treturn function panLeft( distance, objectMatrix ) {\\n\\n\\t\\t\\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\\n\\t\\t\\tv.multiplyScalar( - distance );\\n\\n\\t\\t\\tpanOffset.add( v );\\n\\n\\t\\t};\\n\\n\\t}();\\n\\n\\tvar panUp = function () {\\n\\n\\t\\tvar v = new THREE.Vector3();\\n\\n\\t\\treturn function panUp( distance, objectMatrix ) {\\n\\n\\t\\t\\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\\n\\t\\t\\tv.multiplyScalar( distance );\\n\\n\\t\\t\\tpanOffset.add( v );\\n\\n\\t\\t};\\n\\n\\t}();\\n\\n\\t// deltaX and deltaY are in pixels; right and down are positive\\n\\tvar pan = function () {\\n\\n\\t\\tvar offset = new THREE.Vector3();\\n\\n\\t\\treturn function pan( deltaX, deltaY ) {\\n\\n\\t\\t\\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\\n\\n\\t\\t\\tif ( scope.object.isPerspectiveCamera ) {\\n\\n\\t\\t\\t\\t// perspective\\n\\t\\t\\t\\tvar position = scope.object.position;\\n\\t\\t\\t\\toffset.copy( position ).sub( scope.target );\\n\\t\\t\\t\\tvar targetDistance = offset.length();\\n\\n\\t\\t\\t\\t// half of the fov is center to top of screen\\n\\t\\t\\t\\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\\n\\n\\t\\t\\t\\t// we actually don\\'t use screenWidth, since perspective camera is fixed to screen height\\n\\t\\t\\t\\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\\n\\t\\t\\t\\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\\n\\n\\t\\t\\t} else if ( scope.object.isOrthographicCamera ) {\\n\\n\\t\\t\\t\\t// orthographic\\n\\t\\t\\t\\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\\n\\t\\t\\t\\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// camera neither orthographic nor perspective\\n\\t\\t\\t\\tconsole.warn( \\'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\\' );\\n\\t\\t\\t\\tscope.enablePan = false;\\n\\n\\t\\t\\t}\\n\\n\\t\\t};\\n\\n\\t}();\\n\\n\\tfunction dollyIn( dollyScale ) {\\n\\n\\t\\tif ( scope.object.isPerspectiveCamera ) {\\n\\n\\t\\t\\tscale /= dollyScale;\\n\\n\\t\\t} else if ( scope.object.isOrthographicCamera ) {\\n\\n\\t\\t\\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\\n\\t\\t\\tscope.object.updateProjectionMatrix();\\n\\t\\t\\tzoomChanged = true;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tconsole.warn( \\'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\\' );\\n\\t\\t\\tscope.enableZoom = false;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction dollyOut( dollyScale ) {\\n\\n\\t\\tif ( scope.object.isPerspectiveCamera ) {\\n\\n\\t\\t\\tscale *= dollyScale;\\n\\n\\t\\t} else if ( scope.object.isOrthographicCamera ) {\\n\\n\\t\\t\\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\\n\\t\\t\\tscope.object.updateProjectionMatrix();\\n\\t\\t\\tzoomChanged = true;\\n\\n\\t\\t} else {\\n\\n\\t\\t\\tconsole.warn( \\'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\\' );\\n\\t\\t\\tscope.enableZoom = false;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\t//\\n\\t// event callbacks - update the object state\\n\\t//\\n\\n\\tfunction handleMouseDownRotate( event ) {\\n\\n\\t\\t//console.log( \\'handleMouseDownRotate\\' );\\n\\n\\t\\trotateStart.set( event.clientX, event.clientY );\\n\\n\\t}\\n\\n\\tfunction handleMouseDownDolly( event ) {\\n\\n\\t\\t//console.log( \\'handleMouseDownDolly\\' );\\n\\n\\t\\tdollyStart.set( event.clientX, event.clientY );\\n\\n\\t}\\n\\n\\tfunction handleMouseDownPan( event ) {\\n\\n\\t\\t//console.log( \\'handleMouseDownPan\\' );\\n\\n\\t\\tpanStart.set( event.clientX, event.clientY );\\n\\n\\t}\\n\\n\\tfunction handleMouseMoveRotate( event ) {\\n\\n\\t\\t//console.log( \\'handleMouseMoveRotate\\' );\\n\\n\\t\\trotateEnd.set( event.clientX, event.clientY );\\n\\t\\trotateDelta.subVectors( rotateEnd, rotateStart );\\n\\n\\t\\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\\n\\n\\t\\t// rotating across whole screen goes 360 degrees around\\n\\t\\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\\n\\n\\t\\t// rotating up and down along whole screen attempts to go 360, but limited to 180\\n\\t\\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\\n\\n\\t\\trotateStart.copy( rotateEnd );\\n\\n\\t\\tscope.update();\\n\\n\\t}\\n\\n\\tfunction handleMouseMoveDolly( event ) {\\n\\n\\t\\t//console.log( \\'handleMouseMoveDolly\\' );\\n\\n\\t\\tdollyEnd.set( event.clientX, event.clientY );\\n\\n\\t\\tdollyDelta.subVectors( dollyEnd, dollyStart );\\n\\n\\t\\tif ( dollyDelta.y > 0 ) {\\n\\n\\t\\t\\tdollyIn( getZoomScale() );\\n\\n\\t\\t} else if ( dollyDelta.y < 0 ) {\\n\\n\\t\\t\\tdollyOut( getZoomScale() );\\n\\n\\t\\t}\\n\\n\\t\\tdollyStart.copy( dollyEnd );\\n\\n\\t\\tscope.update();\\n\\n\\t}\\n\\n\\tfunction handleMouseMovePan( event ) {\\n\\n\\t\\t//console.log( \\'handleMouseMovePan\\' );\\n\\n\\t\\tpanEnd.set( event.clientX, event.clientY );\\n\\n\\t\\tpanDelta.subVectors( panEnd, panStart );\\n\\n\\t\\tpan( panDelta.x, panDelta.y );\\n\\n\\t\\tpanStart.copy( panEnd );\\n\\n\\t\\tscope.update();\\n\\n\\t}\\n\\n\\tfunction handleMouseUp( event ) {\\n\\n\\t\\t// console.log( \\'handleMouseUp\\' );\\n\\n\\t}\\n\\n\\tfunction handleMouseWheel( event ) {\\n\\n\\t\\t// console.log( \\'handleMouseWheel\\' );\\n\\n\\t\\tif ( event.deltaY < 0 ) {\\n\\n\\t\\t\\tdollyOut( getZoomScale() );\\n\\n\\t\\t} else if ( event.deltaY > 0 ) {\\n\\n\\t\\t\\tdollyIn( getZoomScale() );\\n\\n\\t\\t}\\n\\n\\t\\tscope.update();\\n\\n\\t}\\n\\n\\tfunction handleKeyDown( event ) {\\n\\n\\t\\t//console.log( \\'handleKeyDown\\' );\\n\\n\\t\\tswitch ( event.keyCode ) {\\n\\n\\t\\t\\tcase scope.keys.UP:\\n\\t\\t\\t\\tpan( 0, scope.keyPanSpeed );\\n\\t\\t\\t\\tscope.update();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase scope.keys.BOTTOM:\\n\\t\\t\\t\\tpan( 0, - scope.keyPanSpeed );\\n\\t\\t\\t\\tscope.update();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase scope.keys.LEFT:\\n\\t\\t\\t\\tpan( scope.keyPanSpeed, 0 );\\n\\t\\t\\t\\tscope.update();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase scope.keys.RIGHT:\\n\\t\\t\\t\\tpan( - scope.keyPanSpeed, 0 );\\n\\t\\t\\t\\tscope.update();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction handleTouchStartRotate( event ) {\\n\\n\\t\\t//console.log( \\'handleTouchStartRotate\\' );\\n\\n\\t\\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\\n\\n\\t}\\n\\n\\tfunction handleTouchStartDolly( event ) {\\n\\n\\t\\t//console.log( \\'handleTouchStartDolly\\' );\\n\\n\\t\\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\\n\\t\\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\\n\\n\\t\\tvar distance = Math.sqrt( dx * dx + dy * dy );\\n\\n\\t\\tdollyStart.set( 0, distance );\\n\\n\\t}\\n\\n\\tfunction handleTouchStartPan( event ) {\\n\\n\\t\\t//console.log( \\'handleTouchStartPan\\' );\\n\\n\\t\\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\\n\\n\\t}\\n\\n\\tfunction handleTouchMoveRotate( event ) {\\n\\n\\t\\t//console.log( \\'handleTouchMoveRotate\\' );\\n\\n\\t\\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\\n\\t\\trotateDelta.subVectors( rotateEnd, rotateStart );\\n\\n\\t\\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\\n\\n\\t\\t// rotating across whole screen goes 360 degrees around\\n\\t\\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\\n\\n\\t\\t// rotating up and down along whole screen attempts to go 360, but limited to 180\\n\\t\\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\\n\\n\\t\\trotateStart.copy( rotateEnd );\\n\\n\\t\\tscope.update();\\n\\n\\t}\\n\\n\\tfunction handleTouchMoveDolly( event ) {\\n\\n\\t\\t//console.log( \\'handleTouchMoveDolly\\' );\\n\\n\\t\\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\\n\\t\\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\\n\\n\\t\\tvar distance = Math.sqrt( dx * dx + dy * dy );\\n\\n\\t\\tdollyEnd.set( 0, distance );\\n\\n\\t\\tdollyDelta.subVectors( dollyEnd, dollyStart );\\n\\n\\t\\tif ( dollyDelta.y > 0 ) {\\n\\n\\t\\t\\tdollyOut( getZoomScale() );\\n\\n\\t\\t} else if ( dollyDelta.y < 0 ) {\\n\\n\\t\\t\\tdollyIn( getZoomScale() );\\n\\n\\t\\t}\\n\\n\\t\\tdollyStart.copy( dollyEnd );\\n\\n\\t\\tscope.update();\\n\\n\\t}\\n\\n\\tfunction handleTouchMovePan( event ) {\\n\\n\\t\\t//console.log( \\'handleTouchMovePan\\' );\\n\\n\\t\\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\\n\\n\\t\\tpanDelta.subVectors( panEnd, panStart );\\n\\n\\t\\tpan( panDelta.x, panDelta.y );\\n\\n\\t\\tpanStart.copy( panEnd );\\n\\n\\t\\tscope.update();\\n\\n\\t}\\n\\n\\tfunction handleTouchEnd( event ) {\\n\\n\\t\\t//console.log( \\'handleTouchEnd\\' );\\n\\n\\t}\\n\\n\\t//\\n\\t// event handlers - FSM: listen for events and reset state\\n\\t//\\n\\n\\tfunction onMouseDown( event ) {\\n\\n\\t\\tif ( scope.enabled === false ) return;\\n\\n\\t\\tevent.preventDefault();\\n\\n\\t\\tswitch ( event.button ) {\\n\\n\\t\\t\\tcase scope.mouseButtons.ORBIT:\\n\\n\\t\\t\\t\\tif ( scope.enableRotate === false ) return;\\n\\n\\t\\t\\t\\thandleMouseDownRotate( event );\\n\\n\\t\\t\\t\\tstate = STATE.ROTATE;\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase scope.mouseButtons.ZOOM:\\n\\n\\t\\t\\t\\tif ( scope.enableZoom === false ) return;\\n\\n\\t\\t\\t\\thandleMouseDownDolly( event );\\n\\n\\t\\t\\t\\tstate = STATE.DOLLY;\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase scope.mouseButtons.PAN:\\n\\n\\t\\t\\t\\tif ( scope.enablePan === false ) return;\\n\\n\\t\\t\\t\\thandleMouseDownPan( event );\\n\\n\\t\\t\\t\\tstate = STATE.PAN;\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t\\tif ( state !== STATE.NONE ) {\\n\\n\\t\\t\\tdocument.addEventListener( \\'mousemove\\', onMouseMove, false );\\n\\t\\t\\tdocument.addEventListener( \\'mouseup\\', onMouseUp, false );\\n\\n\\t\\t\\tscope.dispatchEvent( startEvent );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction onMouseMove( event ) {\\n\\n\\t\\tif ( scope.enabled === false ) return;\\n\\n\\t\\tevent.preventDefault();\\n\\n\\t\\tswitch ( state ) {\\n\\n\\t\\t\\tcase STATE.ROTATE:\\n\\n\\t\\t\\t\\tif ( scope.enableRotate === false ) return;\\n\\n\\t\\t\\t\\thandleMouseMoveRotate( event );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase STATE.DOLLY:\\n\\n\\t\\t\\t\\tif ( scope.enableZoom === false ) return;\\n\\n\\t\\t\\t\\thandleMouseMoveDolly( event );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase STATE.PAN:\\n\\n\\t\\t\\t\\tif ( scope.enablePan === false ) return;\\n\\n\\t\\t\\t\\thandleMouseMovePan( event );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction onMouseUp( event ) {\\n\\n\\t\\tif ( scope.enabled === false ) return;\\n\\n\\t\\thandleMouseUp( event );\\n\\n\\t\\tdocument.removeEventListener( \\'mousemove\\', onMouseMove, false );\\n\\t\\tdocument.removeEventListener( \\'mouseup\\', onMouseUp, false );\\n\\n\\t\\tscope.dispatchEvent( endEvent );\\n\\n\\t\\tstate = STATE.NONE;\\n\\n\\t}\\n\\n\\tfunction onMouseWheel( event ) {\\n\\n\\t\\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\\n\\n\\t\\tevent.preventDefault();\\n\\t\\tevent.stopPropagation();\\n\\n\\t\\thandleMouseWheel( event );\\n\\n\\t\\tscope.dispatchEvent( startEvent ); // not sure why these are here...\\n\\t\\tscope.dispatchEvent( endEvent );\\n\\n\\t}\\n\\n\\tfunction onKeyDown( event ) {\\n\\n\\t\\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\\n\\n\\t\\thandleKeyDown( event );\\n\\n\\t}\\n\\n\\tfunction onTouchStart( event ) {\\n\\n\\t\\tif ( scope.enabled === false ) return;\\n\\n\\t\\tswitch ( event.touches.length ) {\\n\\n\\t\\t\\tcase 1:\\t// one-fingered touch: rotate\\n\\n\\t\\t\\t\\tif ( scope.enableRotate === false ) return;\\n\\n\\t\\t\\t\\thandleTouchStartRotate( event );\\n\\n\\t\\t\\t\\tstate = STATE.TOUCH_ROTATE;\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2:\\t// two-fingered touch: dolly\\n\\n\\t\\t\\t\\tif ( scope.enableZoom === false ) return;\\n\\n\\t\\t\\t\\thandleTouchStartDolly( event );\\n\\n\\t\\t\\t\\tstate = STATE.TOUCH_DOLLY;\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 3: // three-fingered touch: pan\\n\\n\\t\\t\\t\\tif ( scope.enablePan === false ) return;\\n\\n\\t\\t\\t\\thandleTouchStartPan( event );\\n\\n\\t\\t\\t\\tstate = STATE.TOUCH_PAN;\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\n\\t\\t\\t\\tstate = STATE.NONE;\\n\\n\\t\\t}\\n\\n\\t\\tif ( state !== STATE.NONE ) {\\n\\n\\t\\t\\tscope.dispatchEvent( startEvent );\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction onTouchMove( event ) {\\n\\n\\t\\tif ( scope.enabled === false ) return;\\n\\n\\t\\tevent.preventDefault();\\n\\t\\tevent.stopPropagation();\\n\\n\\t\\tswitch ( event.touches.length ) {\\n\\n\\t\\t\\tcase 1: // one-fingered touch: rotate\\n\\n\\t\\t\\t\\tif ( scope.enableRotate === false ) return;\\n\\t\\t\\t\\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\\n\\n\\t\\t\\t\\thandleTouchMoveRotate( event );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 2: // two-fingered touch: dolly\\n\\n\\t\\t\\t\\tif ( scope.enableZoom === false ) return;\\n\\t\\t\\t\\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\\n\\n\\t\\t\\t\\thandleTouchMoveDolly( event );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 3: // three-fingered touch: pan\\n\\n\\t\\t\\t\\tif ( scope.enablePan === false ) return;\\n\\t\\t\\t\\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\\n\\n\\t\\t\\t\\thandleTouchMovePan( event );\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\n\\t\\t\\t\\tstate = STATE.NONE;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfunction onTouchEnd( event ) {\\n\\n\\t\\tif ( scope.enabled === false ) return;\\n\\n\\t\\thandleTouchEnd( event );\\n\\n\\t\\tscope.dispatchEvent( endEvent );\\n\\n\\t\\tstate = STATE.NONE;\\n\\n\\t}\\n\\n\\tfunction onContextMenu( event ) {\\n\\n\\t\\tif ( scope.enabled === false ) return;\\n\\n\\t\\tevent.preventDefault();\\n\\n\\t}\\n\\n\\t//\\n\\n\\tscope.domElement.addEventListener( \\'contextmenu\\', onContextMenu, false );\\n\\n\\tscope.domElement.addEventListener( \\'mousedown\\', onMouseDown, false );\\n\\tscope.domElement.addEventListener( \\'wheel\\', onMouseWheel, false );\\n\\n\\tscope.domElement.addEventListener( \\'touchstart\\', onTouchStart, false );\\n\\tscope.domElement.addEventListener( \\'touchend\\', onTouchEnd, false );\\n\\tscope.domElement.addEventListener( \\'touchmove\\', onTouchMove, false );\\n\\n\\twindow.addEventListener( \\'keydown\\', onKeyDown, false );\\n\\n\\t// force an update at start\\n\\n\\tthis.update();\\n\\n};\\n\\nOrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\\nOrbitControls.prototype.constructor = OrbitControls;\\n\\nObject.defineProperties( OrbitControls.prototype, {\\n\\n\\tcenter: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( \\'OrbitControls: .center has been renamed to .target\\' );\\n\\t\\t\\treturn this.target;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\t// backward compatibility\\n\\n\\tnoZoom: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( \\'OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\\' );\\n\\t\\t\\treturn ! this.enableZoom;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( \\'OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\\' );\\n\\t\\t\\tthis.enableZoom = ! value;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tnoRotate: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( \\'OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\\' );\\n\\t\\t\\treturn ! this.enableRotate;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( \\'OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\\' );\\n\\t\\t\\tthis.enableRotate = ! value;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tnoPan: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( \\'OrbitControls: .noPan has been deprecated. Use .enablePan instead.\\' );\\n\\t\\t\\treturn ! this.enablePan;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( \\'OrbitControls: .noPan has been deprecated. Use .enablePan instead.\\' );\\n\\t\\t\\tthis.enablePan = ! value;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tnoKeys: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( \\'OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\\' );\\n\\t\\t\\treturn ! this.enableKeys;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( \\'OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\\' );\\n\\t\\t\\tthis.enableKeys = ! value;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tstaticMoving: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( \\'OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\\' );\\n\\t\\t\\treturn ! this.enableDamping;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( \\'OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\\' );\\n\\t\\t\\tthis.enableDamping = ! value;\\n\\n\\t\\t}\\n\\n\\t},\\n\\n\\tdynamicDampingFactor: {\\n\\n\\t\\tget: function () {\\n\\n\\t\\t\\tconsole.warn( \\'OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\\' );\\n\\t\\t\\treturn this.dampingFactor;\\n\\n\\t\\t},\\n\\n\\t\\tset: function ( value ) {\\n\\n\\t\\t\\tconsole.warn( \\'OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\\' );\\n\\t\\t\\tthis.dampingFactor = value;\\n\\n\\t\\t}\\n\\n\\t}\\n\\n} );\\n\\n/* harmony default export */ var simulator_OrbitControls = (OrbitControls);\\n\\n// CONCATENATED MODULE: ./js/simulator/TopDownCameraControls.js\\nconst groundPlane = new THREE.Plane(new THREE.Vector3(0, 1, 0));\\nlet panning = false;\\n\\nclass TopDownCameraControls {\\n  constructor(domElement, camera) {\\n    this.domElement = domElement;\\n    this.camera = camera;\\n    this.enablePanning = false;\\n    this.enabled = true;\\n\\n    this.minAltitude = Number.NEGATIVE_INFINITY;\\n    this.maxAltitude = Number.POSITIVE_INFINITY;\\n\\n    this.mouseDown = this.mouseDown.bind(this);\\n    this.mouseMove = this.mouseMove.bind(this);\\n    this.mouseUp = this.mouseUp.bind(this);\\n    this.wheel = this.wheel.bind(this);\\n\\n    this.domElement.addEventListener(\\'mousedown\\', this.mouseDown);\\n    this.domElement.addEventListener(\\'mousemove\\', this.mouseMove);\\n    this.domElement.addEventListener(\\'mouseup\\', this.mouseUp);\\n    this.domElement.addEventListener(\\'wheel\\', this.wheel);\\n  }\\n\\n  reset(prevCamera) {\\n    const lookAt = new THREE.Vector3(0, 0, -1);\\n    lookAt.applyQuaternion(prevCamera.quaternion);\\n\\n    const ray = new THREE.Ray(prevCamera.position, lookAt);\\n    const intersection = ray.intersectPlane(groundPlane);\\n\\n    if (intersection) {\\n      this.camera.position.set(intersection.x, 50, intersection.z);\\n    } else {\\n      this.camera.position.y = 50;\\n    }\\n\\n    this.camera.rotation.set(-Math.PI / 2, 0, 0);\\n  }\\n\\n  mouseDown(event) {\\n    if (!this.enabled || !this.enablePanning || event.button != 2) return;\\n    panning = true;\\n  }\\n\\n  mouseMove(event) {\\n    if (panning) {\\n      const distance = 2 * this.camera.position.y * Math.tan((this.camera.fov / 2) * Math.PI / 180) / this.domElement.clientHeight;\\n      this.camera.position.x -= distance * event.movementX;\\n      this.camera.position.z -= distance * event.movementY;\\n    }\\n  }\\n\\n  mouseUp(event) {\\n    if (event.button != 2) return;\\n    panning = false;\\n  }\\n\\n  wheel(event) {\\n    if (!this.enabled) return;\\n\\n    event.preventDefault();\\n\\n    this.camera.position.y = Math.max(this.minAltitude, Math.min(this.maxAltitude, this.camera.position.y * Math.pow(0.995, -event.deltaY)));\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./js/simulator/Dashboard.js\\n\\n\\nconst MPS_TO_MPH = 2.23694;\\nconst METERS_TO_FEET = 3.28084;\\n\\nclass Dashboard_Dashboard {\\n  constructor(car) {\\n    this.car = car;\\n    this.units = \\'metric\\';\\n\\n    if (document.readyState == \\'complete\\') {\\n      this.fetchDomElements.call(this);\\n    } else {\\n      document.addEventListener(\\'readystatechange\\', event => {\\n        if (event.target.readyState == \\'complete\\')\\n          this.fetchDomElements.call(this);\\n      });\\n    }\\n  }\\n\\n  fetchDomElements() {\\n    this.wheelDom = document.getElementById(\\'wheel\\');\\n    this.wheelPieDom = document.getElementById(\\'wheel-pie\\');\\n    this.wheelPieLeftDom = document.getElementById(\\'wheel-pie-left\\');\\n    this.wheelPieRightDom = document.getElementById(\\'wheel-pie-right\\');\\n    this.gearDom = document.getElementById(\\'gear\\');\\n    this.gasDom = document.getElementById(\\'gas\\');\\n    this.brakeDom = document.getElementById(\\'brake\\');\\n    this.speedDom = document.getElementById(\\'speed\\');\\n    this.stationDom = document.getElementById(\\'station\\');\\n    this.latitudeDom = document.getElementById(\\'latitude\\');\\n    this.planTimeDom = document.getElementById(\\'plan-time\\');\\n    this.elapsedTimeDom = document.getElementById(\\'elapsed-time\\');\\n\\n    this.speedUnitsDom = document.getElementById(\\'speed-units\\');\\n    this.stationUnitsDom = document.getElementById(\\'station-units\\');\\n    this.latitudeUnitsDom = document.getElementById(\\'latitude-units\\');\\n\\n    [this.speedUnitsDom, this.stationUnitsDom, this.latitudeUnitsDom].forEach(el => {\\n      el.addEventListener(\\'click\\', event => {\\n        this.toggleUnits();\\n      });\\n    });\\n  }\\n\\n  toggleUnits() {\\n    let speedUnits;\\n    let distanceUnits;\\n\\n    if (this.units == \\'metric\\') {\\n      this.units = \\'imperial\\';\\n      speedUnits = \\'mph\\';\\n      distanceUnits = \\'feet\\';\\n    } else {\\n      this.units = \\'metric\\';\\n      speedUnits = \\'m/s\\';\\n      distanceUnits = \\'meters\\';\\n    }\\n\\n    // this.speedUnitsDom.textContent = speedUnits;\\n    // this.stationUnitsDom.textContent = distanceUnits;\\n    // this.latitudeUnitsDom.textContent = distanceUnits;\\n  }\\n\\n  updatePlanTime(planTime) {\\n    if (!this.wheelDom) return;\\n\\n    //this.planTimeDom.textContent = planTime !== null ? (planTime * 1000).toLocaleString(undefined, { maximumFractionDigits: 0 }) : \\'—\\';\\n  }\\n\\n  update(controls, speed, station, latitude, elapsedTime, planTime) {\\n    if (!this.wheelDom) return;\\n\\n    const wheelTurn = Math.clamp(this.car.wheelAngle / Car[\"a\" /* default */].MAX_WHEEL_ANGLE * 0.95, -1, +1);\\n\\n    this.wheelDom.style.transform = `rotate(${wheelTurn}turn)`;\\n\\n    if (wheelTurn >= 0) {\\n      this.wheelPieRightDom.style.transform = `rotate(${wheelTurn}turn)`;\\n\\n      if (wheelTurn <= 0.5) {\\n        this.wheelPieDom.style.clipPath = \"inset(0 0 0 50%)\";\\n        this.wheelPieLeftDom.style.transform = \"rotate(0)\";\\n      } else {\\n        this.wheelPieDom.style.clipPath = \"inset(0 0 0 0)\";\\n        this.wheelPieLeftDom.style.transform = \"rotate(0.5turn)\";\\n      }\\n    } else {\\n      this.wheelPieRightDom.style.transform = `rotate(${0.5 + wheelTurn}turn)`;\\n\\n      if (wheelTurn >= -0.5) {\\n        this.wheelPieDom.style.clipPath = \"inset(0 50% 0 0)\";\\n        this.wheelPieLeftDom.style.transform = \"rotate(0.5turn)\";\\n      } else {\\n        this.wheelPieDom.style.clipPath = \"inset(0 0 0 0)\";\\n        this.wheelPieLeftDom.style.transform = \"rotate(0)\";\\n      }\\n    }\\n\\n    this.gearDom.innerText = controls.gas < 0 ? \\'R\\' : \\'D\\';\\n    this.brakeDom.style.clipPath = `inset(50% 50% 0 ${50 - controls.brake * 25}%)`;\\n    this.gasDom.style.clipPath = `inset(50% ${50 - Math.abs(controls.gas) * 25}% 0 50%)`;\\n\\n    if (this.units == \\'imperial\\') {\\n      speed *= MPS_TO_MPH;\\n      station = station !== null ? station * METERS_TO_FEET : null;\\n      latitude = latitude !== null ? latitude * METERS_TO_FEET : null;\\n    }\\n\\n    let latitudeText = latitude !== null ? latitude.toFixed(2) : \\'—\\';\\n    if (latitudeText == \\'-0.00\\') latitudeText = \\'0.00\\';\\n\\n    this.speedDom.textContent = speed.toFixed(1);\\n    this.stationDom.textContent = station !== null ? station.toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 }) : \\'—\\';\\n    this.latitudeDom.textContent = latitudeText;\\n    this.updatePlanTime(planTime);\\n\\n    let mins = Math.floor(elapsedTime / 60);\\n    let seconds = elapsedTime % 60;\\n\\n    if (mins == 0) {\\n      this.elapsedTimeDom.textContent = seconds.toFixed(1);\\n    } else {\\n      if (seconds < 10)\\n        seconds = \\'0\\' + seconds.toFixed(1);\\n      else\\n        seconds = seconds.toFixed(1);\\n\\n      this.elapsedTimeDom.textContent = `${mins}:${seconds}`;\\n    }\\n  }\\n}\\n\\n// EXTERNAL MODULE: ./js/GPGPU.js\\nvar GPGPU = __webpack_require__(4);\\n\\n// CONCATENATED MODULE: ./js/autonomy/path-planning/RoadLattice.js\\nclass RoadLattice {\\n  constructor(lanePath, latticeStartStation, config) {\\n    const stationInterval = config.spatialHorizon / config.lattice.numStations;\\n    const centerline = lanePath.sampleStations(latticeStartStation, config.lattice.numStations, stationInterval);\\n    const lattice = new Array(centerline.length);\\n    const offset = Math.floor(config.lattice.numLatitudes / 2);\\n\\n    for (let s = 0; s < centerline.length; s++) {\\n      const sample = centerline[s];\\n      const latitudes = lattice[s] = new Array(config.lattice.numLatitudes);\\n\\n      for (let l = 0; l < config.lattice.numLatitudes; l++) {\\n        const latitude = (l - offset) / offset * config.roadWidth / 2;\\n        const rot = sample.rot;\\n        const pos = THREE.Vector2.fromAngle(rot + Math.PI / 2).multiplyScalar(latitude).add(sample.pos);\\n        const curv = sample.curv == 0 ? 0 : 1 / (1 / sample.curv - latitude);\\n\\n        latitudes[l] = { pos, rot, curv };\\n      }\\n    }\\n\\n    this.lattice = lattice;\\n  }\\n}\\n\\n// EXTERNAL MODULE: ./js/autonomy/path-planning/PathPlanner.js + 12 modules\\nvar PathPlanner = __webpack_require__(6);\\n\\n// CONCATENATED MODULE: ./js/autonomy/MovingAverage.js\\nclass MovingAverage {\\n  constructor(maxSamples) {\\n    this.samples = new Array(maxSamples);\\n    this.numSamples = 0;\\n    this.nextIndex = 0;\\n    this.average = null;\\n  }\\n\\n  addSample(sample) {\\n    this.samples[this.nextIndex++] = sample;\\n    this.nextIndex = this.nextIndex % this.samples.length;\\n    this.numSamples = Math.min(this.numSamples + 1, this.samples.length);\\n\\n    const k = 2 / (this.numSamples + 1);\\n    let curr = this.nextIndex % this.numSamples;\\n    let newAverage = this.samples[curr];\\n\\n    for (let i = 1; i < this.numSamples; i++) {\\n      curr = (curr + 1) % this.numSamples;\\n      newAverage = this.samples[curr] * k + newAverage * (1 - k);\\n    }\\n\\n    this.average = newAverage;\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./js/Simulator.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nconst WELCOME_MODAL_KEY = \\'dash_WelcomeModal\\';\\n\\nclass Simulator_Simulator {\\n  constructor(domElement) {\\n    this.pathPlannerWorker = new Worker(URL.createObjectURL(new Blob([`(${dash_initPathPlannerWorker.toString()})()`], { type: \\'text/javascript\\' })));\\n    this.pathPlannerWorker.onmessage = this.receivePlannedPath.bind(this);\\n    this.pathPlannerConfigEditor = new PathPlannerConfigEditor();\\n\\n    this.physics = new Physics_Physics();\\n    this.car = this.physics.createCar();\\n\\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\\n    this.renderer.setPixelRatio(window.devicePixelRatio);\\n    this.renderer.setSize(domElement.clientWidth, domElement.clientHeight);\\n    this.renderer.shadowMap.enabled = true;\\n    domElement.appendChild(this.renderer.domElement);\\n\\n    this.lastPlanParams = null;\\n    this.renderer.context.canvas.addEventListener(\\'webglcontextlost\\', event => {\\n      console.log(\\'Simulator: webgl context lost\\');\\n      console.log(event);\\n      console.log(this.lastPlanParams);\\n    });\\n\\n    this._setUpCameras(this.renderer.domElement);\\n\\n    this.scene = new THREE.Scene();\\n    this.sceneFog = null;//new THREE.FogExp2(0x111111, 0.0025);\\n    this.scene.fog = this.sceneFog;\\n    this.scene.background = new THREE.Color(0x111111); //0x111111\\n\\n    this.editor = new Editor_Editor(this.renderer.domElement, this.editorCamera, this.scene);\\n\\n    const geolocation = null;//[33.523900, -111.908756];\\n    const map = new MapObject(geolocation);\\n    this.scene.add(map);\\n\\n    this.carObject = new CarObject_CarObject(this.car);\\n    this.scene.add(this.carObject);\\n\\n    this.scene.add(new THREE.AmbientLight(0x666666));\\n    const light = new THREE.DirectionalLight(0xffffff, 0.75);\\n    light.position.set(1, 1, 1).normalize();\\n    this.scene.add(light);\\n\\n    this.manualCarController = new ManualController();\\n    this.autonomousCarController = null;\\n\\n    this.dashboard = new Dashboard_Dashboard(this.car);\\n\\n    this.plannerReady = false;\\n    this.plannerRunning = false;\\n    this.plannerReset = false;\\n    this.carStation = null;\\n    this.plannedPathGroup = new THREE.Group();\\n    this.scene.add(this.plannedPathGroup);\\n\\n    this.staticObstaclesGroup = new THREE.Group();\\n    this.scene.add(this.staticObstaclesGroup);\\n    this.dynamicObstaclesGroup = new THREE.Group();\\n    this.scene.add(this.dynamicObstaclesGroup);\\n\\n    this.paused = false;\\n    this.prevTimestamp = null;\\n    this.frameCounter = 0;\\n    this.fpsTime = 0;\\n    this.fps = 0;\\n    this.simulatedTime = 0;\\n    this.lastPlanTime = null;\\n    this.averagePlanTime = new MovingAverage(20);\\n\\n    window.addEventListener(\\'resize\\', e => {\\n      this._updateCameraAspects(domElement.clientWidth / domElement.clientHeight);\\n      this.renderer.setSize(domElement.clientWidth, domElement.clientHeight);\\n    });\\n\\n    window.addEventListener(\\'hashchange\\', e => {\\n      if (window.location.hash.startsWith(\\'#/s/\\'))\\n        window.location.reload();\\n    });\\n\\n    this.manualModeButton = document.getElementById(\\'mode-manual\\');\\n    this.manualModeButton.addEventListener(\\'click\\', this.enableManualMode.bind(this));\\n    this.autonomousModeButton = document.getElementById(\\'mode-autonomous\\');\\n    this.autonomousModeButton.addEventListener(\\'click\\', this.enableAutonomousMode.bind(this));\\n\\n    document.getElementById(\\'editor-enable\\').addEventListener(\\'click\\', this.enableEditor.bind(this));\\n    document.getElementById(\\'editor-finalize\\').addEventListener(\\'click\\', this.finalizeEditor.bind(this));\\n    document.getElementById(\\'simulator-load\\').addEventListener(\\'click\\', this.loadScenario.bind(this));\\n\\n    this.scenarioPlayButton = document.getElementById(\\'scenario-play\\');\\n    this.scenarioPlayButton.addEventListener(\\'click\\', this.playScenario.bind(this));\\n    this.scenarioPauseButton = document.getElementById(\\'scenario-pause\\');\\n    this.scenarioPauseButton.addEventListener(\\'click\\', this.pauseScenario.bind(this));\\n    this.scenarioRestartButton = document.getElementById(\\'scenario-restart\\');\\n    this.scenarioRestartButton.addEventListener(\\'click\\', this.restartScenario.bind(this));\\n\\n    this.welcomeModal = document.getElementById(\\'welcome-modal\\');\\n    document.getElementById(\\'show-welcome-modal\\').addEventListener(\\'click\\', e => this.welcomeModal.classList.add(\\'is-active\\'));\\n\\n    if (window.localStorage.getItem(WELCOME_MODAL_KEY) !== \\'hide\\') {\\n      this.welcomeModal.classList.add(\\'is-active\\');\\n    }\\n\\n    document.getElementById(\\'welcome-modal-background\\').addEventListener(\\'click\\', this.hideWelcomeModal.bind(this));\\n    document.getElementById(\\'welcome-modal-close\\').addEventListener(\\'click\\', this.hideWelcomeModal.bind(this));\\n\\n    document.getElementById(\\'welcome-modal-examples\\').addEventListener(\\'click\\', e => {\\n      this.welcomeModal.classList.remove(\\'is-active\\');\\n      this.loadScenario();\\n      this.editor.scenarioManager.switchTab(this.editor.scenarioManager.examplesTab);\\n    });\\n\\n    document.getElementById(\\'welcome-modal-create\\').addEventListener(\\'click\\', e => {\\n      this.welcomeModal.classList.remove(\\'is-active\\');\\n      this.enableEditor();\\n    });\\n\\n    this.simModeBoxes = Array.prototype.slice.call(document.getElementsByClassName(\\'sim-mode-box\\'), 0);\\n    this.editModeBoxes = Array.prototype.slice.call(document.getElementsByClassName(\\'edit-mode-box\\'), 0);\\n\\n    this.fpsBox = document.getElementById(\\'fps\\');\\n\\n    this.enableManualMode();\\n    this.changeCamera(\\'chase\\');\\n\\n    this.aroundAnchorIndex = null;\\n    this.staticObstacles = [];\\n    this.dynamicObstacles = [];\\n\\n    this._checkHashScenario();\\n\\n    requestAnimationFrame(this.step.bind(this));\\n  }\\n\\n  toss() {\\n    const pose = this.car.pose;\\n    const rotVec = THREE.Vector2.fromAngle(pose.rot);\\n    const pos = rotVec.clone().multiplyScalar(50).add(new THREE.Vector2(rotVec.y, rotVec.x)).add(pose.pos);\\n    const obstacle = new StaticObstacle[\"a\" /* default */](pos, 0, 1.0, 1.0);\\n\\n    const obsGeom = new THREE.PlaneGeometry(obstacle.width, obstacle.height);\\n    const obsMat = new THREE.MeshBasicMaterial({ color: 0x0000ff, depthTest: false, transparent: true, opacity: 0.5 });\\n    const obsObj = new THREE.Mesh(obsGeom, obsMat);\\n    obsObj.rotation.x = -Math.PI / 2;\\n    obsObj.rotation.z = -obstacle.rot;\\n    obsObj.position.set(obstacle.pos.x, 0, obstacle.pos.y);\\n    this.scene.add(obsObj);\\n\\n    this.staticObstacles.push(obstacle);\\n  }\\n\\n  _checkHashScenario() {\\n    if (!window.location.hash.startsWith(\\'#/s/\\')) return;\\n\\n    const [_hash, _s, code] = window.location.hash.split(\\'/\\');\\n\\n    try {\\n      const json = JSON.parse(atob(decodeURIComponent(code)));\\n      this.editor.loadJSON(json);\\n      this.finalizeEditor();\\n      this.welcomeModal.classList.remove(\\'is-active\\');\\n      window.location.hash = \\'\\';\\n    } catch (e) {\\n      console.log(\\'Error importing scenario code:\\');\\n      console.log(code);\\n      console.log(e);\\n    }\\n  }\\n\\n  _setUpCameras(domElement) {\\n    this.chaseCamera = new THREE.PerspectiveCamera(55, domElement.clientWidth / domElement.clientHeight, 1, 10000);\\n    this.chaseCameraControls = new simulator_OrbitControls(this.chaseCamera, domElement);\\n    this.chaseCameraControls.minDistance = 4;\\n    this.chaseCameraControls.maxDistance = 5000;\\n    this.chaseCameraControls.maxPolarAngle = Math.PI / 2.02;\\n    this.chaseCameraControls.enablePan = false;\\n    this.chaseCameraControls.enabled = false;\\n    this._resetChaseCamera();\\n\\n    this.freeCamera = new THREE.PerspectiveCamera(55, domElement.clientWidth / domElement.clientHeight, 1, 10000);\\n    this.freeCameraControls = new simulator_OrbitControls(this.freeCamera, domElement);\\n    this.freeCameraControls.minDistance = 5;\\n    this.freeCameraControls.maxDistance = 5000;\\n    this.freeCameraControls.maxPolarAngle = Math.PI / 2.02;\\n    this.freeCameraControls.enabled = true;\\n    this._resetFreeCamera();\\n\\n    this.topDownCamera = new THREE.PerspectiveCamera(55, domElement.clientWidth / domElement.clientHeight, 1, 10000);\\n    this.topDownCamera.position.set(0, 50, 0);\\n    this.topDownCamera.lookAt(0, 0, 0);\\n    this.topDownControls = new TopDownCameraControls(domElement, this.topDownCamera);\\n    this.topDownControls.enabled = false;\\n    this.topDownControls.minAltitude = 5;\\n    this.topDownControls.maxAltitude = 10000;\\n\\n    this.editorCamera = new THREE.PerspectiveCamera(45, domElement.clientWidth / domElement.clientHeight, 1, 10000);\\n    this.editorCamera.layers.enable(2);\\n    this.editorCamera.position.set(0, 200, 0);\\n    this.editorCamera.lookAt(0, 0, 0);\\n    this.editorCameraControls = new TopDownCameraControls(domElement, this.editorCamera);\\n    this.editorCameraControls.enabled = false;\\n    this.editorCameraControls.enablePanning = true;\\n    this.editorCameraControls.minAltitude = 10;\\n    this.editorCameraControls.maxAltitude = 10000;\\n\\n    this.cameraButtons = {};\\n\\n    [\\'free\\', \\'chase\\', \\'topDown\\'].forEach(c => {\\n      const cameraButton = document.getElementById(`camera-${c}`);\\n      cameraButton.addEventListener(\\'click\\', () => this.changeCamera(c));\\n      this.cameraButtons[c] = cameraButton;\\n    });\\n\\n    this.switchTo2DButton = document.getElementById(\\'camera-2D\\');\\n    this.switchTo2DButton.addEventListener(\\'click\\', this.switchTo2D.bind(this));\\n    this.switchTo3DButton = document.getElementById(\\'camera-3D\\');\\n    this.switchTo3DButton.addEventListener(\\'click\\', this.switchTo3D.bind(this));\\n\\n    this.switchTo3D();\\n  }\\n\\n  _resetFreeCamera() {\\n    this.freeCameraControls.position0.copy(this.chaseCamera.position);\\n    const carPosition = this.car.position;\\n    this.freeCameraControls.target0.set(carPosition.x, 0, carPosition.y);\\n    this.freeCameraControls.reset();\\n  }\\n\\n  _resetChaseCamera() {\\n    const pos = this.car.position;\\n    const dirVector = THREE.Vector2.fromAngle(this.car.rotation).multiplyScalar(-20);\\n    this.chaseCamera.position.set(pos.x + dirVector.x, 8, pos.y + dirVector.y);\\n    this.chaseCamera.lookAt(pos.x, 0, pos.y);\\n  }\\n\\n  _resetTopDownCamera() {\\n    const carPosition = this.car.position;\\n    this.topDownCamera.position.set(carPosition.x, 50, carPosition.y);\\n    this.topDownCamera.rotation.z = -this.car.rotation - Math.PI / 2\\n  }\\n\\n  _updateCameraAspects(aspect) {\\n    this.freeCamera.aspect = aspect;\\n    this.freeCamera.updateProjectionMatrix();\\n    this.chaseCamera.aspect = aspect;\\n    this.chaseCamera.updateProjectionMatrix();\\n    this.topDownCamera.aspect = aspect;\\n    this.topDownCamera.updateProjectionMatrix();\\n    this.editorCamera.aspect = aspect;\\n    this.editorCamera.updateProjectionMatrix();\\n  }\\n\\n  enableEditor() {\\n    this.editor.enabled = true;\\n    this.plannerRunning = false;\\n\\n    this.previousCamera = this.camera;\\n    this.camera = this.editorCamera;\\n    this.editorCameraControls.enabled = true;\\n    this.chaseCameraControls.enabled = false;\\n    this.topDownControls.enabled = false;\\n    this.freeCameraControls.enabled = false;\\n\\n    this.scene.fog = null;\\n    this.carObject.visible = false;\\n    if (this.plannedPathGroup) this.plannedPathGroup.visible = false;\\n    this.staticObstaclesGroup.visible = false;\\n    this.dynamicObstaclesGroup.visible = false;\\n\\n    this.simModeBoxes.forEach(el => el.classList.add(\\'is-hidden\\'));\\n    this.editModeBoxes.forEach(el => el.classList.remove(\\'is-hidden\\'));\\n  }\\n\\n  finalizeEditor(replaceCamera = true) {\\n    this.editor.enabled = false;\\n    this.editorCameraControls.enabled = false;\\n\\n    this.scene.fog = this.sceneFog;\\n    this.carObject.visible = true;\\n\\n    this.simModeBoxes.forEach(el => el.classList.remove(\\'is-hidden\\'));\\n    this.editModeBoxes.forEach(el => el.classList.add(\\'is-hidden\\'));\\n\\n    if (this.editor.lanePath.anchors.length > 1) {\\n      const centerline = this.editor.lanePath.centerline;\\n      const pos = centerline[0].clone();\\n      const dir = centerline[1].clone().sub(centerline[0]);\\n      const rot = Math.atan2(dir.y, dir.x);\\n      const perpindicular = rot + Math.PI / 2 * (Math.sign(this.editor.lanePreference) || 0);\\n      const latitude = this.pathPlannerConfigEditor.config.roadWidth / 4;\\n\\n      this.car.setPose(pos.x + Math.cos(perpindicular) * latitude, pos.y + Math.sin(perpindicular) * latitude, rot);\\n      this.car.velocity = this.editor.initialSpeed;\\n\\n      this.dynamicObstacles = this.editor.dynamicObstacles;\\n\\n      // The `false` value means the controller is waiting to be created after the first planning cycle.\\n      // This signals the simulator to use neutral controls instead of the hard brake used for the `null` value.\\n      this.autonomousCarController = false;\\n      this.enableAutonomousMode();\\n\\n      if (!this.plannerRunning) {\\n        this.plannerReady = true;\\n        this.plannerRunning = true;\\n      }\\n      this.plannerReset = true;\\n      this.simulatedTime = 0;\\n      this.carStation = 0;\\n      this.aroundAnchorIndex = null;\\n\\n      this.pauseScenario();\\n      this.autonomousModeButton.classList.add(\\'is-loading\\');\\n      this.waitingForFirstPlan = true;\\n    } else {\\n      this.dynamicObstacles = [];\\n    }\\n\\n    this.staticObstacles = this.editor.staticObstacles;\\n    this.recreateStaticObstacleObjects();\\n    this.recreateDynamicObstacleObjects();\\n\\n    //this.dashboard.update({ steer: 0, brake: 0, gas: 0 }, this.car.velocity, null, null, 0, this.averagePlanTime.average);\\n\\n    if (replaceCamera) {\\n      this.camera = this.previousCamera;\\n\\n      if (this.previousCamera == this.chaseCamera)\\n        this.chaseCameraControls.enabled = true;\\n      else if (this.previousCamera == this.topDownCamera)\\n        this.topDownControls.enabled = true;\\n      else if (this.previousCamera == this.freeCamera)\\n        this.freeCameraControls.enabled = true;\\n      else\\n        this.changeCamera(\\'chase\\');\\n    }\\n\\n    this._resetFreeCamera();\\n    this._resetChaseCamera();\\n    this._resetTopDownCamera();\\n  }\\n\\n  recreateStaticObstacleObjects() {\\n    this.scene.remove(this.staticObstaclesGroup);\\n    this.staticObstaclesGroup = new THREE.Group();\\n    this.scene.add(this.staticObstaclesGroup);\\n\\n    this.staticObstacles.forEach(o => {\\n      const obstacleObject = new StaticObstacleObject(o);\\n      this.staticObstaclesGroup.add(obstacleObject);\\n    });\\n  }\\n\\n  recreateDynamicObstacleObjects() {\\n    this.scene.remove(this.dynamicObstaclesGroup);\\n    this.dynamicObstaclesGroup = new THREE.Group();\\n    this.scene.add(this.dynamicObstaclesGroup);\\n\\n    this.dynamicObstacles.forEach(o => {\\n      const obstacleObject = new DynamicObstacleObject(o, this.editor.lanePath);\\n      this.dynamicObstaclesGroup.add(obstacleObject);\\n    });\\n\\n    this.updateDynamicObjects(this.simulatedTime);\\n  }\\n\\n  updateDynamicObjects(time) {\\n    //this.dynamicObstaclesGroup.children.forEach(o => o.update(time));\\n  }\\n\\n  playScenario() {\\n    this.paused = false;\\n    this.scenarioPlayButton.classList.add(\\'is-hidden\\');\\n    this.scenarioPauseButton.classList.remove(\\'is-hidden\\');\\n  }\\n\\n  pauseScenario() {\\n    this.paused = true;\\n    this.scenarioPlayButton.classList.remove(\\'is-hidden\\');\\n    this.scenarioPauseButton.classList.add(\\'is-hidden\\');\\n  }\\n\\n  restartScenario() {\\n    if (this.editor.enabled) return;\\n\\n    if (this.plannedPathGroup)\\n      this.scene.remove(this.plannedPathGroup);\\n\\n    this.finalizeEditor(false);\\n  }\\n\\n  loadScenario() {\\n    if (this.editor.enabled) return;\\n\\n    this.editor.scenarioManager.showModal(this.finalizeEditor.bind(this));\\n  }\\n\\n  enableManualMode() {\\n    this.manualModeButton.classList.remove(\\'is-outlined\\');\\n    this.manualModeButton.classList.add(\\'is-selected\\');\\n    this.autonomousModeButton.classList.add(\\'is-outlined\\', \\'is-inverted\\');\\n    this.autonomousModeButton.classList.remove(\\'is-selected\\', \\'is-link\\');\\n\\n    this.carControllerMode = \\'manual\\';\\n  }\\n\\n  enableAutonomousMode() {\\n    this.autonomousModeButton.classList.remove(\\'is-outlined\\', \\'is-inverted\\');\\n    this.autonomousModeButton.classList.add(\\'is-selected\\', \\'is-link\\');\\n    this.manualModeButton.classList.add(\\'is-outlined\\');\\n    this.manualModeButton.classList.remove(\\'is-selected\\');\\n\\n    this.carControllerMode = \\'autonomous\\';\\n  }\\n\\n  changeCamera(mode) {\\n    if (this.editor.enabled) return;\\n\\n    switch (mode) {\\n      case \"free\":\\n        this.chaseCameraControls.enabled = false;\\n        this.topDownControls.enabled = false;\\n        this.freeCameraControls.enabled = true;\\n\\n        if (this.camera == this.freeCamera)\\n          this._resetFreeCamera();\\n        else\\n          this.camera = this.freeCamera;\\n\\n        break;\\n      case \"chase\":\\n        this.freeCameraControls.enabled = false;\\n        this.topDownControls.enabled = false;\\n        this.chaseCameraControls.enabled = true;\\n\\n        if (this.camera == this.chaseCamera)\\n          this._resetChaseCamera();\\n        else\\n          this.camera = this.chaseCamera;\\n\\n        break;\\n      case \"topDown\":\\n        this.freeCameraControls.enabled = false;\\n        this.chaseCameraControls.enabled = false;\\n        this.topDownControls.enabled = true;\\n\\n        if (this.camera == this.topDownCamera)\\n          this._resetTopDownCamera();\\n        else\\n          this.camera = this.topDownCamera;\\n\\n        break;\\n      default:\\n        console.log(`Unknown camera mode: ${mode}`);\\n        return;\\n    }\\n\\n    for (const c in this.cameraButtons) {\\n      const classes = this.cameraButtons[c].classList;\\n      if (c == mode) {\\n        classes.remove(\\'is-outlined\\');\\n        classes.add(\\'is-selected\\');\\n      } else {\\n        classes.add(\\'is-outlined\\');\\n        classes.remove(\\'is-selected\\');\\n      }\\n    }\\n  }\\n\\n  switchTo2D() {\\n    this.switchTo2DButton.classList.remove(\\'is-outlined\\');\\n    this.switchTo2DButton.classList.add(\\'is-selected\\');\\n    this.switchTo3DButton.classList.add(\\'is-outlined\\');\\n    this.switchTo3DButton.classList.remove(\\'is-selected\\');\\n\\n    this.chaseCamera.layers.enable(2);\\n    this.topDownCamera.layers.enable(2);\\n    this.freeCamera.layers.enable(2);\\n    this.chaseCamera.layers.disable(3);\\n    this.topDownCamera.layers.disable(3);\\n    this.freeCamera.layers.disable(3);\\n  }\\n\\n  switchTo3D() {\\n    this.switchTo3DButton.classList.remove(\\'is-outlined\\');\\n    this.switchTo3DButton.classList.add(\\'is-selected\\');\\n    this.switchTo2DButton.classList.add(\\'is-outlined\\');\\n    this.switchTo2DButton.classList.remove(\\'is-selected\\');\\n\\n    this.chaseCamera.layers.enable(3);\\n    this.topDownCamera.layers.enable(3);\\n    this.freeCamera.layers.enable(3);\\n    this.chaseCamera.layers.disable(2);\\n    this.topDownCamera.layers.disable(2);\\n    this.freeCamera.layers.disable(2);\\n  }\\n\\n  hideWelcomeModal() {\\n    this.welcomeModal.classList.remove(\\'is-active\\');\\n    window.localStorage.setItem(WELCOME_MODAL_KEY, \\'hide\\');\\n  }\\n\\n  startPlanner(pose, station) {\\n    this.plannerReady = false;\\n    this.lastPlanTime = performance.now();\\n\\n    // In order to create a stable trajectory between successive planning\\n    // cycles, we must compensate for the latency between when a planning cycle\\n    // starts and when it ends. The average planning time is used to forward\\n    // simulate the vehicle to the pose it is expected to have when the\\n    // planning actually finishes.\\n\\n    let predictedPose = pose;\\n    let predictedStation = station;\\n    let startTime = this.simulatedTime;\\n\\n    if (!this.plannerReset && !this.paused && this.autonomousCarController && this.carControllerMode == \\'autonomous\\') {\\n      const latency = this.averagePlanTime.average;\\n      predictedPose = this.autonomousCarController.predictPoseAfterTime(pose, latency);\\n      let [predictedStation] = this.editor.lanePath.stationLatitudeFromPosition(predictedPose.pos, this.aroundAnchorIndex);\\n      startTime += latency;\\n    }\\n\\n    const reset = this.plannerReset;\\n    this.plannerReset = false;\\n\\n    this.lastPlanParams =  {\\n      config: Object.assign({}, this.pathPlannerConfigEditor.config, { speedLimit: this.editor.speedLimit, lanePreference: this.editor.lanePreference }),\\n      vehiclePose: predictedPose,\\n      vehicleStation: predictedStation,\\n      lanePath: this.editor.lanePath,\\n      startTime: startTime,\\n      staticObstacles: this.staticObstacles,\\n      dynamicObstacles: this.dynamicObstacles.filter(o => o.positionAtTime(startTime).x >= 0),\\n      reset: reset\\n    };\\n\\n    this.pathPlannerWorker.postMessage(this.lastPlanParams);\\n  }\\n\\n  receivePlannedPath(event) {\\n    if (event.data.error) {\\n      document.getElementById(\\'planner-error\\').classList.remove(\\'is-hidden\\');\\n      return;\\n    }\\n\\n    if (this.waitingForFirstPlan && !this.plannerReset) {\\n      this.waitingForFirstPlan = false;\\n      this.autonomousModeButton.classList.remove(\\'is-loading\\');\\n      this.playScenario();\\n    }\\n\\n    if (this.editor.enabled) return;\\n\\n    const { fromVehicleParams, vehiclePose, vehicleStation, latticeStartStation, config, dynamicObstacleGrid } = event.data;\\n    let { path, fromVehicleSegment } = event.data;\\n\\n    this.averagePlanTime.addSample((performance.now() - this.lastPlanTime) / 1000);\\n    this.plannerReady = true;\\n\\n    if (this.plannerReset) return;\\n\\n    if (this.plannedPathGroup)\\n      this.scene.remove(this.plannedPathGroup);\\n    this.plannedPathGroup = new THREE.Group();\\n    this.scene.add(this.plannedPathGroup);\\n\\n    const circleGeom = new THREE.CircleGeometry(0.1, 32);\\n    const circleMat = new THREE.MeshBasicMaterial({ color: 0x00ff80, transparent: true, opacity: 0.7 });\\n\\n    const lattice = new RoadLattice(this.editor.lanePath, latticeStartStation, config);\\n    lattice.lattice.forEach(cells => {\\n      cells.forEach(c => {\\n        const circle = new THREE.Mesh(circleGeom, circleMat);\\n        circle.position.set(c.pos.x, 0, c.pos.y);\\n        circle.rotation.x = -Math.PI / 2;\\n        this.plannedPathGroup.add(circle);\\n      });\\n    });\\n\\n    // TODO: clear this up or just remove it\\n    if (false) {}\\n\\n    if (path === null) {\\n      this.autonomousCarController = null;\\n      return;\\n    }\\n\\n    if (fromVehicleParams.type == \\'cubic\\') {\\n      const start = this.car.pose;\\n      const end = fromVehicleSegment[fromVehicleSegment.length - 1];\\n\\n      const pathBuilder = new CubicPath[\"a\" /* default */](start, end, fromVehicleParams.params);\\n\\n      if (pathBuilder.optimize()) {\\n        fromVehicleSegment = pathBuilder.buildPath(Math.ceil(pathBuilder.params.sG / 0.25));\\n\\n        const prevVelocitySq = this.car.velocity * this.car.velocity;\\n        const accel = (end.velocity * end.velocity - prevVelocitySq) / 2 / pathBuilder.params.sG;\\n        const ds = pathBuilder.params.sG / (fromVehicleSegment.length - 1);\\n        let s = 0;\\n\\n        for (let p = 0; p < fromVehicleSegment.length; p++) {\\n          fromVehicleSegment[p].velocity = Math.sqrt(2 * accel * s + prevVelocitySq);\\n          fromVehicleSegment[p].acceleration = accel;\\n          s += ds;\\n        }\\n      }\\n    }\\n\\n    path = fromVehicleSegment.concat(path);\\n\\n    path.forEach(p => Object.setPrototypeOf(p.pos, THREE.Vector2.prototype));\\n    const followPath = new Path_Path(path);\\n\\n    if (this.autonomousCarController)\\n      this.autonomousCarController.replacePath(followPath);\\n    else\\n      this.autonomousCarController = new FollowController_FollowController(followPath, this.car);\\n\\n    const pathGeometry = new THREE.Geometry();\\n    pathGeometry.setFromPoints(path.map(p => new THREE.Vector3(p.pos.x, 0, p.pos.y)));\\n    const pathLine = new MeshLine();\\n    pathLine.setGeometry(pathGeometry);\\n\\n    const color = fromVehicleParams.type == \\'cubic\\' ? new THREE.Color(0xff8800) : new THREE.Color(0xffff40);\\n    const pathObject = new THREE.Mesh(\\n      pathLine.geometry,\\n      new MeshLineMaterial({\\n        color: color,\\n        lineWidth: 0.15,\\n        resolution: new THREE.Vector2(this.renderer.domElement.clientWidth, this.renderer.domElement.clientHeight)\\n      })\\n    );\\n    pathObject.renderOrder = 1;\\n    this.plannedPathGroup.add(pathObject);\\n  }\\n\\n  step(timestamp) {\\n    if (this.prevTimestamp == null) {\\n      this.prevTimestamp = timestamp;\\n      requestAnimationFrame(this.step.bind(this));\\n      return;\\n    }\\n\\n    const dt = (timestamp - this.prevTimestamp) / 1000;\\n\\n    this.editor.update();\\n\\n    if (!this.editor.enabled && !this.paused) {\\n      this.simulatedTime += dt;\\n\\n      const prevCarPosition = this.car.position;\\n      const prevCarRotation = this.car.rotation;\\n\\n      const manualControls = this.manualCarController.control(this.car.pose, this.car.wheelAngle, this.car.velocity, dt);\\n      if (manualControls.steer != 0 || manualControls.brake != 0 || manualControls.gas != 0)\\n        this.enableManualMode();\\n\\n      let autonomousControls = { steer: 0, brake: 0, gas: 0};\\n      if (this.autonomousCarController)\\n        autonomousControls = this.autonomousCarController.control(this.car.pose, this.car.wheelAngle, this.car.velocity, dt, this.carControllerMode == \\'autonomous\\') ;\\n      else if (this.autonomousCarController === null)\\n        autonomousControls = { steer: 0, brake: 1, gas: 0 };\\n\\n      const controls = this.carControllerMode == \\'autonomous\\' ? autonomousControls : manualControls;\\n\\n      this.car.update(controls, dt);\\n      this.physics.step(dt);\\n\\n      this.updateDynamicObjects(this.simulatedTime);\\n\\n      const carPosition = this.car.position;\\n      const carRotation = this.car.rotation;\\n      const carRearAxle = this.car.rearAxlePosition;\\n      const carVelocity = this.car.velocity;\\n\\n      const positionOffset = { x: carPosition.x - prevCarPosition.x, y: 0, z: carPosition.y - prevCarPosition.y };\\n      this.chaseCamera.position.add(positionOffset);\\n      this.chaseCameraControls.target.set(carPosition.x, 0, carPosition.y);\\n      this.chaseCameraControls.rotateLeft(carRotation - prevCarRotation);\\n      this.chaseCameraControls.update();\\n\\n      this.topDownCamera.position.setX(carPosition.x);\\n      this.topDownCamera.position.setZ(carPosition.y);\\n      this.topDownCamera.rotation.z = -carRotation - Math.PI / 2\\n\\n      let latitude = null;\\n\\n      if (this.editor.lanePath.anchors.length > 1) {\\n        const [s, l, aroundAnchorIndex] = this.editor.lanePath.stationLatitudeFromPosition(carRearAxle, this.aroundAnchorIndex);\\n        this.aroundAnchorIndex = aroundAnchorIndex;\\n\\n        this.carStation = s;\\n        latitude = l;\\n      }\\n      //this.dashboard.update(controls, carVelocity, this.carStation, latitude, this.simulatedTime, this.averagePlanTime.average);\\n    }\\n\\n    if (!this.editor.enabled && this.plannerReady) {\\n      this.startPlanner(this.car.pose, this.carStation || 0);\\n      this.dashboard.updatePlanTime(this.averagePlanTime.average);\\n    }\\n\\n    this.frameCounter++;\\n    this.fpsTime += dt;\\n    if (this.fpsTime >= 1) {\\n      this.fps = this.frameCounter / this.fpsTime;\\n      this.frameCounter = 0;\\n      this.fpsTime = 0;\\n      this.fpsBox.textContent = this.fps.toFixed(1);\\n    }\\n\\n    this.renderer.render(this.scene, this.camera);\\n\\n    this.prevTimestamp = timestamp;\\n\\n    requestAnimationFrame(this.step.bind(this));\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./js/Dash.js\\n\\n\\n\\ndocument.addEventListener(\\'DOMContentLoaded\\', e => {\\n  window.simulator = new Simulator_Simulator(document.getElementById(\\'container\\'));\\n});\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///14\\n')}]);","extractedComments":[]}